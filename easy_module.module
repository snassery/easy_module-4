<?php

/**
 * @file
 * Easy Module is a friendly tool to generate modules' skeleton.
 */

/**
 * Implements hook_permission().
 *
 * @return Assoc
 *   permission items.
 */
function easy_module_user($type, &$edit, &$user, $category = NULL) {
  switch ($type) {
    case 'view':
      $items['Last Login'] = array(
        'title' => t('Last login'),
        'value' => format_date($user->login,'small'), 
        'class' => 'mymodule',       
      );      
      return array(t('History') => $items);
      break;
}
  return $block;
}

/**
 * Implements hook_theme().
 *
 * @param array $existing
 *   An array of existing implementations that may be used for override
 *   purposes. This is primarily useful for themes that may wish to examine
 *   existing implementations to extract data (such as arguments) so that it may
 *   properly register its own, higher priority implementations.
 * @param string $type
 *   Whether a theme, module, etc. is being processed. This is primarily useful
 *   so that themes tell if they are the actual theme being called or a parent
 *   theme. May be one of: 'module': A module is being checked for theme
 *   implementations. 'base_theme_engine': A theme engine is being checked for a
 *   theme that is a parent of the actual theme being used. 'theme_engine': A
 *   theme engine is being checked for the actual theme being used.
 *   'base_theme': A base theme is being checked for theme implementations.
 *   'theme': The actual theme in use is being checked.
 * @param string $theme
 *   The actual name of theme, module, etc. that is being being processed.
 * @param array $path
 *   An associative array of theme hook information.
 *
 * @return Assoc
 *   Themes.
 */
function easy_module_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', EasyModuleConstants::MODULE_NAME) . '/tpl';
  return array(
    'easy_module-hooks' => array(
      'path' => $path,
      'template' => 'easy_module-hooks',
      'variables' => array(
        'hooks_data' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_library().
 *
 * @return Assoc
 *   implemented libraries.
 */
function easy_module_library() {
  $libraries = array();
  $module_path = drupal_get_path('module', EasyModuleConstants::MODULE_NAME);
  $libraries['datatables'] = array(
    'title' => 'DataTables',
    'website' => 'http://datatables.net/',
    'version' => '1.9.1',
    'js' => array(
      $module_path . '/js/libs/datatables/js/jquery.dataTables.min.js' => array(),
    ),
    'css' => array(
      $module_path . '/js/libs/datatables/css/jquery.dataTables.css' => array(),
      $module_path . '/js/libs/datatables/css/jquery.dataTables_themeroller.css' => array(),
    ),
  );
  $libraries['syntaxhighlighter'] = array(
    'title' => 'SyntaxHighlighter',
    'website' => 'http://alexgorbatchev.com/SyntaxHighlighter/',
    'version' => '3.0.83',
    'js' => array(
      $module_path . '/js/libs/SyntaxHighlighter/scripts/XRegExp.js' => array(),
      $module_path . '/js/libs/SyntaxHighlighter/scripts/shCore.js' => array(),
      $module_path . '/js/libs/SyntaxHighlighter/scripts/shBrushPhp.js' => array(),
    ),
    'css' => array(
      $module_path . '/js/libs/SyntaxHighlighter/styles/shCore.css' => array(),
      $module_path . '/js/libs/SyntaxHighlighter/styles/shThemeDefault.css' => array(),
    ),
  );
  return $libraries;
}
