<?php
/**
 * Export to PHP Array plugin for PHPMyAdmin
 * @version 0.2b
 */

// `easy_module_hooks`
$hooks = array(
  array('id' => '1','drupal_version' => '6','name' => 'custom_url_rewrite_inbound','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/custom_url_rewrite_inbound/6','short_description' => 'custom_url_rewrite_inbound is not a hook, it\'s a function you can add to settings.php to alter incoming requests so they map to a Drupal path. This function is called before modules are loaded and the menu system is initialized and it changes…','description' => 'custom_url_rewrite_inbound is not a hook, it\'s a function you can add to
settings.php to alter incoming requests so they map to a Drupal path.
This function is called before modules are loaded and
the menu system is initialized and it changes $_GET[\'q\']. This function should change the value of $result by reference.','documentation' => '
 * custom_url_rewrite_inbound is not a hook, it\'s a function you can add to
 * settings.php to alter incoming requests so they map to a Drupal path. This
 * function is called before modules are loaded and the menu system is
 * initialized and it changes $_GET[\'q\']. This function should change the value
 * of $result by reference.','params_docs' => '
 *
 * @param $result
 *   The Drupal path based on the database. If there is no match in the database
 *   it\'ll be the same as $path.
 * @param $path
 *   The path to be rewritten.
 * @param $path_language
 *   An optional language code to rewrite the path into.','signature' => 'custom_url_rewrite_inbound(&$result, $path, $path_language)','sample_code' => '  global $user;

  // Change all article/x requests to node/x
  if (preg_match(\'|^article(/.*)|\', $path, $matches)) {
    $result = \'node\' . $matches[1];
  }
  // Redirect a path called \'e\' to the user\'s profile edit page.
  if ($path == \'e\') {
    $result = \'user/\' . $user->uid . \'/edit\';
  }'),
  array('id' => '2','drupal_version' => '6','name' => 'custom_url_rewrite_outbound','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/custom_url_rewrite_outbound/6','short_description' => 'custom_url_rewrite_outbound is not a hook, it\'s a function you can add to settings.php to alter all links generated by Drupal. This function is called from url(). This function is called very frequently (100+ times per page) so performance…','description' => 'custom_url_rewrite_outbound is not a hook, it\'s a function you can add to
settings.php to alter all links generated by Drupal. This function is called from url().
This function is called very frequently (100+ times per page) so performance is
critical. This function should change the value of $path and $options by reference.','documentation' => '
 * custom_url_rewrite_outbound is not a hook, it\'s a function you can add to
 * settings.php to alter all links generated by Drupal. This function is called
 * from url(). This function is called very frequently (100+ times per page) so
 * performance is critical. This function should change the value of $path and
 * $options by reference.','params_docs' => '
 *
 * @param $path
 *   The alias of the $original_path as defined in the database. If there is no
 *   match in the database it\'ll be the same as $original_path.
 * @param $options
 *   An array of link attributes such as querystring and fragment. See.
 * @param $original_path
 *   The unaliased Drupal path that is being linked to.','signature' => 'custom_url_rewrite_outbound(&$path, &$options, $original_path)','sample_code' => '  global $user;

  // Change all \'node\' to \'article\'.
  if (preg_match(\'|^node(/.*)|\', $path, $matches)) {
    $path = \'article\' . $matches[1];
  }
  // Create a path called \'e\' which lands the user on her profile edit page.
  if ($path == \'user/\' . $user->uid . \'/edit\') {
    $path = \'e\';
  }'),
  array('id' => '3','drupal_version' => '6','name' => 'hook_access','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_access/6','short_description' => 'Define access restrictions.','description' => 'Define access restrictions. This hook allows node modules to limit access to the node types they
define.','documentation' => '
 * Define access restrictions. This hook allows node modules to limit access to
 * the node types they define.','params_docs' => '
 *
 * @param $op
 *   The operation to be performed. Possible values: "create" "delete" "update"
 *   "view".
 * @param $node
 *   Either a node object or the machine name of the content type on which to
 *   perform the access check.
 * @param $account
 *   The user object to perform the access check operation on.
 *
 * @return
 *   TRUE if the operation is to be allowed. FALSE if the operation is to be
 *   denied. NULL to not override the settings in the node_access table, or
 *   access control modules. The administrative account (user ID #1) always
 *   passes any access check, so this hook is not called in that case. If this
 *   hook is not defined for a node type, all access checks will fail, so only
 *   the administrator will be able to see content of that type. However, users
 *   with the "administer nodes" permission may always view and edit content
 *   through the administrative interface.','signature' => 'hook_access($op, $node, $account)','sample_code' => '  if ($op == \'create\') {
    return user_access(\'create stories\', $account);
  }

  if ($op == \'update\' || $op == \'delete\') {
    if (user_access(\'edit own stories\', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }'),
  array('id' => '4','drupal_version' => '6','name' => 'hook_actions_delete','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_actions_delete/6','short_description' => 'Execute code after an action is deleted.','description' => 'Execute code after an action is deleted.','documentation' => '
 * Execute code after an action is deleted.','params_docs' => '
 *
 * @param $aid
 *   The action ID.','signature' => 'hook_actions_delete($aid)','sample_code' => '  db_query("DELETE FROM {actions_assignments} WHERE aid = \'%s\'", $aid);'),
  array('id' => '5','drupal_version' => '6','name' => 'hook_action_info','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_action_info/6','short_description' => 'Declare information about one or more Drupal actions.','description' => 'Declare information about one or more Drupal actions. Any module can define any number of Drupal actions. The trigger module is an
example of a module that uses actions. An action consists of two or three
parts: (1) an action definition (returned by this hook), (2) a function which
does the action (which by convention is named module + \'_\' + description of
what the function does + \'_action\'), and an optional form definition
function that defines a configuration form (which has the name of the action
with \'_form\' appended to it.)','documentation' => '
 * Declare information about one or more Drupal actions. Any module can define
 * any number of Drupal actions. The trigger module is an example of a module
 * that uses actions. An action consists of two or three parts: (1) an action
 * definition (returned by this hook), (2) a function which does the action
 * (which by convention is named module + \'_\' + description of what the function
 * does + \'_action\'), and an optional form definition function that defines a
 * configuration form (which has the name of the action with \'_form\' appended to
 * it.).','params_docs' => '
 *
 * @return
 *   An array of action descriptions. Each action description is an associative
 *   array, where the key of the item is the action\'s function, and the following
 *   key-value pairs: \'type\': (required) the type is determined by what object
 *   the action acts on. Possible choices are node, user, comment, and system. Or
 *   whatever your own custom type is. So, for the nodequeue module, the type
 *   might be set to \'nodequeue\' if the action would be performed on a nodequeue.
 *   \'description\': (required) The human-readable name of the action.','signature' => 'hook_action_info()','sample_code' => '  return array(
    \'comment_unpublish_action\' => array(
      \'description\' => t(\'Unpublish comment\'),
      \'type\' => \'comment\',
      \'configurable\' => FALSE,
      \'hooks\' => array(
        \'comment\' => array(\'insert\', \'update\'),
      ),
    ),
    \'comment_unpublish_by_keyword_action\' => array(
      \'description\' => t(\'Unpublish comment containing keyword(s)\'),
      \'type\' => \'comment\',
      \'configurable\' => TRUE,
      \'hooks\' => array(
        \'comment\' => array(\'insert\', \'update\'),
      ),
    ),
  );'),
  array('id' => '6','drupal_version' => '6','name' => 'hook_action_info_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_action_info_alter/6','short_description' => 'Alter the actions declared by another module.','description' => 'Alter the actions declared by another module. Called by actions_list() to allow modules to alter the return
values from implementations of hook_action_info().','documentation' => '
 * Alter the actions declared by another module. Called by actions_list() to
 * allow modules to alter the return values from implementations of
 * hook_action_info().','params_docs' => '','signature' => 'hook_action_info_alter(&$actions)','sample_code' => '  $actions[\'node_unpublish_action\'][\'description\'] = t(\'Unpublish and remove from public view.\');'),
  array('id' => '7','drupal_version' => '6','name' => 'hook_block','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_block/6','short_description' => 'Declare a block or set of blocks.','description' => 'Declare a block or set of blocks. Any module can declare a block (or blocks) to be displayed by implementing
hook_block(), which also allows you to specify any custom configuration
settings, and how to display the block. In hook_block(), each block your module provides is given a unique
identifier referred to as "delta" (the array key in the return value for the
\'list\' operation). Delta values only need to be unique within your module,
and they are used in the following ways: Passed into the other hook_block() operations as an argument to
identify the block being configured or viewed.
Used to construct the default HTML ID of "block-MODULE-DELTA" applied to
each block when it is rendered (which can then be used for CSS styling or
JavaScript programming).
Used to define a theming template suggestion of block__MODULE__DELTA, for
advanced theming possibilities. The values of delta can be strings or numbers, but because of the uses above
it is preferable to use descriptive strings whenever possible, and only use a
numeric identifier if you have to (for instance if your module allows users
to create several similar blocks that you identify within your module code
with numeric IDs).','documentation' => '
 * Declare a block or set of blocks. Any module can declare a block (or blocks)
 * to be displayed by implementing hook_block(), which also allows you to specify
 * any custom configuration settings, and how to display the block. In
 * hook_block(), each block your module provides is given a unique identifier
 * referred to as "delta" (the array key in the return value for the \'list\'
 * operation). Delta values only need to be unique within your module, and they
 * are used in the following ways: Passed into the other hook_block() operations
 * as an argument to identify the.','params_docs' => '
 *
 * @param $op
 *   What kind of information to retrieve about the block or blocks. Possible
 *   values: \'list\': A list of all blocks defined by the module. \'configure\':
 *   Configuration form for the block. \'save\': Save the configuration options.
 *   \'view\': Process the block when enabled in a region in order to view its
 *   contents.
 * @param $delta
 *   Which block to return (not applicable if $op is \'list\'). See above for more
 *   information about delta values.
 * @param $edit
 *   If $op is \'save\', the submitted form data from the configuration form.
 *
 * @return
 *   If $op is \'list\': An array of block descriptions. Each block description is
 *   an associative array, with the following key-value pairs: \'info\': (required)
 *   The human-readable name of the block. This is used to identify the block on
 *   administration screens, and is not displayed to non-administrative users.
 *   \'cache\': A bitmask of flags describing how the block should behave with
 *   respect to block caching. The following shortcut bitmasks are provided as
 *   constants in block.','signature' => 'hook_block($op = \'list\', $delta = 0, $edit = array())','sample_code' => '  if ($op == \'list\') {
    $blocks[0] = array(
      \'info\' => t(\'Mymodule block #1 shows ...\'),
      \'weight\' => 0,
      \'status\' => 1,
      \'region\' => \'left\',
    );
    // BLOCK_CACHE_PER_ROLE will be assumed for block 0.

    $blocks[1] = array(
      \'info\' => t(\'Mymodule block #2 describes ...\'),
      \'cache\' => BLOCK_CACHE_PER_ROLE | BLOCK_CACHE_PER_PAGE,
    );

    return $blocks;
  }
  else if ($op == \'configure\' && $delta == 0) {
    $form[\'items\'] = array(
      \'#type\' => \'select\',
      \'#title\' => t(\'Number of items\'),
      \'#default_value\' => variable_get(\'mymodule_block_items\', 0),
      \'#options\' => array(\'1\', \'2\', \'3\'),
    );
    return $form;
  }
  else if ($op == \'save\' && $delta == 0) {
    variable_set(\'mymodule_block_items\', $edit[\'items\']);
  }
  else if ($op == \'view\') {
    switch ($delta) {
      case 0:
        // Your module will need to define this function to render the block.
        $block = array(
          \'subject\' => t(\'Title of block #1\'),
          \'content\' => mymodule_display_block_1(),
        );
        break;
      case 1:
        // Your module will need to define this function to render the block.
        $block = array(
          \'subject\' => t(\'Title of block #2\'),
          \'content\' => mymodule_display_block_2(),
        );
        break;
    }
    return $block;
  }'),
  array('id' => '8','drupal_version' => '6','name' => 'hook_boot','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_boot/6','short_description' => 'Perform setup tasks. See also, hook_init.','description' => 'Perform setup tasks. See also, hook_init. This hook is run at the beginning of the page request. It is typically
used to set up global parameters which are needed later in the request. Only use this hook if your code must run even for cached page views.This hook
is called before modules or most include files are loaded into memory.
It happens while Drupal is still in bootstrap mode.','documentation' => '
 * Perform setup tasks. See also, hook_init. This hook is run at the beginning of
 * the page request. It is typically used to set up global parameters which are
 * needed later in the request. Only use this hook if your code must run even for
 * cached page views.This hook is called before modules or most include files are
 * loaded into memory. It happens while Drupal is still in bootstrap mode.','params_docs' => '
 *
 * @return
 *   None.','signature' => 'hook_boot()','sample_code' => '  // we need user_access() in the shutdown function. make sure it gets loaded
  drupal_load(\'module\', \'user\');
  register_shutdown_function(\'devel_shutdown\');'),
  array('id' => '9','drupal_version' => '6','name' => 'hook_comment','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_comment/6','short_description' => 'Respond to comment actions.','description' => 'Respond to comment actions. This hook allows modules to extend the comments system by responding when
certain actions take place.','documentation' => '
 * Respond to comment actions. This hook allows modules to extend the comments
 * system by responding when certain actions take place.','params_docs' => '
 *
 * @param $a1
 *   Argument; meaning is dependent on the action being performed. For
 *   "validate", "update", and "insert": an array of form values submitted by the
 *   user. For all other operations, the comment the action is being performed
 *   on.
 * @param $op
 *   The action being performed. Possible values: "insert": The comment is being
 *   inserted. "update": The comment is being updated. "view": The comment is
 *   being viewed. This hook can be used to add additional data to the comment
 *   before theming. "validate": The user has just finished editing the comment
 *   and is trying to preview or submit it. This hook can be used to check the
 *   comment. Errors should be set with form_set_error(). "publish": The comment
 *   is being published by the moderator. "unpublish": The comment is being
 *   unpublished by the moderator. "delete": The comment is being deleted by the
 *   moderator.','signature' => 'hook_comment(&$a1, $op)','sample_code' => '  if ($op == \'insert\' || $op == \'update\') {
    $nid = $a1[\'nid\'];
  }

  cache_clear_all_like(drupal_url(array(\'id\' => $nid)));'),
  array('id' => '10','drupal_version' => '6','name' => 'hook_cron','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_cron/6','short_description' => 'Perform periodic actions.','description' => 'Perform periodic actions. Modules that require to schedule some commands to be executed at regular
intervals can implement hook_cron(). The engine will then call the hook
at the appropriate intervals defined by the administrator. This interface
is particularly handy to implement timers or to automate certain tasks.
Database maintenance, recalculation of settings or parameters, and
automatic mailings are good candidates for cron tasks.','documentation' => '
 * Perform periodic actions. Modules that require to schedule some commands to be
 * executed at regular intervals can implement hook_cron(). The engine will then
 * call the hook at the appropriate intervals defined by the administrator. This
 * interface is particularly handy to implement timers or to automate certain
 * tasks. Database maintenance, recalculation of settings or parameters, and
 * automatic mailings are good candidates for cron tasks.','params_docs' => '
 *
 * @return
 *   None. This hook will only be called if cron.php is run (e.g. by crontab).','signature' => 'hook_cron()','sample_code' => '  $result = db_query(\'SELECT * FROM {site} WHERE checked = 0 OR checked
    + refresh < %d\', time());

  while ($site = db_fetch_array($result)) {
    cloud_update($site);
  }'),
  array('id' => '11','drupal_version' => '6','name' => 'hook_db_rewrite_sql','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_db_rewrite_sql/6','short_description' => 'Rewrite database queries, usually for access control.','description' => 'Rewrite database queries, usually for access control. Add JOIN and WHERE statements to queries and decide whether the primary_field
shall be made DISTINCT. For node objects, primary field is always called nid.
For taxonomy terms, it is tid and for vocabularies it is vid. For comments,
it is cid. Primary table is the table where the primary object (node, file,
term_node etc.) is. You shall return an associative array. Possible keys are \'join\', \'where\' and
\'distinct\'. The value of \'distinct\' shall be 1 if you want that the
primary_field made DISTINCT.','documentation' => '
 * Rewrite database queries, usually for access control. Add JOIN and WHERE
 * statements to queries and decide whether the primary_field shall be made
 * DISTINCT. For node objects, primary field is always called nid. For taxonomy
 * terms, it is tid and for vocabularies it is vid. For comments, it is cid.
 * Primary table is the table where the primary object (node, file, term_node
 * etc.) is. You shall return an associative array. Possible keys are \'join\',
 * \'where\' and \'distinct\'. The value of \'distinct\' shall be 1 if you want that
 * the primary_field made DISTINCT.','params_docs' => '
 *
 * @param $query
 *   Query to be rewritten.
 * @param $primary_table
 *   Name or alias of the table which has the primary key field for this query.
 *   Typical table names would be: {blocks}, {comments}, {forum}, {node}, {menu},
 *   {term_data} or {vocabulary}. However, it is more common for $primary_table
 *   to contain the usual table alias: b, c, f, n, m, t or v.
 * @param $primary_field
 *   Name of the primary field.
 * @param $args
 *   Array of additional arguments.
 *
 * @return
 *   An array of join statements, where statements, distinct decision.','signature' => 'hook_db_rewrite_sql($query, $primary_table, $primary_field, $args)','sample_code' => '  switch ($primary_field) {
    case \'nid\':
      // this query deals with node objects
      $return = array();
      if ($primary_table != \'n\') {
        $return[\'join\'] = "LEFT JOIN {node} n ON $primary_table.nid = n.nid";
      }
      $return[\'where\'] = \'created >\' . mktime(0, 0, 0, 1, 1, 2005);
      return $return;
      break;
    case \'tid\':
      // this query deals with taxonomy objects
      break;
    case \'vid\':
      // this query deals with vocabulary objects
      break;
  }'),
  array('id' => '12','drupal_version' => '6','name' => 'hook_delete','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_delete/6','short_description' => 'Respond to node deletion.','description' => 'Respond to node deletion. This is a hook used by node modules. It is called to allow the module
to take action when a node is being deleted from the database by, for
example, deleting information from related tables.','documentation' => '
 * Respond to node deletion. This is a hook used by node modules. It is called to
 * allow the module to take action when a node is being deleted from the database
 * by, for example, deleting information from related tables.','params_docs' => '
 *
 * @param &$node
 *   The node being deleted.
 *
 * @return
 *   None. To take action when nodes of any type are deleted (not just nodes of
 *   the type defined by this module), use hook_nodeapi() instead. For a detailed
 *   usage example, see node_example.module.','signature' => 'hook_delete(&$node)','sample_code' => '  db_query(\'DELETE FROM {mytable} WHERE nid = %d\', $node->nid);'),
  array('id' => '13','drupal_version' => '6','name' => 'hook_disable','link' => 'http://api.drupal.org/api/drupal/developer!hooks!install.php/function/hook_disable/6','short_description' => 'Perform necessary actions before module is disabled.','description' => 'Perform necessary actions before module is disabled. The hook is called everytime module is disabled.','documentation' => '
 * Perform necessary actions before module is disabled. The hook is called
 * everytime module is disabled.','params_docs' => '','signature' => 'hook_disable()','sample_code' => '  mymodule_cache_rebuild();'),
  array('id' => '14','drupal_version' => '6','name' => 'hook_elements','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_elements/6','short_description' => 'Allows modules to declare their own Forms API element types and specify their default values.','description' => 'Allows modules to declare their own Forms API element types and specify their
default values. This hook allows modules to declare their own form element types and to
specify their default values. The values returned by this hook will be
merged with the elements returned by hook_form() implementations and so
can return defaults for any Form APIs keys in addition to those explicitly
mentioned below. Each of the form element types defined by this hook is assumed to have
a matching theme function, e.g. theme_elementtype(), which should be
registered with hook_theme() as normal. For more information about custom element types see the explanation at
http://drupal.org/node/169815 .','documentation' => '
 * Allows modules to declare their own Forms API element types and specify their
 * default values. This hook allows modules to declare their own form element
 * types and to specify their default values. The values returned by this hook
 * will be merged with the elements returned by hook_form() implementations and
 * so can return defaults for any Form APIs keys in addition to those explicitly
 * mentioned below. Each of the form element types defined by this hook is
 * assumed to have a matching theme function, e.g.','params_docs' => '
 *
 * @return
 *   An associative array describing the element types being defined. The array
 *   contains a sub-array for each element type, with the machine-readable type
 *   name as the key. Each sub-array has a number of possible attributes:
 *   "#input": boolean indicating whether or not this element carries a value
 *   (even if it\'s hidden). "#process": array of callback functions taking
 *   $element, $edit, $form_state, and $complete_form. "#after_build": array of
 *   callback functions taking $element and $form_state. "#validate": array of
 *   callback functions taking $form and.','signature' => 'hook_elements()','sample_code' => '  $type[\'filter_format\'] = array(\'#input\' => TRUE);
  return $type;'),
  array('id' => '15','drupal_version' => '6','name' => 'hook_enable','link' => 'http://api.drupal.org/api/drupal/developer!hooks!install.php/function/hook_enable/6','short_description' => 'Perform necessary actions after module is enabled.','description' => 'Perform necessary actions after module is enabled. The hook is called everytime module is enabled.','documentation' => '
 * Perform necessary actions after module is enabled. The hook is called
 * everytime module is enabled.','params_docs' => '','signature' => 'hook_enable()','sample_code' => '  mymodule_cache_rebuild();'),
  array('id' => '16','drupal_version' => '6','name' => 'hook_exit','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_exit/6','short_description' => 'Perform cleanup tasks.','description' => 'Perform cleanup tasks. This hook is run at the end of each page request. It is often used for
page logging and printing out debugging information. Only use this hook if your code must run even for cached page views.
If you have code which must run once on all non cached pages, use
hook_init instead. Thats the usual case. If you implement this hook
and see an error like \'Call to undefined function\', it is likely that
you are depending on the presence of a module which has not been loaded yet.
It is not loaded because Drupal is still in bootstrap mode.','documentation' => '
 * Perform cleanup tasks. This hook is run at the end of each page request. It is
 * often used for page logging and printing out debugging information. Only use
 * this hook if your code must run even for cached page views. If you have code
 * which must run once on all non cached pages, use hook_init instead. Thats the
 * usual case. If you implement this hook and see an error like \'Call to
 * undefined function\', it is likely that you are depending on the presence of a
 * module which has not been loaded yet. It is not loaded because Drupal is still
 * in bootstrap mode.','params_docs' => '
 *
 * @param $destination
 *   If this hook is invoked as part of a.
 *
 * @return
 *   None.','signature' => 'hook_exit($destination = NULL)','sample_code' => '  db_query(\'UPDATE {counter} SET hits = hits + 1 WHERE type = 1\');'),
  array('id' => '17','drupal_version' => '6','name' => 'hook_file_download','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_file_download/6','short_description' => 'Control access to private file downloads and specify HTTP headers.','description' => 'Control access to private file downloads and specify HTTP headers. This hook allows modules enforce permissions on file downloads when the
private file download method is selected. Modules can also provide headers
to specify information like the file\'s name or MIME type.','documentation' => '
 * Control access to private file downloads and specify HTTP headers. This hook
 * allows modules enforce permissions on file downloads when the private file
 * download method is selected. Modules can also provide headers to specify
 * information like the file\'s name or MIME type.','params_docs' => '
 *
 * @param $filepath
 *   String of the file\'s path.
 *
 * @return
 *   If the user does not have permission to access the file, return -1. If the
 *   user has permission, return an array with the appropriate headers. If the
 *   file is not controlled by the current module, the return value should be
 *   NULL.','signature' => 'hook_file_download($filepath)','sample_code' => '  if ($filemime = db_result(db_query("SELECT filemime FROM {fileupload} WHERE filepath = \'%s\'", file_create_path($filepath)))) {
    if (user_access(\'access content\')) {
      return array(\'Content-type:\' . $filemime);
    }
    else {
      return -1;
    }
  }'),
  array('id' => '18','drupal_version' => '6','name' => 'hook_filter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_filter/6','short_description' => 'Define content filters.','description' => 'Define content filters. Content in Drupal is passed through all enabled filters before it is
output. This lets a module modify content to the site administrator\'s
liking. This hook contains all that is needed for having a module provide filtering
functionality. Depending on $op, different tasks are performed. A module can contain as many filters as it wants. The \'list\' operation tells
the filter system which filters are available. Every filter has a numerical
\'delta\' which is used to refer to it in every operation. Filtering is a two-step process. First, the content is \'prepared\' by calling
the \'prepare\' operation for every filter. The purpose of \'prepare\' is to
escape HTML-like structures. For example, imagine a filter which allows the
user to paste entire chunks of programming code without requiring manual
escaping of special HTML characters like @< or @&. If the programming code
were left untouched, then other filters could think it was HTML and change
it. For most filters however, the prepare-step is not necessary, and they can
just return the input without changes. Filters should not use the \'prepare\' step for anything other than escaping,
because that would short-circuits the control the user has over the order
in which filters are applied. The second step is the actual processing step. The result from the
prepare-step gets passed to all the filters again, this time with the
\'process\' operation. It\'s here that filters should perform actual changing of
the content: transforming URLs into hyperlinks, converting smileys into
images, etc. An important aspect of the filtering system are \'input formats\'. Every input
format is an entire filter setup: which filters to enable, in what order
and with what settings. Filters that provide settings should usually store
these settings per format. If the filter\'s behaviour depends on an extensive list and/or external data
(e.g. a list of smileys, a list of glossary terms) then filters are allowed
to provide a separate, global configuration page rather than provide settings
per format. In that case, there should be a link from the format-specific
settings to the separate settings page. For performance reasons content is only filtered once; the result is stored
in the cache table and retrieved the next time the piece of content is
displayed. If a filter\'s output is dynamic it can override the cache
mechanism, but obviously this feature should be used with caution: having one
\'no cache\' filter in a particular input format disables caching for the
entire format, not just for one filter. Beware of the filter cache when developing your module: it is advised to set
your filter to \'no cache\' while developing, but be sure to remove it again
if it\'s not needed. You can clear the cache by running the SQL query \'DELETE
FROM cache_filter\';','documentation' => '
 * Define content filters. Content in Drupal is passed through all enabled
 * filters before it is output. This lets a module modify content to the site
 * administrator\'s liking. This hook contains all that is needed for having a
 * module provide filtering functionality. Depending on $op, different tasks are
 * performed. A module can contain as many filters as it wants. The \'list\'
 * operation tells the filter system which filters are available. Every filter
 * has a numerical \'delta\' which is used to refer to it in every operation.
 * Filtering is a two-step process.','params_docs' => '
 *
 * @param $op
 *   Which filtering operation to perform. Possible values: list: provide a list
 *   of available filters. Returns an associative array of filter names with
 *   numerical keys. These keys are used for subsequent operations and passed
 *   back through the $delta parameter. no cache: Return true if caching should
 *   be disabled for this filter. description: Return a short description of what
 *   this filter does. prepare: Return the prepared version of the content in
 *   $text. process: Return the processed version of the content in $text.
 *   settings: Return HTML form controls for the filter\'s settings. These
 *   settings are stored with variable_set() when the form is submitted. Remember
 *   to use the $format identifier in the variable and control names to store
 *   settings per input format (e.g. "mymodule_setting_$format").
 * @param $delta
 *   Which of the module\'s filters to use (applies to every operation except
 *   \'list\'). Modules that only contain one filter can ignore this parameter.
 * @param $format
 *   Which input format the filter is being used in (applies to \'prepare\',
 *   \'process\' and \'settings\').
 * @param $text
 *   The content to filter (applies to \'prepare\' and \'process\').
 * @param $cache_id
 *   The cache id of the content.
 *
 * @return
 *   The return value depends on $op. The filter hook is designed so that a
 *   module can return $text for operations it does not use/need. For a detailed
 *   usage example, see filter_example.module. For an example of using multiple
 *   filters in one module, see filter_filter() and filter_filter_tips().','signature' => 'hook_filter($op, $delta = 0, $format = -1, $text = \'\', $cache_id = 0)','sample_code' => '  switch ($op) {
    case \'list\':
      return array(0 => t(\'Code filter\'));

    case \'description\':
      return t(\'Allows users to post code verbatim using &lt;code&gt; and &lt;?php ?&gt; tags.\');

    case \'prepare\':
      // Note: we use [ and ] to replace < > during the filtering process.
      // For more information, see "Temporary placeholders and
      // delimiters" at http://drupal.org/node/209715.
      $text = preg_replace(\'@<code>(.+?)</code>@se\', "\'[codefilter-code]\' . codefilter_escape(\'\\\\1\') . \'[/codefilter-code]\'", $text);
      $text = preg_replace(\'@<(\\?(php)?|%)(.+?)(\\?|%)>@se\', "\'[codefilter-php]\' . codefilter_escape(\'\\\\3\') . \'[/codefilter-php]\'", $text);
      return $text;

    case "process":
      $text = preg_replace(\'@[codefilter-code](.+?)[/codefilter-code]@se\', "codefilter_process_code(\'$1\')", $text);
      $text = preg_replace(\'@[codefilter-php](.+?)[/codefilter-php]@se\', "codefilter_process_php(\'$1\')", $text);
      return $text;

    default:
      return $text;
  }'),
  array('id' => '19','drupal_version' => '6','name' => 'hook_filter_tips','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_filter_tips/6','short_description' => 'Provide tips for using filters.','description' => 'Provide tips for using filters. A module\'s tips should be informative and to the point. Short tips are
preferably one-liners.','documentation' => '
 * Provide tips for using filters. A module\'s tips should be informative and to
 * the point. Short tips are preferably one-liners.','params_docs' => '
 *
 * @param $delta
 *   Which of this module\'s filters to use. Modules which only implement one
 *   filter can ignore this parameter.
 * @param $format
 *   Which format we are providing tips for.
 * @param $long
 *   If set to true, long tips are requested, otherwise short tips are needed.
 *
 * @return
 *   The text of the filter tip.','signature' => 'hook_filter_tips($delta, $format, $long = FALSE)','sample_code' => '  if ($long) {
    return t(\'To post pieces of code, surround them with &lt;code&gt;...&lt;/code&gt; tags. For PHP code, you can use &lt;?php ... ?&gt;, which will also colour it based on syntax.\');
  }
  else {
    return t(\'You may post code using &lt;code&gt;...&lt;/code&gt; (generic) or &lt;?php ... ?&gt; (highlighted PHP) tags.\');
  }'),
  array('id' => '20','drupal_version' => '6','name' => 'hook_flush_caches','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_flush_caches/6','short_description' => 'Add a list of cache tables to be cleared.','description' => 'Add a list of cache tables to be cleared. This hook allows your module to add cache table names to the list of cache
tables that will be cleared by the Clear button on the Performance page or
whenever drupal_flush_all_caches is invoked.','documentation' => '
 * Add a list of cache tables to be cleared. This hook allows your module to add
 * cache table names to the list of cache tables that will be cleared by the
 * Clear button on the Performance page or whenever drupal_flush_all_caches is
 * invoked.','params_docs' => '
 *
 * @param None.
 *   :.
 *
 * @return
 *   An array of cache table names.','signature' => 'hook_flush_caches()','sample_code' => '  return array(\'cache_example\');'),
  array('id' => '21','drupal_version' => '6','name' => 'hook_footer','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_footer/6','short_description' => 'Insert closing HTML.','description' => 'Insert closing HTML. This hook enables modules to insert HTML just before the \\</body\\> closing
tag of web pages. This is useful for adding JavaScript code to the footer
and for outputting debug information. It is not possible to add JavaScript
to the header at this point, and developers wishing to do so should use
hook_init() instead.','documentation' => '
 * Insert closing HTML. This hook enables modules to insert HTML just before the
 * \\</body\\> closing tag of web pages. This is useful for adding JavaScript code
 * to the footer and for outputting debug information. It is not possible to add
 * JavaScript to the header at this point, and developers wishing to do so should
 * use hook_init() instead.','params_docs' => '
 *
 * @param $main
 *   Whether the current page is the front page of the site.
 *
 * @return
 *   The HTML to be inserted.','signature' => 'hook_footer($main = 0)','sample_code' => '  if (variable_get(\'dev_query\', 0)) {
    return \'<div style="clear:both;">\' . devel_query_table() . \'</div>\';
  }'),
  array('id' => '22','drupal_version' => '6','name' => 'hook_form','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_form/6','short_description' => 'Display a node editing form.','description' => 'Display a node editing form. This hook, implemented by node modules, is called to retrieve the form
that is displayed when one attempts to "create/edit" an item. This form is
displayed at the URI http://www.example.com/?q=node/<add|edit>/nodetype.','documentation' => '
 * Display a node editing form. This hook, implemented by node modules, is called
 * to retrieve the form that is displayed when one attempts to "create/edit" an
 * item. This form is displayed at the URI
 * http://www.example.com/?q=node/<add|edit>/nodetype.','params_docs' => '
 *
 * @param &$node
 *   The node being added or edited.
 * @param $form_state
 *   The form state array. Changes made to this variable will have no effect.
 *
 * @return
 *   An array containing the form elements to be displayed in the node edit form.
 *   The submit and preview buttons, taxonomy controls, and administrative
 *   accoutrements are displayed automatically by node.module. This hook needs to
 *   return the node title, the body text area, and fields specific to the node
 *   type. For a detailed usage example, see node_example.module.','signature' => 'hook_form(&$node, $form_state)','sample_code' => '  $type = node_get_types(\'type\', $node);

  $form[\'title\'] = array(
    \'#type\' => \'textfield\',
    \'#title\' => check_plain($type->title_label),
    \'#required\' => TRUE,
    \'#default_value\' => $node->title,
  );

  $form[\'body_field\'] = node_body_field($node, $type->body_label, $type->min_word_count);

  $form[\'field1\'] = array(
    \'#type\' => \'textfield\',
    \'#title\' => t(\'Custom field\'),
    \'#default_value\' => $node->field1,
    \'#maxlength\' => 127,
  );
  $form[\'selectbox\'] = array(
    \'#type\' => \'select\',
    \'#title\' => t(\'Select box\'),
    \'#default_value\' => $node->selectbox,
    \'#options\' => array(
      1 => \'Option A\',
      2 => \'Option B\',
      3 => \'Option C\',
    ),
    \'#description\' => t(\'Please choose an option.\'),
  );

  return $form;'),
  array('id' => '23','drupal_version' => '6','name' => 'hook_forms','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_forms/6','short_description' => 'Map form_ids to builder functions.','description' => 'Map form_ids to builder functions. This hook allows modules to build multiple forms from a single form "factory"
function but each form will have a different form id for submission,
validation, theming or alteration by other modules. The callback arguments will be passed as parameters to the function. Callers
of drupal_get_form() are also able to pass in parameters. These will be
appended after those specified by hook_forms(). See node_forms() for an actual example of how multiple forms share a common
building function.','documentation' => '
 * Map form_ids to builder functions. This hook allows modules to build multiple
 * forms from a single form "factory" function but each form will have a
 * different form id for submission, validation, theming or alteration by other
 * modules. The callback arguments will be passed as parameters to the function.
 * Callers of drupal_get_form() are also able to pass in parameters. These will
 * be appended after those specified by hook_forms(). See node_forms() for an
 * actual example of how multiple forms share a common building function.','params_docs' => '
 *
 * @param $form_id
 *   The unique string identifying the desired form.
 * @param $args
 *   An array containing the original arguments provided to.
 *
 * @return
 *   An array keyed by form id with callbacks and optional, callback arguments.','signature' => 'hook_forms($form_id, $args)','sample_code' => '  $forms[\'mymodule_first_form\'] = array(
    \'callback\' => \'mymodule_form_builder\',
    \'callback arguments\' => array(\'some parameter\'),
  );
  $forms[\'mymodule_second_form\'] = array(
    \'callback\' => \'mymodule_form_builder\',
  );
  return $forms;'),
  array('id' => '24','drupal_version' => '6','name' => 'hook_form_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_form_alter/6','short_description' => 'Perform alterations before a form is rendered.','description' => 'Perform alterations before a form is rendered. One popular use of this hook is to add form elements to the node form. When
altering a node form, the node object can be retrieved from $form[\'#node\']. Note that instead of hook_form_alter(), which is called for all forms, you
can also use hook_form_FORM_ID_alter() to alter a specific form.','documentation' => '
 * Perform alterations before a form is rendered. One popular use of this hook is
 * to add form elements to the node form. When altering a node form, the node
 * object can be retrieved from $form[\'#node\']. Note that instead of
 * hook_form_alter(), which is called for all forms, you can also use
 * hook_form_FORM_ID_alter() to alter a specific form.','params_docs' => '
 *
 * @param $form
 *   Nested array of form elements that comprise the form. The arguments that.
 * @param $form_state
 *   A keyed array containing the current state of the form.
 * @param $form_id
 *   String representing the name of the form itself. Typically this is the name
 *   of the function that generated the form.','signature' => 'hook_form_alter(&$form, &$form_state, $form_id)','sample_code' => '  if (isset($form[\'type\']) && isset($form[\'#node\']) && $form[\'type\'][\'#value\'] . \'_node_form\' == $form_id) {
    $path = isset($form[\'#node\']->path) ? $form[\'#node\']->path : NULL;
    $form[\'path\'] = array(
      \'#type\' => \'fieldset\',
      \'#title\' => t(\'URL path settings\'),
      \'#collapsible\' => TRUE,
      \'#collapsed\' => empty($path),
      \'#access\' => user_access(\'create url aliases\'),
      \'#weight\' => 30,
    );
    $form[\'path\'][\'path\'] = array(
      \'#type\' => \'textfield\',
      \'#default_value\' => $path,
      \'#maxlength\' => 128,
      \'#collapsible\' => TRUE,
      \'#collapsed\' => TRUE,
      \'#description\' => t(\'Optionally specify an alternative URL by which this node can be accessed. For example, type "about" when writing an about page. Use a relative path and don\\\'t add a trailing slash or the URL alias won\\\'t work.\'),
    );
    if ($path) {
      $form[\'path\'][\'pid\'] = array(
        \'#type\' => \'value\',
        \'#value\' => db_result(db_query("SELECT pid FROM {url_alias} WHERE dst = \'%s\' AND language = \'%s\'", $path, $form[\'#node\']->language)),
      );
    }
  }'),
  array('id' => '25','drupal_version' => '6','name' => 'hook_form_FORM_ID_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_form_FORM_ID_alter/6','short_description' => 'Provide a form-specific alteration instead of the global hook_form_alter().','description' => 'Provide a form-specific alteration instead of the global hook_form_alter(). Modules can implement hook_form_FORM_ID_alter() to modify a specific form,
rather than implementing hook_form_alter() and checking the form ID, or
using long switch statements to alter multiple forms. Note that this hook fires before hook_form_alter(). Therefore all
implementations of hook_form_FORM_ID_alter() will run before all
implementations of hook_form_alter(), regardless of the module order.','documentation' => '
 * Provide a form-specific alteration instead of the global hook_form_alter().
 * Modules can implement hook_form_FORM_ID_alter() to modify a specific form,
 * rather than implementing hook_form_alter() and checking the form ID, or using
 * long switch statements to alter multiple forms. Note that this hook fires
 * before hook_form_alter(). Therefore all implementations of
 * hook_form_FORM_ID_alter() will run before all implementations of
 * hook_form_alter(), regardless of the module order.','params_docs' => '
 *
 * @param $form
 *   Nested array of form elements that comprise the form. The arguments that.
 * @param $form_state
 *   A keyed array containing the current state of the form.','signature' => 'hook_form_FORM_ID_alter(&$form, &$form_state)','sample_code' => '  // Modification for the form with the given form ID goes here. For example, if
  // FORM_ID is "user_register" this code would run only on the user
  // registration form.

  // Add a checkbox to registration form about agreeing to terms of use.
  $form[\'terms_of_use\'] = array(
    \'#type\' => \'checkbox\',
    \'#title\' => t("I agree with the website\'s terms and conditions."),
    \'#required\' => TRUE,
  );'),
  array('id' => '26','drupal_version' => '6','name' => 'hook_help','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_help/6','short_description' => 'Provide online user help.','description' => 'Provide online user help. By implementing hook_help(), a module can make documentation
available to the user for the module as a whole, or for specific paths.
Help for developers should usually be provided via function
header comments in the code, or in special API example files. For a detailed usage example, see page_example.module.','documentation' => '
 * Provide online user help. By implementing hook_help(), a module can make
 * documentation available to the user for the module as a whole, or for specific
 * paths. Help for developers should usually be provided via function header
 * comments in the code, or in special API example files. For a detailed usage
 * example, see page_example.module.','params_docs' => '
 *
 * @param $path
 *   The router menu path, as defined in admin/help#modulename The main module
 *   help text, displayed on the admin/help/modulename page and linked to from
 *   the admin/help page. user/help#modulename The help for a distributed
 *   authorization module (if applicable).
 * @param $arg
 *   An array that corresponds to the return value of the.
 *
 * @return
 *   A localized string containing the help text.','signature' => 'hook_help($path, $arg)','sample_code' => '  switch ($path) {
    // Main module help for the block module
    case \'admin/help#block\':
      return \'<p>\' . t(\'Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Garland, for example, implements the regions "left sidebar", "right sidebar", "content", "header", and "footer", and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.\', array(\'@blocks\' => url(\'admin/structure/block\'))) . \'</p>\';

      // Help for another path in the block module
    case \'admin/build/block\':
      return \'<p>\' . t(\'This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the <em>Save blocks</em> button at the bottom of the page.\') . \'</p>\';
  }'),
  array('id' => '27','drupal_version' => '6','name' => 'hook_hook_info','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_hook_info/6','short_description' => 'Expose a list of triggers (events) that users can assign actions to.','description' => 'Expose a list of triggers (events) that users can assign actions to. Note: Implementing this hook doesn\'t actually make any action functions run.
It just lets the trigger module set up an admin page that will let a site
administrator assign actions to hooks. To make this work, module needs to: Detect that the event has happened
Figure out which actions have been associated with the event. Currently,
the best way to do that is to call _trigger_get_hook_aids(), whose inputs
are the name of the hook and the name of the operation, as defined in your
hook_hook_info() return value)
Call the associated action functions using the actions_do() function.','documentation' => '
 * Expose a list of triggers (events) that users can assign actions to. Note:
 * Implementing this hook doesn\'t actually make any action functions run. It just
 * lets the trigger module set up an admin page that will let a site
 * administrator assign actions to hooks. To make this work, module needs to:
 * Detect that the event has happened Figure out which actions have been
 * associated with the event. Currently, the best way to do that is to call
 * _trigger_get_hook_aids(), whose inputs are the name of the hook and the name
 * of the operation, as defined in.','params_docs' => '
 *
 * @return
 *   A nested array: The outermost array key must be the name of your module. The
 *   next key represents the name of the hook that triggers the events, but for
 *   custom and contributed modules, it actually must be the name of your module.
 *   The next key is the name of the operation within the hook. The array values
 *   at this level are arrays; currently, the only recognized key in that array
 *   is \'runs when\', whose array value gives a translated description of the
 *   hook.','signature' => 'hook_hook_info()','sample_code' => '  return array(
    \'comment\' => array(
      \'comment\' => array(
        \'insert\' => array(
          \'runs when\' => t(\'After saving a new comment\'),
        ),
        \'update\' => array(
          \'runs when\' => t(\'After saving an updated comment\'),
        ),
        \'delete\' => array(
          \'runs when\' => t(\'After deleting a comment\'),
        ),
        \'view\' => array(
          \'runs when\' => t(\'When a comment is being viewed by an authenticated user\'),
        ),
      ),
    ),
  );'),
  array('id' => '28','drupal_version' => '6','name' => 'hook_init','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_init/6','short_description' => 'Perform setup tasks. See also, hook_boot.','description' => 'Perform setup tasks. See also, hook_boot. This hook is run at the beginning of the page request. It is typically
used to set up global parameters which are needed later in the request.
when this hook is called, all modules are already loaded in memory. For example, this hook is a typical place for modules to add CSS or JS
that should be present on every page. This hook is not run on cached
pages - though CSS or JS added this way will be present on a cached page.','documentation' => '
 * Perform setup tasks. See also, hook_boot. This hook is run at the beginning of
 * the page request. It is typically used to set up global parameters which are
 * needed later in the request. when this hook is called, all modules are already
 * loaded in memory. For example, this hook is a typical place for modules to add
 * CSS or JS that should be present on every page. This hook is not run on cached
 * pages - though CSS or JS added this way will be present on a cached page.','params_docs' => '
 *
 * @return
 *   None.','signature' => 'hook_init()','sample_code' => '  drupal_add_css(drupal_get_path(\'module\', \'book\') . \'/book.css\');'),
  array('id' => '29','drupal_version' => '6','name' => 'hook_insert','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_insert/6','short_description' => 'Respond to node insertion.','description' => 'Respond to node insertion. This is a hook used by node modules. It is called to allow the module
to take action when a new node is being inserted in the database by,
for example, inserting information into related tables.','documentation' => '
 * Respond to node insertion. This is a hook used by node modules. It is called
 * to allow the module to take action when a new node is being inserted in the
 * database by, for example, inserting information into related tables.','params_docs' => '
 *
 * @param $node
 *   The node being inserted.
 *
 * @return
 *   None. To take action when nodes of any type are inserted (not just nodes of
 *   the type(s) defined by this module), use hook_nodeapi() instead. For a
 *   detailed usage example, see node_example.module.','signature' => 'hook_insert($node)','sample_code' => '  db_query("INSERT INTO {mytable} (nid, extra)
    VALUES (%d, \'%s\')", $node->nid, $node->extra);'),
  array('id' => '30','drupal_version' => '6','name' => 'hook_install','link' => 'http://api.drupal.org/api/drupal/developer!hooks!install.php/function/hook_install/6','short_description' => 'Install the current version of the database schema, and any other setup tasks.','description' => 'Install the current version of the database schema, and any other setup tasks. Implementations of this hook must be declared in the module\'s .install
file. The hook will only be called the first time a module is installed,
and the module\'s schema version will be set to the module\'s greatest
numbered update hook. Because of this, anytime a hook_update_N() is added
to the module, this function needs to be updated to reflect the current
version of the database schema. See the Schema API documentation at http://drupal.org/node/146843 for
details on hook_schema, where a database tables are defined. Note that functions declared in the module being installed are not yet
available. The implementation of hook_install() will need to explicitly load
the module before any declared functions may be invoked. Anything added or modified in this function that can be removed during
uninstall should be removed with hook_uninstall().','documentation' => '
 * Install the current version of the database schema, and any other setup tasks.
 * Implementations of this hook must be declared in the module\'s .install file.
 * The hook will only be called the first time a module is installed, and the
 * module\'s schema version will be set to the module\'s greatest numbered update
 * hook. Because of this, anytime a hook_update_N() is added to the module, this
 * function needs to be updated to reflect the current version of the database
 * schema. See the Schema API documentation at http://drupal.','params_docs' => '','signature' => 'hook_install()','sample_code' => '  drupal_install_schema(\'upload\');'),
  array('id' => '31','drupal_version' => '6','name' => 'hook_link','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_link/6','short_description' => 'Define internal Drupal links.','description' => 'Define internal Drupal links. This hook enables modules to add links to many parts of Drupal. Links
may be added in nodes or in the navigation block, for example. The returned array should be a keyed array of link entries. Each link can
be in one of two formats. The first format will use the l() function to render the link: attributes: Optional. See l() for usage.
fragment: Optional. See l() for usage.
href: Required. The URL of the link.
html: Optional. See l() for usage.
query: Optional. See l() for usage.
title: Required. The name of the link. The second format can be used for non-links. Leaving out the href index will
select this format: title: Required. The text or HTML code to display.
attributes: Optional. An associative array of HTML attributes to apply to the span tag.
html: Optional. If not set to true, check_plain() will be run on the title before it is displayed.','documentation' => '
 * Define internal Drupal links. This hook enables modules to add links to many
 * parts of Drupal. Links may be added in nodes or in the navigation block, for
 * example. The returned array should be a keyed array of link entries. Each link
 * can be in one of two formats. The first format will use the l() function to
 * render the link: attributes: Optional. See l() for usage. fragment: Optional.
 * See l() for usage. href: Required. The URL of the link. html: Optional. See
 * l() for usage. query: Optional. See l() for usage. title: Required. The name
 * of the link.','params_docs' => '
 *
 * @param $type
 *   An identifier declaring what kind of link is being requested. Possible
 *   values: comment: Links to be placed below a comment being viewed. node:
 *   Links to be placed below a node being viewed.
 * @param $object
 *   A node object or a comment object according to the $type.
 * @param $teaser
 *   In case of node link: a 0/1 flag depending on whether the node is displayed
 *   with its teaser or its full form.
 *
 * @return
 *   An array of the requested links.','signature' => 'hook_link($type, $object, $teaser = FALSE)','sample_code' => '  $links = array();

  if ($type == \'node\' && isset($object->parent)) {
    if (!$teaser) {
      if (book_access(\'create\', $object)) {
        $links[\'book_add_child\'] = array(
          \'title\' => t(\'add child page\'),
          \'href\' => "node/add/book/parent/$object->nid",
        );
      }
      if (user_access(\'see printer-friendly version\')) {
        $links[\'book_printer\'] = array(
          \'title\' => t(\'printer-friendly version\'),
          \'href\' => \'book/export/html/\' . $object->nid,
          \'attributes\' => array(\'title\' => t(\'Show a printer-friendly version of this book page and its sub-pages.\')),
        );
      }
    }
  }

  $links[\'sample_link\'] = array(
    \'title\' => t(\'go somewhere\'),
    \'href\' => \'node/add\',
    \'query\' => \'foo=bar\',
    \'fragment\' => \'anchorname\',
    \'attributes\' => array(\'title\' => t(\'go to another page\')),
  );

  // Example of a link that\'s not an anchor
  if ($type == \'video\') {
    if (variable_get(\'video_playcounter\', 1) && user_access(\'view play counter\')) {
      $links[\'play_counter\'] = array(
        \'title\' => format_plural($object->play_counter, \'1 play\', \'@count plays\'),
      );
    }
  }

  return $links;'),
  array('id' => '32','drupal_version' => '6','name' => 'hook_link_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_link_alter/6','short_description' => 'Perform alterations before links on a node or comment are rendered.','description' => 'Perform alterations before links on a node or comment are rendered. One popular use of this hook is to modify/remove links from other modules.
If you want to add a link to the links section of a node or comment, use
hook_link() instead.','documentation' => '
 * Perform alterations before links on a node or comment are rendered. One
 * popular use of this hook is to modify/remove links from other modules. If you
 * want to add a link to the links section of a node or comment, use hook_link()
 * instead.','params_docs' => '
 *
 * @param $links
 *   Nested array of links for the node or comment keyed by providing module.
 * @param $node
 *   A node object.
 * @param $comment
 *   An optional comment object if the links are comment links. If not provided,
 *   the links are node links.','signature' => 'hook_link_alter(&$links, $node, $comment = NULL)','sample_code' => '  foreach ($links as $module => $link) {
    if (strstr($module, \'taxonomy_term\')) {
      // Link back to the forum and not the taxonomy term page
      $links[$module][\'href\'] = str_replace(\'taxonomy/term\', \'forum\', $link[\'href\']);
    }
  }'),
  array('id' => '33','drupal_version' => '6','name' => 'hook_load','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_load/6','short_description' => 'Load node-type-specific information.','description' => 'Load node-type-specific information. This is a hook used by node modules. It is called to allow the module
a chance to load extra information that it stores about a node, or
possibly replace already loaded information - which can be dangerous.','documentation' => '
 * Load node-type-specific information. This is a hook used by node modules. It
 * is called to allow the module a chance to load extra information that it
 * stores about a node, or possibly replace already loaded information - which
 * can be dangerous.','params_docs' => '
 *
 * @param $node
 *   The node being loaded. At call time,.
 *
 * @return
 *   An object containing properties of the node being loaded. This will be
 *   merged with the passed-in $node to result in an object containing a set of
 *   properties resulting from adding the extra properties to the passed-in ones,
 *   and overwriting the passed-in ones with the extra properties if they have
 *   the same name as passed-in properties. For a detailed usage example, see
 *   node_example.module.','signature' => 'hook_load($node)','sample_code' => '  $additions = db_fetch_object(db_query(\'SELECT * FROM {mytable} WHERE vid = %d\', $node->vid));
  return $additions;'),
  array('id' => '34','drupal_version' => '6','name' => 'hook_locale','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_locale/6','short_description' => 'Allows modules to define their own text groups that can be translated.','description' => 'Allows modules to define their own text groups that can be translated.','documentation' => '
 * Allows modules to define their own text groups that can be translated.','params_docs' => '
 *
 * @param $op
 *   Type of operation. Currently, only supports \'groups\'.','signature' => 'hook_locale($op = \'groups\')','sample_code' => '  switch ($op) {
    case \'groups\':
      return array(\'custom\' => t(\'Custom\'));
  }'),
  array('id' => '35','drupal_version' => '6','name' => 'hook_mail','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_mail/6','short_description' => 'Prepare a message based on parameters; called from drupal_mail().','description' => 'Prepare a message based on parameters; called from drupal_mail().','documentation' => '
 * Prepare a message based on parameters; called from drupal_mail().','params_docs' => '
 *
 * @param $key
 *   An identifier of the mail.
 * @param $message
 *   An array to be filled in. Keys in this array include: \'id\': An id to
 *   identify the mail sent. Look at module source code or drupal_mail() for
 *   possible id values. \'to\': The address or addresses the message will be sent
 *   to. The formatting of this string must comply with RFC 2822. \'subject\':
 *   Subject of the e-mail to be sent. This must not contain any newline
 *   characters, or the mail may not be sent properly. drupal_mail() sets this to
 *   an empty string when the hook is invoked. \'body\': An array of lines
 *   containing the message to be sent. Drupal will format the correct line
 *   endings for you. drupal_mail() sets this to an empty array when the hook is
 *   invoked. \'from\': The address the message will be marked as being from, which
 *   is set by drupal_mail() to either a custom address or the site-wide.
 * @param $params
 *   An arbitrary array of parameters set by the caller to drupal_mail.','signature' => 'hook_mail($key, &$message, $params)','sample_code' => '  $account = $params[\'account\'];
  $context = $params[\'context\'];
  $variables = array(
    \'%site_name\' => variable_get(\'site_name\', \'Drupal\'),
    \'%username\' => $account->name,
  );
  if ($context[\'hook\'] == \'taxonomy\') {
    $object = $params[\'object\'];
    $vocabulary = taxonomy_vocabulary_load($object->vid);
    $variables += array(
      \'%term_name\' => $object->name,
      \'%term_description\' => $object->description,
      \'%term_id\' => $object->tid,
      \'%vocabulary_name\' => $vocabulary->name,
      \'%vocabulary_description\' => $vocabulary->description,
      \'%vocabulary_id\' => $vocabulary->vid,
    );
  }

  // Node-based variable translation is only available if we have a node.
  if (isset($params[\'node\'])) {
    $node = $params[\'node\'];
    $variables += array(
      \'%uid\' => $node->uid,
      \'%node_url\' => url(\'node/\' . $node->nid, array(\'absolute\' => TRUE)),
      \'%node_type\' => node_get_types(\'name\', $node),
      \'%title\' => $node->title,
      \'%teaser\' => $node->teaser,
      \'%body\' => $node->body,
    );
  }
  $subject = strtr($context[\'subject\'], $variables);
  $body = strtr($context[\'message\'], $variables);
  $message[\'subject\'] .= str_replace(array("\\r", "\\n"), \'\', $subject);
  $message[\'body\'][] = drupal_html_to_text($body);'),
  array('id' => '36','drupal_version' => '6','name' => 'hook_mail_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_mail_alter/6','short_description' => 'Alter any aspect of email sent by Drupal. You can use this hook to add a common site footer to all outgoing email, add extra header fields, and/or modify the email in any way. HTML-izing the outgoing email is one possibility. See also drupal_mail().','description' => 'Alter any aspect of email sent by Drupal. You can use this hook to add a
common site footer to all outgoing email, add extra header fields, and/or
modify the email in any way. HTML-izing the outgoing email is one possibility.
See also drupal_mail().','documentation' => '
 * Alter any aspect of email sent by Drupal. You can use this hook to add a
 * common site footer to all outgoing email, add extra header fields, and/or
 * modify the email in any way. HTML-izing the outgoing email is one possibility.
 * See also drupal_mail().','params_docs' => '
 *
 * @param $message
 *   A structured array containing the message to be altered. Keys in this array
 *   include: \'id\' An id to identify the mail sent. Look at module source code or
 *   drupal_mail() for possible id values. \'to\' The mail address or addresses the
 *   message will be sent to. The formatting of this string must comply with RFC
 *   2822. \'subject\' Subject of the e-mail to be sent. This must not contain any
 *   newline characters, or the mail may not be sent properly. \'body\' An array of
 *   lines containing the message to be sent. Drupal will format the correct line
 *   endings for you. \'from\' The address the message will be marked as being
 *   from, which is either a custom address or the site-wide default email
 *   address. \'headers\' Associative array containing mail headers, such as From,
 *   Sender, MIME-Version, Content-Type, etc.','signature' => 'hook_mail_alter(&$message)','sample_code' => '  if ($message[\'id\'] == \'modulename_messagekey\') {
    $message[\'body\'][] = "--\\nMail sent out from " . variable_get(\'sitename\', t(\'Drupal\'));
  }'),
  array('id' => '37','drupal_version' => '6','name' => 'hook_menu','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_menu/6','short_description' => 'Define menu items and page callbacks.','description' => 'Define menu items and page callbacks. This hook enables modules to register paths in order to define how URL
requests are handled. Paths may be registered for URL handling only, or they
can register a link to be placed in a menu (usually the Navigation menu). A
path and its associated information is commonly called a "menu router item".
This hook is rarely called (for example, when modules are enabled), and
its results are cached in the database. hook_menu() implementations return an associative array whose keys define
paths and whose values are an associative array of properties for each
path. (The complete list of properties is in the return value section below.) The definition for each path may include a page callback function, which is
invoked when the registered path is requested. If there is no other
registered path that fits the requested path better, any further path
components are passed to the callback function. For example, your module
could register path \'abc/def\': function mymodule_menu() {
    $items[\'abc/def\'] = array(
      \'page callback\' => \'mymodule_abc_view\',
    );
    return $items;
  }

  function mymodule_abc_view($ghi = 0, $jkl = \'\') {
    // ...
  } When path \'abc/def\' is requested, no further path components are in the
request, and no additional arguments are passed to the callback function (so
$ghi and $jkl would take the default values as defined in the function
signature). When \'abc/def/123/foo\' is requested, $ghi will be \'123\' and
$jkl will be \'foo\'. Note that this automatic passing of optional path
arguments applies only to page and theme callback functions. In addition to optional path arguments, the page callback and other callback
functions may specify argument lists as arrays. These argument lists may
contain both fixed/hard-coded argument values and integers that correspond
to path components. When integers are used and the callback function is
called, the corresponding path components will be substituted for the
integers. That is, the integer 0 in an argument list will be replaced with
the first path component, integer 1 with the second, and so on (path
components are numbered starting from zero). To pass an integer without it
being replaced with its respective path component, use the string value of
the integer (e.g., \'1\') as the argument value. This substitution feature
allows you to re-use a callback function for several different paths. For
example: function mymodule_menu() {
    $items[\'abc/def\'] = array(
      \'page callback\' => \'mymodule_abc_view\',
      \'page arguments\' => array(1, \'foo\'),
    );
    return $items;
  } When path \'abc/def\' is requested, the page callback function will get \'def\'
as the first argument and (always) \'foo\' as the second argument. If a page callback function uses an argument list array, and its path is
requested with optional path arguments, then the list array\'s arguments are
passed to the callback function first, followed by the optional path
arguments. Using the above example, when path \'abc/def/bar/baz\' is requested,
mymodule_abc_view() will be called with \'def\', \'foo\', \'bar\' and \'baz\' as
arguments, in that order. Wildcards within paths also work with integer substitution. For example,
your module could register path \'my-module/%/edit\': $items[\'my-module/%/edit\'] = array(
    \'page callback\' => \'mymodule_abc_edit\',
    \'page arguments\' => array(1),
  ); When path \'my-module/foo/edit\' is requested, integer 1 will be replaced
with \'foo\' and passed to the callback function. Registered paths may also contain special "auto-loader" wildcard components
in the form of \'%mymodule_abc\', where the \'%\' part means that this path
component is a wildcard, and the \'mymodule_abc\' part defines the prefix for a
load function, which here would be named mymodule_abc_load(). When a matching
path is requested, your load function will receive as its first argument the
path component in the position of the wildcard; load functions may also be
passed additional arguments (see "load arguments" in the return value
section below). For example, your module could register path
\'my-module/%mymodule_abc/edit\': $items[\'my-module/%mymodule_abc/edit\'] = array(
    \'page callback\' => \'mymodule_abc_edit\',
    \'page arguments\' => array(1),
  ); When path \'my-module/123/edit\' is requested, your load function
mymodule_abc_load() will be invoked with the argument \'123\', and should
load and return an "abc" object with internal id 123: function mymodule_abc_load($abc_id) {
    return db_query("SELECT * FROM {mymodule_abc} WHERE abc_id = :abc_id", array(\':abc_id\' => $abc_id))->fetchObject();
  } This \'abc\' object will then be passed into the callback functions defined
for the menu item, such as the page callback function mymodule_abc_edit()
to replace the integer 1 in the argument array. Note that a load function
should return FALSE when it is unable to provide a loadable object. For
example, the node_load() function for the \'node/%node/edit\' menu item will
return FALSE for the path \'node/999/edit\' if a node with a node ID of 999
does not exist. The menu routing system will return a 404 error in this case. You can also make groups of menu items to be rendered (by default) as tabs
on a page. To do that, first create one menu item of type MENU_NORMAL_ITEM,
with your chosen path, such as \'foo\'. Then duplicate that menu item, using a
subdirectory path, such as \'foo/tab1\', and changing the type to
MENU_DEFAULT_LOCAL_TASK to make it the default tab for the group. Then add
the additional tab items, with paths such as "foo/tab2" etc., with type
MENU_LOCAL_TASK. Example: // Make "Foo settings" appear on the admin Config page
$items[\'admin/config/foo\'] = array(
  \'title\' => \'Foo settings\',
  \'type\' => MENU_NORMAL_ITEM,
  // Page callback, etc. need to be added here.
);
// Make "Global settings" the main tab on the "Foo settings" page
$items[\'admin/config/foo/global\'] = array(
  \'title\' => \'Global settings\',
  \'type\' => MENU_DEFAULT_LOCAL_TASK,
  // Access callback, page callback, and theme callback will be inherited
  // from \'admin/config/foo\', if not specified here to override.
);
// Make an additional tab called "Node settings" on "Foo settings"
$items[\'admin/config/foo/node\'] = array(
  \'title\' => \'Node settings\',
  \'type\' => MENU_LOCAL_TASK,
  // Page callback and theme callback will be inherited from
  // \'admin/config/foo\', if not specified here to override.
  // Need to add access callback or access arguments.
);','documentation' => '
 * Define menu items and page callbacks. This hook enables modules to register
 * paths in order to define how URL requests are handled. Paths may be registered
 * for URL handling only, or they can register a link to be placed in a menu
 * (usually the Navigation menu). A path and its associated information is
 * commonly called a "menu router item". This hook is rarely called (for example,
 * when modules are enabled), and its results are cached in the database.
 * hook_menu() implementations return an associative array whose keys define
 * paths and whose values are an.','params_docs' => '
 *
 * @return
 *   An array of menu items. Each menu item has a key corresponding to the Drupal
 *   path being registered. The corresponding array value is an associative array
 *   that may contain the following key-value pairs: "title": Required. The
 *   untranslated title of the menu item. "title callback": Function to generate
 *   the title; defaults to t(). If you require only the raw string to be output,
 *   set this to FALSE. "title arguments": Arguments to send to t() or your
 *   custom callback, with path component substitution as described above.','signature' => 'hook_menu()','sample_code' => '  $items = array();

  $items[\'example\'] = array(
    \'title\' => \'Example Page\',
    \'page callback\' => \'example_page\',
    \'access arguments\' => array(\'access content\'),
    \'type\' => MENU_SUGGESTED_ITEM,
  );
  $items[\'example/feed\'] = array(
    \'title\' => \'Example RSS feed\',
    \'page callback\' => \'example_feed\',
    \'access arguments\' => array(\'access content\'),
    \'type\' => MENU_CALLBACK,
  );

  return $items;'),
  array('id' => '38','drupal_version' => '6','name' => 'hook_menu_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_menu_alter/6','short_description' => 'Alter the data being saved to the {menu_router} table after hook_menu is invoked.','description' => 'Alter the data being saved to the {menu_router} table after hook_menu is invoked. This hook is invoked by menu_router_build(). The menu definitions are passed
in by reference.  Each element of the $items array is one item returned
by a module from hook_menu.  Additional items may be added, or existing items
altered.','documentation' => '
 * Alter the data being saved to the {menu_router} table after hook_menu is
 * invoked. This hook is invoked by menu_router_build(). The menu definitions are
 * passed in by reference. Each element of the $items array is one item returned
 * by a module from hook_menu. Additional items may be added, or existing items
 * altered.','params_docs' => '
 *
 * @param $items
 *   Associative array of menu router definitions returned from.
 *
 * @return
 *   None.','signature' => 'hook_menu_alter(&$items)','sample_code' => '  // Example - disable the page at node/add
  $items[\'node/add\'][\'access callback\'] = FALSE;'),
  array('id' => '39','drupal_version' => '6','name' => 'hook_menu_link_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_menu_link_alter/6','short_description' => 'Alter the data being saved to the {menu_links} table by menu_link_save().','description' => 'Alter the data being saved to the {menu_links} table by menu_link_save().','documentation' => '
 * Alter the data being saved to the {menu_links} table by menu_link_save().','params_docs' => '
 *
 * @param $item
 *   Associative array defining a menu link as passed into.
 * @param $menu
 *   Associative array containg the menu router returned from.
 *
 * @return
 *   None.','signature' => 'hook_menu_link_alter(&$item, $menu)','sample_code' => '  // Example 1 - make all new admin links hidden (a.k.a disabled).
  if (strpos($item[\'link_path\'], \'admin\') === 0 && empty($item[\'mlid\'])) {
    $item[\'hidden\'] = 1;
  }
  // Example 2  - flag a link to be altered by hook_translated_menu_link_alter()
  if ($item[\'link_path\'] == \'devel/cache/clear\') {
    $item[\'options\'][\'alter\'] = TRUE;
  }'),
  array('id' => '40','drupal_version' => '6','name' => 'hook_nodeapi','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_nodeapi/6','short_description' => 'Act on nodes defined by other modules.','description' => 'Act on nodes defined by other modules. Despite what its name might make you think, hook_nodeapi() is not
reserved for node modules. On the contrary, it allows modules to react
to actions affecting all kinds of nodes, regardless of whether that
module defined the node. It is common to find hook_nodeapi() used in conjunction with
hook_form_alter(). Modules use hook_form_alter() to place additional form
elements onto the node edit form, and hook_nodeapi() is used to read and
write those values to and from the database.','documentation' => '
 * Act on nodes defined by other modules. Despite what its name might make you
 * think, hook_nodeapi() is not reserved for node modules. On the contrary, it
 * allows modules to react to actions affecting all kinds of nodes, regardless of
 * whether that module defined the node. It is common to find hook_nodeapi() used
 * in conjunction with hook_form_alter(). Modules use hook_form_alter() to place
 * additional form elements onto the node edit form, and hook_nodeapi() is used
 * to read and write those values to and from the database.','params_docs' => '
 *
 * @param &$node
 *   The node the action is being performed on.
 * @param $op
 *   What kind of action is being performed. Possible values: "alter": the
 *   $node->content array has been rendered, so the node body or teaser is
 *   filtered and now contains HTML. This op should only be used when text
 *   substitution, filtering, or other raw text operations are necessary.
 *   "delete": The node is being deleted. "delete revision": The revision of the
 *   node is deleted. You can delete data associated with that revision.
 *   "insert": The node has just been created (inserted in the database). "load":
 *   The node is about to be loaded from the database. This hook can be used to
 *   load additional data at this time. "prepare": The node is about to be shown
 *   on the add/edit form. "prepare translation": The node is being cloned for
 *   translation.
 * @param $a3
 *   : For "view" and "alter", passes in the $teaser parameter from node_view().
 *   For "validate", passes in the $form parameter from node_validate().
 * @param $a4
 *   : For "view" and "alter", passes in the $page parameter from node_view().
 *
 * @return
 *   This varies depending on the operation. The "presave", "insert", "update",
 *   "delete", "print" and "view" operations have no return value. The "load"
 *   operation should return an array containing pairs of fields => values to be
 *   merged into the node object. If you are writing a node module, do not use
 *   this hook to perform actions on your type of node alone. Instead, use the
 *   hooks set aside for node modules, such as hook_insert() and hook_form().
 *   That said, for some operations, such as "delete revision" or "rss item"
 *   there is no corresponding hook so even.','signature' => 'hook_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL)','sample_code' => '  switch ($op) {
    case \'presave\':
      if ($node->nid && $node->moderate) {
        // Reset votes when node is updated:
        $node->score = 0;
        $node->users = \'\';
        $node->votes = 0;
      }
      break;
    case \'insert\':
    case \'update\':
      if ($node->moderate && user_access(\'access submission queue\')) {
        drupal_set_message(t(\'The post is queued for approval\'));
      }
      elseif ($node->moderate) {
        drupal_set_message(t(\'The post is queued for approval. The editors will decide whether it should be published.\'));
      }
      break;
    case \'view\':
      $node->content[\'my_additional_field\'] = array(
        \'#value\' => theme(\'mymodule_my_additional_field\', $additional_field),
        \'#weight\' => 10,
      );
      break;
  }'),
  array('id' => '41','drupal_version' => '6','name' => 'hook_node_access_records','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_node_access_records/6','short_description' => 'Set permissions for a node to be written to the database.','description' => 'Set permissions for a node to be written to the database. When a node is saved, a module implementing hook_node_access_records() will
be asked if it is interested in the access permissions for a node. If it is
interested, it must respond with an array of permissions arrays for that
node. Each permissions item in the array is an array with the following elements: \'realm\': The name of a realm that the module has defined in
hook_node_grants().
\'gid\': A \'grant ID\' from hook_node_grants().
\'grant_view\': If set to TRUE a user that has been identified as a member
of this gid within this realm can view this node.
\'grant_update\': If set to TRUE a user that has been identified as a member
of this gid within this realm can edit this node.
\'grant_delete\': If set to TRUE a user that has been identified as a member
of this gid within this realm can delete this node.
\'priority\': If multiple modules seek to set permissions on a node, the
realms that have the highest priority will win out, and realms with a lower
priority will not be written. If there is any doubt, it is best to
leave this 0.','documentation' => '
 * Set permissions for a node to be written to the database. When a node is
 * saved, a module implementing hook_node_access_records() will be asked if it is
 * interested in the access permissions for a node. If it is interested, it must
 * respond with an array of permissions arrays for that node. Each permissions
 * item in the array is an array with the following elements: \'realm\': The name
 * of a realm that the module has defined in hook_node_grants(). \'gid\': A \'grant
 * ID\' from hook_node_grants().','params_docs' => '','signature' => 'hook_node_access_records($node)','sample_code' => '  if (node_access_example_disabling()) {
    return;
  }

  // We only care about the node if it\'s been marked private. If not, it is
  // treated just like any other node and we completely ignore it.
  if ($node->private) {
    $grants = array();
    $grants[] = array(
      \'realm\' => \'example\',
      \'gid\' => 1,
      \'grant_view\' => TRUE,
      \'grant_update\' => FALSE,
      \'grant_delete\' => FALSE,
      \'priority\' => 0,
    );

    // For the example_author array, the GID is equivalent to a UID, which
    // means there are many many groups of just 1 user.
    $grants[] = array(
      \'realm\' => \'example_author\',
      \'gid\' => $node->uid,
      \'grant_view\' => TRUE,
      \'grant_update\' => TRUE,
      \'grant_delete\' => TRUE,
      \'priority\' => 0,
    );
    return $grants;
  }'),
  array('id' => '42','drupal_version' => '6','name' => 'hook_node_grants','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_node_grants/6','short_description' => 'Inform the node access system what permissions the user has.','description' => 'Inform the node access system what permissions the user has. This hook is for implementation by node access modules. In this hook,
the module grants a user different "grant IDs" within one or more
"realms". In hook_node_access_records(), the realms and grant IDs are
associated with permission to view, edit, and delete individual nodes. The realms and grant IDs can be arbitrarily defined by your node access
module; it is common to use role IDs as grant IDs, but that is not
required. Your module could instead maintain its own list of users, where
each list has an ID. In that case, the return value of this hook would be
an array of the list IDs that this user is a member of. A node access module may implement as many realms as necessary to
properly define the access privileges for the nodes.','documentation' => '
 * Inform the node access system what permissions the user has. This hook is for
 * implementation by node access modules. In this hook, the module grants a user
 * different "grant IDs" within one or more "realms". In
 * hook_node_access_records(), the realms and grant IDs are associated with
 * permission to view, edit, and delete individual nodes. The realms and grant
 * IDs can be arbitrarily defined by your node access module; it is common to use
 * role IDs as grant IDs, but that is not required.','params_docs' => '
 *
 * @param $account
 *   The user object whose grants are requested.
 * @param $op
 *   The node operation to be performed, such as "view", "update", or "delete".
 *
 * @return
 *   An array whose keys are "realms" of grants, and whose values are arrays of
 *   the grant IDs within this realm that this user is being granted. For a
 *   detailed example, see node_access_example.module.','signature' => 'hook_node_grants($account, $op)','sample_code' => '  if (user_access(\'access private content\', $account)) {
    $grants[\'example\'] = array(1);
  }
  $grants[\'example_owner\'] = array($account->uid);
  return $grants;'),
  array('id' => '43','drupal_version' => '6','name' => 'hook_node_info','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_node_info/6','short_description' => 'Define module-provided node types.','description' => 'Define module-provided node types. This is a hook used by node modules. This hook is required for modules to
define one or more node types. It is called to determine the names and the
attributes of a module\'s node types. Only module-provided node types should be defined through this hook. User-
provided (or \'custom\') node types should be defined only in the \'node_type\'
database table, and should be maintained by using the node_type_save() and
node_type_delete() functions.','documentation' => '
 * Define module-provided node types. This is a hook used by node modules. This
 * hook is required for modules to define one or more node types. It is called to
 * determine the names and the attributes of a module\'s node types. Only
 * module-provided node types should be defined through this hook. User- provided
 * (or \'custom\') node types should be defined only in the \'node_type\' database
 * table, and should be maintained by using the node_type_save() and
 * node_type_delete() functions.','params_docs' => '
 *
 * @return
 *   An array of information on the module\'s node types. The array contains a
 *   sub-array for each node type, with the machine-readable type name as the
 *   key. Each sub-array has up to 10 attributes. Possible attributes: "name":
 *   the human-readable name of the node type. Required. "module": a string
 *   telling Drupal how a module\'s functions map to hooks (i.e. if module is
 *   defined as example_foo, then example_foo_insert will be called when
 *   inserting a node of that type). This string is usually the name of the
 *   module in question, but not always. Required.','signature' => 'hook_node_info()','sample_code' => '  return array(
    \'book\' => array(
      \'name\' => t(\'book page\'),
      \'module\' => \'book\',
      \'description\' => t("A book is a collaborative writing effort: users can collaborate writing the pages of the book, positioning the pages in the right order, and reviewing or modifying pages previously written. So when you have some information to share or when you read a page of the book and you didn\'t like it, or if you think a certain page could have been written better, you can do something about it."),
    ),
  );'),
  array('id' => '44','drupal_version' => '6','name' => 'hook_node_operations','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_node_operations/6','short_description' => 'Add mass node operations.','description' => 'Add mass node operations. This hook enables modules to inject custom operations into the mass operations
dropdown found at admin/content/node, by associating a callback function with
the operation, which is called when the form is submitted. The callback function
receives one initial argument, which is an array of the checked nodes.','documentation' => '
 * Add mass node operations. This hook enables modules to inject custom
 * operations into the mass operations dropdown found at admin/content/node, by
 * associating a callback function with the operation, which is called when the
 * form is submitted. The callback function receives one initial argument, which
 * is an array of the checked nodes.','params_docs' => '
 *
 * @return
 *   An array of operations. Each operation is an associative array that may
 *   contain the following key-value pairs: "label": Required. The label for the
 *   operation, displayed in the dropdown menu. "callback": Required. The
 *   function to call for the operation. "callback arguments": Optional. An array
 *   of additional arguments to pass to the callback function.','signature' => 'hook_node_operations()','sample_code' => '  $operations = array(
    \'approve\' => array(
      \'label\' => t(\'Approve the selected posts\'),
      \'callback\' => \'node_operations_approve\',
    ),
    \'promote\' => array(
      \'label\' => t(\'Promote the selected posts\'),
      \'callback\' => \'node_operations_promote\',
    ),
    \'sticky\' => array(
      \'label\' => t(\'Make the selected posts sticky\'),
      \'callback\' => \'node_operations_sticky\',
    ),
    \'demote\' => array(
      \'label\' => t(\'Demote the selected posts\'),
      \'callback\' => \'node_operations_demote\',
    ),
    \'unpublish\' => array(
      \'label\' => t(\'Unpublish the selected posts\'),
      \'callback\' => \'node_operations_unpublish\',
    ),
    \'delete\' => array(
      \'label\' => t(\'Delete the selected posts\'),
    ),
  );
  return $operations;'),
  array('id' => '45','drupal_version' => '6','name' => 'hook_node_type','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_node_type/6','short_description' => 'Act on node type changes.','description' => 'Act on node type changes. This hook allows modules to take action when a node type is modified.','documentation' => '
 * Act on node type changes. This hook allows modules to take action when a node
 * type is modified.','params_docs' => '
 *
 * @param $op
 *   What is being done to $info. Possible values: "delete" "insert" "update".
 * @param $info
 *   The node type object on which $op is being performed.','signature' => 'hook_node_type($op, $info)','sample_code' => '  switch ($op) {
    case \'delete\':
      // Example from comment.module.
      variable_del(\'comment_\' . $info->type);
      break;
    case \'update\':
      // Here is an example where you do need an update operation (from the
      // book module), because the simple default case doesn\'t cover what needs
      // to be done.
      if (!empty($info->old_type) && $info->old_type != $info->type) {
        // Update the list of node types that are allowed to be added to books.
        $allowed_types = variable_get(\'book_allowed_types\', array(\'book\'));
        $key = array_search($info->old_type, $allowed_types);
        if ($key !== FALSE) {
          $allowed_types[$info->type] = $allowed_types[$key] ? $info->type : 0;
          unset($allowed_types[$key]);
          variable_set(\'book_allowed_types\', $allowed_types);
        }
        // Update the setting for the "Add child page" link.
        if (variable_get(\'book_child_type\', \'book\') == $info->old_type) {
          variable_set(\'book_child_type\', $info->type);
        }
      }
      break;
  }'),
  array('id' => '46','drupal_version' => '6','name' => 'hook_openid','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_openid/6','short_description' => 'Allow modules to modify the OpenID request parameters.','description' => 'Allow modules to modify the OpenID request parameters.','documentation' => '
 * Allow modules to modify the OpenID request parameters.','params_docs' => '
 *
 * @param $op
 *   The operation to be performed. Possible values: request: Modify parameters
 *   before they are sent to the OpenID provider.
 * @param $request
 *   An associative array of parameter defaults to which to modify or append.
 *
 * @return
 *   An associative array of parameters to be merged with the default list.','signature' => 'hook_openid($op, $request)','sample_code' => '  if ($op == \'request\') {
    $request[\'openid.identity\'] = \'http://myname.myopenid.com/\';
  }
  return $request;'),
  array('id' => '47','drupal_version' => '6','name' => 'hook_perm','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_perm/6','short_description' => 'Define user permissions.','description' => 'Define user permissions. This hook can supply permissions that the module defines, so that they
can be selected on the user permissions page and used to grant or restrict
access to actions the module performs. Permissions are checked using user_access(). For a detailed usage example, see page_example.module.','documentation' => '
 * Define user permissions. This hook can supply permissions that the module
 * defines, so that they can be selected on the user permissions page and used to
 * grant or restrict access to actions the module performs. Permissions are
 * checked using user_access(). For a detailed usage example, see
 * page_example.module.','params_docs' => '
 *
 * @return
 *   An array of permission strings. The strings must not be wrapped with the t()
 *   function, since the string extractor takes care of extracting permission
 *   names defined in the perm hook for translation.','signature' => 'hook_perm()','sample_code' => '  return array(\'administer my module\');'),
  array('id' => '48','drupal_version' => '6','name' => 'hook_ping','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_ping/6','short_description' => 'Ping another server.','description' => 'Ping another server. This hook allows a module to notify other sites of updates on your
Drupal site.','documentation' => '
 * Ping another server. This hook allows a module to notify other sites of
 * updates on your Drupal site.','params_docs' => '
 *
 * @param $name
 *   The name of your Drupal site.
 * @param $url
 *   The URL of your Drupal site.
 *
 * @return
 *   None.','signature' => 'hook_ping($name = \'\', $url = \'\')','sample_code' => '  $feed = url(\'node/feed\');

  $client = new xmlrpc_client(\'/RPC2\', \'rpc.weblogs.com\', 80);

  $message = new xmlrpcmsg(\'weblogUpdates.ping\',
    array(new xmlrpcval($name), new xmlrpcval($url)));

  $result = $client->send($message);

  if (!$result || $result->faultCode()) {
    watchdog(\'error\', \'failed to notify "weblogs.com" (site)\');
  }

  unset($client);'),
  array('id' => '49','drupal_version' => '6','name' => 'hook_prepare','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_prepare/6','short_description' => 'This is a hook used by node modules. It is called after load but before the node is shown on the add/edit form.','description' => 'This is a hook used by node modules. It is called after load but before the
node is shown on the add/edit form.','documentation' => '
 * This is a hook used by node modules. It is called after load but before the
 * node is shown on the add/edit form.','params_docs' => '
 *
 * @param &$node
 *   The node being saved.
 *
 * @return
 *   None. For a usage example, see image.module.','signature' => 'hook_prepare(&$node)','sample_code' => '  if ($file = file_check_upload($field_name)) {
    $file = file_save_upload($field_name, _image_filename($file->filename, NULL, TRUE));
    if ($file) {
      if (!image_get_info($file->filepath)) {
        form_set_error($field_name, t(\'Uploaded file is not a valid image\'));
        return;
      }
    }
    else {
      return;
    }
    $node->images[\'_original\'] = $file->filepath;
    _image_build_derivatives($node, true);
    $node->new_file = TRUE;
  }'),
  array('id' => '50','drupal_version' => '6','name' => 'hook_preprocess','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_preprocess/6','short_description' => 'Preprocess theme variables for template files.','description' => 'Preprocess theme variables for template files. This hook allows modules to preprocess theme variables for theme templates.
It is only called for theme hooks implemented as template files, but
not for those implemented as theme functions. The purpose of this hook is
to allow modules to add to or override variables for all template files. For more detailed information, see theme().','documentation' => '
 * Preprocess theme variables for template files. This hook allows modules to
 * preprocess theme variables for theme templates. It is only called for theme
 * hooks implemented as template files, but not for those implemented as theme
 * functions. The purpose of this hook is to allow modules to add to or override
 * variables for all template files. For more detailed information, see theme().','params_docs' => '
 *
 * @param $variables
 *   The variables array (modify in place).
 * @param $hook
 *   The name of the theme hook.','signature' => 'hook_preprocess(&$variables, $hook)','sample_code' => '  // Add the name of the current theme hook as a variable
  $variables[\'theme_hook\'] = $hook;'),
  array('id' => '51','drupal_version' => '6','name' => 'hook_preprocess_HOOK','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_preprocess_HOOK/6','short_description' => 'Preprocess theme variables for a specific theme hook.','description' => 'Preprocess theme variables for a specific theme hook. This hook allows modules to preprocess theme variables for a specific theme
hook. It should only be used if a module needs to override or add to the
theme preprocessing for a theme hook it didn\'t define. Note that, as all preprocess hooks, this hook is only invoked for theme hooks
implemented as template files, but not those implemented as theme functions. For more detailed information, see theme().','documentation' => '
 * Preprocess theme variables for a specific theme hook. This hook allows modules
 * to preprocess theme variables for a specific theme hook. It should only be
 * used if a module needs to override or add to the theme preprocessing for a
 * theme hook it didn\'t define. Note that, as all preprocess hooks, this hook is
 * only invoked for theme hooks implemented as template files, but not those
 * implemented as theme functions. For more detailed information, see theme().','params_docs' => '
 *
 * @param $variables
 *   The variables array (modify in place).','signature' => 'hook_preprocess_HOOK(&$variables)','sample_code' => '  $variables[\'drupal_major_version\'] = \'6.x\';'),
  array('id' => '52','drupal_version' => '6','name' => 'hook_profile_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_profile_alter/6','short_description' => 'Alter profile items before they are rendered.','description' => 'Alter profile items before they are rendered. You may omit/add/re-sort/re-categorize, etc.','documentation' => '
 * Alter profile items before they are rendered. You may
 * omit/add/re-sort/re-categorize, etc.','params_docs' => '
 *
 * @param $account
 *   A user object whose profile is being rendered. Profile items are stored in
 *   $account->content.','signature' => 'hook_profile_alter(&$account)','sample_code' => '  foreach ($account->content as $key => $field) {
    // do something
  }'),
  array('id' => '53','drupal_version' => '6','name' => 'hook_requirements','link' => 'http://api.drupal.org/api/drupal/developer!hooks!install.php/function/hook_requirements/6','short_description' => 'Check installation requirements and do status reporting.','description' => 'Check installation requirements and do status reporting. This hook has two closely related uses, determined by the $phase argument:
checking installation requirements ($phase == \'install\')
and status reporting ($phase == \'runtime\'). Note that this hook, like all others dealing with installation and updates,
must reside in a module_name.install file, or it will not properly abort
the installation of the module if a critical requirement is missing. During the \'install\' phase, modules can for example assert that
library or server versions are available or sufficient.
Note that the installation of a module can happen during installation of
Drupal itself (by install.php) with an installation profile or later by hand.
As a consequence, install-time requirements must be checked without access
to the full Drupal API, because it is not available during install.php.
For localisation you should for example use $t = get_t() to
retrieve the appropriate localisation function name (t() or st()).
If a requirement has a severity of REQUIREMENT_ERROR, install.php will abort
or at least the module will not install.
Other severity levels have no effect on the installation.
Module dependencies do not belong to these installation requirements,
but should be defined in the module\'s .info file. The \'runtime\' phase is not limited to pure installation requirements
but can also be used for more general status information like maintenance
tasks and security issues.
The returned \'requirements\' will be listed on the status report in the
administration section, with indication of the severity level.
Moreover, any requirement with a severity of REQUIREMENT_ERROR severity will
result in a notice on the the administration overview page.','documentation' => '
 * Check installation requirements and do status reporting. This hook has two
 * closely related uses, determined by the $phase argument: checking installation
 * requirements ($phase == \'install\') and status reporting ($phase == \'runtime\').
 * Note that this hook, like all others dealing with installation and updates,
 * must reside in a module_name.install file, or it will not properly abort the
 * installation of the module if a critical requirement is missing. During the
 * \'install\' phase, modules can for example assert that library or server
 * versions are available or.','params_docs' => '
 *
 * @param $phase
 *   The phase in which hook_requirements is run: \'install\': the module is being
 *   installed. \'runtime\': the runtime requirements are being checked and shown
 *   on the status report page.
 *
 * @return
 *   A keyed array of requirements. Each requirement is itself an array with the
 *   following items: \'title\': the name of the requirement. \'value\': the current
 *   value (e.g. version, time, level, ...). During install phase, this should
 *   only be used for version numbers, do not set it if not applicable.
 *   \'description\': description of the requirement/status. \'severity\': the
 *   requirement\'s result/severity level, one of: REQUIREMENT_INFO: For info
 *   only. REQUIREMENT_OK: The requirement is satisfied. REQUIREMENT_WARNING: The
 *   requirement failed with a warning.','signature' => 'hook_requirements($phase)','sample_code' => '  $requirements = array();
  // Ensure translations don\'t break at install time
  $t = get_t();

  // Report Drupal version
  if ($phase == \'runtime\') {
    $requirements[\'drupal\'] = array(
      \'title\' => $t(\'Drupal\'),
      \'value\' => VERSION,
      \'severity\' => REQUIREMENT_INFO,
    );
  }

  // Test PHP version
  $requirements[\'php\'] = array(
    \'title\' => $t(\'PHP\'),
    \'value\' => ($phase == \'runtime\') ? l(phpversion(), \'admin/logs/status/php\') : phpversion(),
  );
  if (version_compare(phpversion(), DRUPAL_MINIMUM_PHP) 0) {
    $requirements[\'php\'][\'description\'] = $t(\'Your PHP installation is too old. Drupal requires at least PHP %version.\', array(\'%version\' => DRUPAL_MINIMUM_PHP));
    $requirements[\'php\'][\'severity\'] = REQUIREMENT_ERROR;
  }

  // Report cron status
  if ($phase == \'runtime\') {
    $cron_last = variable_get(\'cron_last\', NULL);

    if (is_numeric($cron_last)) {
      $requirements[\'cron\'][\'value\'] = $t(\'Last run !time ago\', array(\'!time\' => format_interval(time() - $cron_last)));
    }
    else {
      $requirements[\'cron\'] = array(
        \'description\' => $t(\'Cron has not run. It appears cron jobs have not been setup on your system. Please check the help pages for <a href="@url">configuring cron jobs</a>.\', array(\'@url\' => \'http://drupal.org/cron\')),
        \'severity\' => REQUIREMENT_ERROR,
        \'value\' => $t(\'Never run\'),
      );
    }

    $requirements[\'cron\'][\'description\'] .= \' \' . t(\'You can <a href="@cron">run cron manually</a>.\', array(\'@cron\' => url(\'admin/logs/status/run-cron\')));

    $requirements[\'cron\'][\'title\'] = $t(\'Cron maintenance tasks\');
  }

  return $requirements;'),
  array('id' => '54','drupal_version' => '6','name' => 'hook_schema','link' => 'http://api.drupal.org/api/drupal/developer!hooks!install.php/function/hook_schema/6','short_description' => 'Define the current version of the database schema.','description' => 'Define the current version of the database schema. A Drupal schema definition is an array structure representing one or
more tables and their related keys and indexes. A schema is defined by
hook_schema() which must live in your module\'s .install file. By implementing hook_schema() and specifying the tables your module
declares, you can easily create and drop these tables on all
supported database engines. You don\'t have to deal with the
different SQL dialects for table creation and alteration of the
supported database engines. See the Schema API documentation at http://drupal.org/node/146843 for
details on hook_schema(), where database tables are defined.','documentation' => '
 * Define the current version of the database schema. A Drupal schema definition
 * is an array structure representing one or more tables and their related keys
 * and indexes. A schema is defined by hook_schema() which must live in your
 * module\'s .install file. By implementing hook_schema() and specifying the
 * tables your module declares, you can easily create and drop these tables on
 * all supported database engines. You don\'t have to deal with the different SQL
 * dialects for table creation and alteration of the supported database engines.','params_docs' => '
 *
 * @return
 *   A schema definition structure array. For each element of the array, the key
 *   is a table name and the value is a table structure definition.','signature' => 'hook_schema()','sample_code' => '  $schema[\'node\'] = array(
    // example (partial) specification for table "node"
    \'description\' => \'The base table for nodes.\',
    \'fields\' => array(
      \'nid\' => array(
        \'description\' => \'The primary identifier for a node.\',
        \'type\' => \'serial\',
        \'unsigned\' => TRUE,
        \'not null\' => TRUE,
      ),
      \'vid\' => array(
        \'description\' => \'The current {node_revisions}.vid version identifier.\',
        \'type\' => \'int\',
        \'unsigned\' => TRUE,
        \'not null\' => TRUE,
        \'default\' => 0,
      ),
      \'type\' => array(
        \'description\' => \'The {node_type} of this node.\',
        \'type\' => \'varchar\',
        \'length\' => 32,
        \'not null\' => TRUE,
        \'default\' => \'\',
      ),
      \'title\' => array(
        \'description\' => \'The title of this node, always treated as non-markup plain text.\',
        \'type\' => \'varchar\',
        \'length\' => 255,
        \'not null\' => TRUE,
        \'default\' => \'\',
      ),
    ),
    \'indexes\' => array(
      \'node_changed\' => array(\'changed\'),
      \'node_created\' => array(\'created\'),
    ),
    \'unique keys\' => array(
      \'nid_vid\' => array(\'nid\', \'vid\'),
      \'vid\' => array(\'vid\'),
    ),
    \'primary key\' => array(\'nid\'),
  );
  return $schema;'),
  array('id' => '55','drupal_version' => '6','name' => 'hook_schema_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_schema_alter/6','short_description' => 'Performs alterations to existing database schemas.','description' => 'Performs alterations to existing database schemas. When a module modifies the database structure of another module (by
changing, adding or removing fields, keys or indexes), it should
implement hook_schema_alter() to update the default $schema to take
its changes into account. See hook_schema() for details on the schema definition structure.','documentation' => '
 * Performs alterations to existing database schemas. When a module modifies the
 * database structure of another module (by changing, adding or removing fields,
 * keys or indexes), it should implement hook_schema_alter() to update the
 * default $schema to take its changes into account. See hook_schema() for
 * details on the schema definition structure.','params_docs' => '
 *
 * @param $schema
 *   Nested array describing the schemas for all modules.
 *
 * @return
 *   None.','signature' => 'hook_schema_alter(&$schema)','sample_code' => '  // Add field to existing schema.
  $schema[\'users\'][\'fields\'][\'timezone_id\'] = array(
    \'type\' => \'int\',
    \'not null\' => TRUE,
    \'default\' => 0,
    \'description\' => \'Per-user timezone configuration.\',
  );'),
  array('id' => '56','drupal_version' => '6','name' => 'hook_search','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_search/6','short_description' => 'Define a custom search routine.','description' => 'Define a custom search routine. This hook allows a module to perform searches on content it defines
(custom node types, users, or comments, for example) when a site search
is performed. Note that you can use form API to extend the search. You will need to use
hook_form_alter() to add any additional required form elements. You can
process their values on submission using a custom validation function.
You will need to merge any custom search values into the search keys
using a key:value syntax. This allows all search queries to have a clean
and permanent URL. See node_form_alter() for an example. The example given here is for node.module, which uses the indexed search
capabilities. To do this, node module also implements hook_update_index()
which is used to create and maintain the index. We call do_search() with the keys, the module name, and extra SQL fragments
to use when searching. See hook_update_index() for more information.','documentation' => '
 * Define a custom search routine. This hook allows a module to perform searches
 * on content it defines (custom node types, users, or comments, for example)
 * when a site search is performed. Note that you can use form API to extend the
 * search. You will need to use hook_form_alter() to add any additional required
 * form elements. You can process their values on submission using a custom
 * validation function. You will need to merge any custom search values into the
 * search keys using a key:value syntax.','params_docs' => '
 *
 * @param $op
 *   A string defining which operation to perform: \'admin\': The hook should
 *   return a form array, containing any fieldsets the module wants to add to the
 *   Search settings page at admin/settings/search. \'name\': The hook should
 *   return a translated name defining the type of items that are searched for
 *   with this module (\'content\', \'users\', ...). \'reset\': The search index is
 *   going to be rebuilt. Modules which use hook_update_index() should update
 *   their indexing bookkeeping so that it starts from scratch the next time
 *   hook_update_index() is called. \'search\': The hook should perform a search
 *   using the keywords in $keys. \'status\': If the module implements
 *   hook_update_index(), it should return an array containing the following
 *   keys: remaining: The amount of items that still need to be indexed.
 * @param $keys
 *   The search keywords as entered by the user.
 *
 * @return
 *   This varies depending on the operation. \'admin\': The form array for the
 *   Search settings page at admin/settings/search. \'name\': The translated string
 *   of \'Content\'. \'reset\': None. \'search\': An array of search results. To use
 *   the default search result display, each item should have the following
 *   keys\': \'link\': Required. The URL of the found item. \'type\': The type of
 *   item. \'title\': Required. The name of the item. \'user\': The author of the
 *   item. \'date\': A timestamp when the item was last modified. \'extra\': An array
 *   of optional extra information items.','signature' => 'hook_search($op = \'search\', $keys = NULL)','sample_code' => '  switch ($op) {
    case \'name\':
      return t(\'Content\');

    case \'reset\':
      db_query("UPDATE {search_dataset} SET reindex = %d WHERE type = \'node\'", time());
      return;

    case \'status\':
      $total = db_result(db_query(\'SELECT COUNT(*) FROM {node} WHERE status = 1\'));
      $remaining = db_result(db_query("SELECT COUNT(*) FROM {node} n LEFT JOIN {search_dataset} d ON d.type = \'node\' AND d.sid = n.nid WHERE n.status = 1 AND (d.sid IS NULL OR d.reindex <> 0)"));
      return array(\'remaining\' => $remaining, \'total\' => $total);

    case \'admin\':
      $form = array();
      // Output form for defining rank factor weights.
      $form[\'content_ranking\'] = array(
        \'#type\' => \'fieldset\',
        \'#title\' => t(\'Content ranking\'),
      );
      $form[\'content_ranking\'][\'#theme\'] = \'node_search_admin\';
      $form[\'content_ranking\'][\'info\'] = array(
        \'#value\' => \'<em>\' . t(\'The following numbers control which properties the content search should favor when ordering the results. Higher numbers mean more influence, zero means the property is ignored. Changing these numbers does not require the search index to be rebuilt. Changes take effect immediately.\') . \'</em>\',
      );

      $ranking = array(
        \'node_rank_relevance\' => t(\'Keyword relevance\'),
        \'node_rank_recent\' => t(\'Recently posted\'),
      );
      if (module_exists(\'comment\')) {
        $ranking[\'node_rank_comments\'] = t(\'Number of comments\');
      }
      if (module_exists(\'statistics\') && variable_get(\'statistics_count_content_views\', 0)) {
        $ranking[\'node_rank_views\'] = t(\'Number of views\');
      }

      // Note: reversed to reflect that higher number = higher ranking.
      $options = drupal_map_assoc(range(0, 10));
      foreach ($ranking as $var => $title) {
        $form[\'content_ranking\'][\'factors\'][$var] = array(
          \'#title\' => $title,
          \'#type\' => \'select\',
          \'#options\' => $options,
          \'#default_value\' => variable_get($var, 5),
        );
      }
      return $form;

    case \'search\':
      // Build matching conditions
      list($join1, $where1) = _db_rewrite_sql();
      $arguments1 = array();
      $conditions1 = \'n.status = 1\';

      if ($type = search_query_extract($keys, \'type\')) {
        $types = array();
        foreach (explode(\',\', $type) as $t) {
          $types[] = "n.type = \'%s\'";
          $arguments1[] = $t;
        }
        $conditions1 .= \' AND (\' . implode(\' OR \', $types) . \')\';
        $keys = search_query_insert($keys, \'type\');
      }

      if ($category = search_query_extract($keys, \'category\')) {
        $categories = array();
        foreach (explode(\',\', $category) as $c) {
          $categories[] = "tn.tid = %d";
          $arguments1[] = $c;
        }
        $conditions1 .= \' AND (\' . implode(\' OR \', $categories) . \')\';
        $join1 .= \' INNER JOIN {term_node} tn ON n.vid = tn.vid\';
        $keys = search_query_insert($keys, \'category\');
      }

      // Build ranking expression (we try to map each parameter to a
      // uniform distribution in the range 0..1).
      $ranking = array();
      $arguments2 = array();
      $join2 = \'\';
      // Used to avoid joining on node_comment_statistics twice
      $stats_join = FALSE;
      $total = 0;
      if ($weight = (int) variable_get(\'node_rank_relevance\', 5)) {
        // Average relevance values hover around 0.15
        $ranking[] = \'%d * i.relevance\';
        $arguments2[] = $weight;
        $total += $weight;
      }
      if ($weight = (int) variable_get(\'node_rank_recent\', 5)) {
        // Exponential decay with half-life of 6 months, starting at last indexed node
        $ranking[] = \'%d * POW(2, (GREATEST(MAX(n.created), MAX(n.changed), MAX(c.last_comment_timestamp)) - %d) * 6.43e-8)\';
        $arguments2[] = $weight;
        $arguments2[] = (int) variable_get(\'node_cron_last\', 0);
        $join2 .= \' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid\';
        $stats_join = TRUE;
        $total += $weight;
      }
      if (module_exists(\'comment\') && $weight = (int) variable_get(\'node_rank_comments\', 5)) {
        // Inverse law that maps the highest reply count on the site to 1 and 0 to 0.
        $scale = variable_get(\'node_cron_comments_scale\', 0.0);
        $ranking[] = \'%d * (2.0 - 2.0 / (1.0 + MAX(c.comment_count) * %f))\';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        if (!$stats_join) {
          $join2 .= \' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid\';
        }
        $total += $weight;
      }
      if (module_exists(\'statistics\') && variable_get(\'statistics_count_content_views\', 0) &&
          $weight = (int) variable_get(\'node_rank_views\', 5)) {
        // Inverse law that maps the highest view count on the site to 1 and 0 to 0.
        $scale = variable_get(\'node_cron_views_scale\', 0.0);
        $ranking[] = \'%d * (2.0 - 2.0 / (1.0 + MAX(nc.totalcount) * %f))\';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        $join2 .= \' LEFT JOIN {node_counter} nc ON nc.nid = i.sid\';
        $total += $weight;
      }

      // When all search factors are disabled (ie they have a weight of zero),
      // the default score is based only on keyword relevance and there is no need to
      // adjust the score of each item.
      if ($total == 0) {
        $select2 = \'i.relevance AS score\';
        $total = 1;
      }
      else {
        $select2 = implode(\' + \', $ranking) . \' AS score\';
      }

      // Do search.
      $find = do_search($keys, \'node\', \'INNER JOIN {node} n ON n.nid = i.sid \' . $join1, $conditions1 . (empty($where1) ? \'\' : \' AND \' . $where1), $arguments1, $select2, $join2, $arguments2);

      // Load results.
      $results = array();
      foreach ($find as $item) {
        // Build the node body.
        $node = node_load($item->sid);
        $node->build_mode = NODE_BUILD_SEARCH_RESULT;
        $node = node_build_content($node, FALSE, FALSE);
        $node->body = drupal_render($node->content);

        // Fetch comments for snippet.
        $node->body .= module_invoke(\'comment\', \'nodeapi\', $node, \'update index\');
        // Fetch terms for snippet.
        $node->body .= module_invoke(\'taxonomy\', \'nodeapi\', $node, \'update index\');

        $extra = node_invoke_nodeapi($node, \'search result\');
        $results[] = array(
          \'link\' => url(\'node/\' . $item->sid, array(\'absolute\' => TRUE)),
          \'type\' => check_plain(node_get_types(\'name\', $node)),
          \'title\' => $node->title,
          \'user\' => theme(\'username\', $node),
          \'date\' => $node->changed,
          \'node\' => $node,
          \'extra\' => $extra,
          \'score\' => $item->score / $total,
          \'snippet\' => search_excerpt($keys, $node->body),
        );
      }
      return $results;
  }'),
  array('id' => '57','drupal_version' => '6','name' => 'hook_search_page','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_search_page/6','short_description' => 'Override the rendering of search results.','description' => 'Override the rendering of search results. A module that implements hook_search() to define a type of search
may implement this hook in order to override the default theming of
its search results, which is otherwise themed using
theme(\'search_results\'). Note that by default, theme(\'search_results\') and
theme(\'search_result\') work together to create a definition
list. So your hook_search_page() implementation should probably do
this as well.','documentation' => '
 * Override the rendering of search results. A module that implements
 * hook_search() to define a type of search may implement this hook in order to
 * override the default theming of its search results, which is otherwise themed
 * using theme(\'search_results\'). Note that by default, theme(\'search_results\')
 * and theme(\'search_result\') work together to create a definition list. So your
 * hook_search_page() implementation should probably do this as well.','params_docs' => '
 *
 * @param $results
 *   An array of search results.
 *
 * @return
 *   An HTML string containing the formatted search results, with a pager
 *   included.','signature' => 'hook_search_page($results)','sample_code' => '  $output = \'<dl class="search-results">\';

  foreach ($results as $entry) {
    $output .= theme(\'search_result\', $entry, $type);
  }
  $output .= \'</dl>\';
  $output .= theme(\'pager\', NULL);

  return $output;'),
  array('id' => '58','drupal_version' => '6','name' => 'hook_search_preprocess','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_search_preprocess/6','short_description' => 'Preprocess text for the search index.','description' => 'Preprocess text for the search index. This hook is called both for text added to the search index, as well as
the keywords users have submitted for searching. This is required for example to allow Japanese or Chinese text to be
searched. As these languages do not use spaces, it needs to be split into
separate words before it can be indexed. There are various external
libraries for this.','documentation' => '
 * Preprocess text for the search index. This hook is called both for text added
 * to the search index, as well as the keywords users have submitted for
 * searching. This is required for example to allow Japanese or Chinese text to
 * be searched. As these languages do not use spaces, it needs to be split into
 * separate words before it can be indexed. There are various external libraries
 * for this.','params_docs' => '
 *
 * @param $text
 *   The text to split. This is a single piece of plain-text that was extracted
 *   from between two HTML tags. Will not contain any HTML entities.
 *
 * @return
 *   The text after processing.','signature' => 'hook_search_preprocess($text)','sample_code' => '  // Do processing on $text
  return $text;'),
  array('id' => '59','drupal_version' => '6','name' => 'hook_system_info_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_system_info_alter/6','short_description' => 'Alter the information parsed from module and theme .info files','description' => 'Alter the information parsed from module and theme .info files This hook is invoked in  module_rebuild_cache() and in system_theme_data().
A module may implement this hook in order to add to or alter the data
generated by reading the .info file with drupal_parse_info_file().','documentation' => '
 * Alter the information parsed from module and theme .info files This hook is
 * invoked in module_rebuild_cache() and in system_theme_data(). A module may
 * implement this hook in order to add to or alter the data generated by reading
 * the .info file with drupal_parse_info_file().','params_docs' => '
 *
 * @param &$info
 *   The .info file contents, passed by reference so that it can be altered.
 * @param $file
 *   Full information about the module or theme, including $file->name, and
 *   $file->filename.','signature' => 'hook_system_info_alter(&$info, $file)','sample_code' => '  // Only fill this in if the .info file does not define a \'datestamp\'.
  if (empty($info[\'datestamp\'])) {
    $info[\'datestamp\'] = filemtime($file->filename);
  }'),
  array('id' => '60','drupal_version' => '6','name' => 'hook_taxonomy','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_taxonomy/6','short_description' => 'Act on taxonomy changes.','description' => 'Act on taxonomy changes. This hook allows modules to take action when the terms and vocabularies
in the taxonomy are modified.','documentation' => '
 * Act on taxonomy changes. This hook allows modules to take action when the
 * terms and vocabularies in the taxonomy are modified.','params_docs' => '
 *
 * @param $op
 *   What is being done to $array. Possible values: "delete" "insert" "update".
 * @param $type
 *   What manner of item $array is. Possible values: "term" "vocabulary".
 * @param $array
 *   The item on which $op is being performed. Possible values: for vocabularies,
 *   \'insert\' and \'update\' ops: $form_values from
 *   taxonomy_form_vocabulary_submit() for vocabularies, \'delete\' op: $vocabulary
 *   from taxonomy_get_vocabulary() cast to an array for terms, \'insert\' and
 *   \'update\' ops: $form_values from taxonomy_form_term_submit() for terms,
 *   \'delete\' op: $term from taxonomy_get_term() cast to an array.
 *
 * @return
 *   None.','signature' => 'hook_taxonomy($op, $type, $array = NULL)','sample_code' => '  if ($type == \'vocabulary\' && ($op == \'insert\' || $op == \'update\')) {
    if (variable_get(\'forum_nav_vocabulary\', \'\') == \'\'
         && in_array(\'forum\', $array[\'nodes\'])) {
      // since none is already set, silently set this vocabulary as the
      // navigation vocabulary
      variable_set(\'forum_nav_vocabulary\', $array[\'vid\']);
    }
  }'),
  array('id' => '61','drupal_version' => '6','name' => 'hook_term_path','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_term_path/6','short_description' => 'Allows modules to provide an alternative path for the terms it manages.','description' => 'Allows modules to provide an alternative path for the terms it manages. For vocabularies not maintained by taxonomy.module, give the maintaining
module a chance to provide a path for terms in that vocabulary. "Not maintained by taxonomy.module" is misleading. It means that the vocabulary
table contains a module name in the \'module\' column. Any module may update this
column and will then be called to provide an alternative path for the terms
it recognizes (manages). This hook should be used rather than hard-coding a "taxonomy/term/xxx" path.','documentation' => '
 * Allows modules to provide an alternative path for the terms it manages. For
 * vocabularies not maintained by taxonomy.module, give the maintaining module a
 * chance to provide a path for terms in that vocabulary. "Not maintained by
 * taxonomy.module" is misleading. It means that the vocabulary table contains a
 * module name in the \'module\' column. Any module may update this column and will
 * then be called to provide an alternative path for the terms it recognizes
 * (manages). This hook should be used rather than hard-coding a
 * "taxonomy/term/xxx" path.','params_docs' => '
 *
 * @param $term
 *   A term object.
 *
 * @return
 *   An internal Drupal path.','signature' => 'hook_term_path($term)','sample_code' => '  return \'taxonomy/term/\' . $term->tid;'),
  array('id' => '62','drupal_version' => '6','name' => 'hook_theme','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_theme/6','short_description' => 'Register a module (or theme\'s) theme implementations.','description' => 'Register a module (or theme\'s) theme implementations. Modules and themes implementing this hook return an array of arrays. The key
to each sub-array is the internal name of the hook, and the array contains
information about the hook. Each array may contain the following elements: arguments: (required) An array of arguments that this theme hook uses. This
value allows the theme layer to properly utilize templates. The array keys
represent the name of the variable, and the value will be used as the
default value if not passed to the theme() function.  These arguments must
be in the same order that they will be given to the theme() function.
Default values will only be passed to templates. If you want your theme
function to assume defaults, specify them as usual in the argument list in
the theme_HOOK_NAME() default implementation.
file: The file the implementation resides in. This file will be included
prior to the theme being rendered, to make sure that the function or
preprocess function (as needed) is actually loaded; this makes it possible
to split theme functions out into separate files quite easily.
path: Override the path of the file to be used. Ordinarily the module or
theme path will be used, but if the file will not be in the default path,
include it here. This path should be relative to the Drupal root directory.
template: If specified, this theme implementation is a template, and this
is the template file without an extension. Do not put .tpl.php on this
file; that extension will be added automatically by the default rendering
engine (which is PHPTemplate). If \'path\', above, is specified, the template
should also be in this path.
function: If specified, this will be the function name to invoke for this
implementation. If neither \'template\' nor \'function\' is specified, a
default function name will be assumed. For example, if a module registers
the \'node\' theme hook, \'theme_node\' will be assigned to its function. If
the chameleon theme registers the node hook, it will be assigned
\'chameleon_node\' as its function.
pattern: A regular expression pattern to be used to allow this theme
implementation to have a dynamic name. The convention is to use __ to
differentiate the dynamic portion of the theme. For example, to allow
forums to be themed individually, the pattern might be: \'forum__\'. Then,
when the forum is themed, call: theme(array(\'forum__\'. $tid, \'forum\'),
$forum).
preprocess functions: A list of functions used to preprocess this data.
Ordinarily this won\'t be used; it\'s automatically filled in. By default,
for a module this will be filled in as template_preprocess_HOOK. For a
theme this will be filled in as phptemplate_preprocess and
phptemplate_preprocess_HOOK as well as themename_preprocess and
themename_preprocess_HOOK.
override preprocess functions: Set to TRUE when a theme does NOT want the
standard preprocess functions to run. This can be used to give a theme FULL
control over how variables are set. For example, if a theme wants total
control over how certain variables in the page.tpl.php are set, this can be
set to true. Please keep in mind that when this is use by a theme, that
theme becomes responsible for making sure necessary variables are set.
type: (automatically derived) Where the theme hook is defined: \'module\',
\'theme_engine\', or \'theme\'.
theme path: (automatically derived) The directory path of the theme or
module, so that it doesn\'t need to be looked up.
theme paths: (automatically derived) An array of template suggestions where
.tpl.php files related to this theme hook may be found. The following parameters are all optional.','documentation' => '
 * Register a module (or theme\'s) theme implementations. Modules and themes
 * implementing this hook return an array of arrays. The key to each sub-array is
 * the internal name of the hook, and the array contains information about the
 * hook. Each array may contain the following elements: arguments: (required) An
 * array of arguments that this theme hook uses. This value allows the theme
 * layer to properly utilize templates. The array keys represent the name of the
 * variable, and the value will be used as the default value if not passed to the
 * theme() function.','params_docs' => '
 *
 * @param $existing
 *   An array of existing implementations that may be used for override purposes.
 *   This is primarily useful for themes that may wish to examine existing
 *   implementations to extract data (such as arguments) so that it may properly
 *   register its own, higher priority implementations.
 * @param $type
 *   What \'type\' is being processed. This is primarily useful so that themes tell
 *   if they are the actual theme being called or a parent theme. May be one of:
 *   module: A module is being checked for theme implementations.
 *   base_theme_engine: A theme engine is being checked for a theme which is a
 *   parent of the actual theme being used. theme_engine: A theme engine is being
 *   checked for the actual theme being used. base_theme: A base theme is being
 *   checked for theme implementations. theme: The actual theme in use is being
 *   checked.
 * @param $theme
 *   The actual name of theme that is being being checked (mostly only useful for
 *   theme engine).
 * @param $path
 *   The directory path of the theme or module, so that it doesn\'t need to be
 *   looked up.
 *
 * @return
 *   A keyed array of theme hooks.','signature' => 'hook_theme($existing, $type, $theme, $path)','sample_code' => '  return array(
    \'forum_display\' => array(
      \'arguments\' => array(\'forums\' => NULL, \'topics\' => NULL, \'parents\' => NULL, \'tid\' => NULL, \'sortby\' => NULL, \'forum_per_page\' => NULL),
    ),
    \'forum_list\' => array(
      \'arguments\' => array(\'forums\' => NULL, \'parents\' => NULL, \'tid\' => NULL),
    ),
    \'forum_topic_list\' => array(
      \'arguments\' => array(\'tid\' => NULL, \'topics\' => NULL, \'sortby\' => NULL, \'forum_per_page\' => NULL),
    ),
    \'forum_icon\' => array(
      \'arguments\' => array(\'new_posts\' => NULL, \'num_posts\' => 0, \'comment_mode\' => 0, \'sticky\' => 0),
    ),
    \'forum_topic_navigation\' => array(
      \'arguments\' => array(\'node\' => NULL),
    ),
    \'node\' => array(
      \'arguments\' => array(\'node\' => NULL, \'teaser\' => FALSE, \'page\' => FALSE),
      \'template\' => \'node\',
    ),
    \'node_filter_form\' => array(
      \'arguments\' => array(\'form\' => NULL),
      \'file\' => \'node.admin.inc\',
    ),
  );'),
  array('id' => '63','drupal_version' => '6','name' => 'hook_theme_registry_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_theme_registry_alter/6','short_description' => 'Alter the theme registry information returned from hook_theme().','description' => 'Alter the theme registry information returned from hook_theme(). The theme registry stores information about all available theme hooks,
including which callback functions those hooks will call when triggered,
what template files are exposed by these hooks, and so on. Note that this hook is only executed as the theme cache is re-built.
Changes here will not be visible until the next cache clear. The $theme_registry array is keyed by theme hook name, and contains the
information returned from hook_theme(), as well as additional properties
added by _theme_process_registry(). For example: $theme_registry[\'user_profile\'] = array(
  \'arguments\' => array(
    \'account\' => NULL,
  ),
  \'template\' => \'modules/user/user-profile\',
  \'file\' => \'modules/user/user.pages.inc\',
  \'type\' => \'module\',
  \'theme path\' => \'modules/user\',
  \'theme paths\' => array(
    0 => \'modules/user\',
  ),
  \'preprocess functions\' => array(
    0 => \'template_preprocess\',
    1 => \'template_preprocess_user_profile\',
  ),
);','documentation' => '
 * Alter the theme registry information returned from hook_theme(). The theme
 * registry stores information about all available theme hooks, including which
 * callback functions those hooks will call when triggered, what template files
 * are exposed by these hooks, and so on. Note that this hook is only executed as
 * the theme cache is re-built. Changes here will not be visible until the next
 * cache clear. The $theme_registry array is keyed by theme hook name, and
 * contains the information returned from hook_theme(), as well as additional
 * properties added by.','params_docs' => '
 *
 * @param $theme_registry
 *   The entire cache of theme registry information, post-processing.','signature' => 'hook_theme_registry_alter(&$theme_registry)','sample_code' => '  // Kill the next/previous forum topic navigation links.
  foreach ($theme_registry[\'forum_topic_navigation\'][\'preprocess functions\'] as $key => $value) {
    if ($value == \'template_preprocess_forum_topic_navigation\') {
      unset($theme_registry[\'forum_topic_navigation\'][\'preprocess functions\'][$key]);
    }
  }'),
  array('id' => '64','drupal_version' => '6','name' => 'hook_translated_menu_link_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_translated_menu_link_alter/6','short_description' => 'Alter a menu link after it\'s translated, but before it\'s rendered.','description' => 'Alter a menu link after it\'s translated, but before it\'s rendered. This hook may be used, for example, to add a page-specific query string.
For performance reasons, only links that have $item[\'options\'][\'alter\'] == TRUE
will be passed into this hook.  The $item[\'options\'][\'alter\'] flag should
generally be set using hook_menu_link_alter().','documentation' => '
 * Alter a menu link after it\'s translated, but before it\'s rendered. This hook
 * may be used, for example, to add a page-specific query string. For performance
 * reasons, only links that have $item[\'options\'][\'alter\'] == TRUE will be passed
 * into this hook. The $item[\'options\'][\'alter\'] flag should generally be set
 * using hook_menu_link_alter().','params_docs' => '
 *
 * @param $item
 *   Associative array defining a menu link after.
 * @param $map
 *   Associative array containing the menu $map (path parts and/or objects).
 *
 * @return
 *   None.','signature' => 'hook_translated_menu_link_alter(&$item, $map)','sample_code' => '  if ($item[\'href\'] == \'devel/cache/clear\') {
    $item[\'localized_options\'][\'query\'] = drupal_get_destination();
  }'),
  array('id' => '65','drupal_version' => '6','name' => 'hook_translation_link_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_translation_link_alter/6','short_description' => 'Perform alterations on translation links.','description' => 'Perform alterations on translation links. A translation link may need to point to a different path or use a translated
link text before going through l(), which will just handle the path aliases.','documentation' => '
 * Perform alterations on translation links. A translation link may need to point
 * to a different path or use a translated link text before going through l(),
 * which will just handle the path aliases.','params_docs' => '
 *
 * @param $links
 *   Nested array of links keyed by language code.
 * @param $path
 *   The current path.
 *
 * @return
 *   None.','signature' => 'hook_translation_link_alter(&$links, $path)','sample_code' => '  global $language;

  if (isset($links[$language])) {
    foreach ($links[$language] as $link) {
      $link[\'attributes\'][\'class\'] .= \' active-language\';
    }
  }'),
  array('id' => '66','drupal_version' => '6','name' => 'hook_uninstall','link' => 'http://api.drupal.org/api/drupal/developer!hooks!install.php/function/hook_uninstall/6','short_description' => 'Remove any information that the module sets.','description' => 'Remove any information that the module sets. The information that the module should remove includes: Variables that the module has set using variable_set().
Modifications to existing tables.
Database tables the module created. The uninstall hook must be implemented in the module\'s .install file. It
will fire when the module gets uninstalled.','documentation' => '
 * Remove any information that the module sets. The information that the module
 * should remove includes: Variables that the module has set using
 * variable_set(). Modifications to existing tables. Database tables the module
 * created. The uninstall hook must be implemented in the module\'s .install file.
 * It will fire when the module gets uninstalled.','params_docs' => '','signature' => 'hook_uninstall()','sample_code' => '  drupal_uninstall_schema(\'upload\');
  variable_del(\'upload_file_types\');'),
  array('id' => '67','drupal_version' => '6','name' => 'hook_update','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_update/6','short_description' => 'Respond to node updating.','description' => 'Respond to node updating. This is a hook used by node modules. It is called to allow the module
to take action when an edited node is being updated in the database by,
for example, updating information in related tables.','documentation' => '
 * Respond to node updating. This is a hook used by node modules. It is called to
 * allow the module to take action when an edited node is being updated in the
 * database by, for example, updating information in related tables.','params_docs' => '
 *
 * @param $node
 *   The node being updated.
 *
 * @return
 *   None. To take action when nodes of any type are updated (not just nodes of
 *   the type(s) defined by this module), use hook_nodeapi() instead. For a
 *   detailed usage example, see node_example.module.','signature' => 'hook_update($node)','sample_code' => '  db_query("UPDATE {mytable} SET extra = \'%s\' WHERE nid = %d",
    $node->extra, $node->nid);'),
  array('id' => '68','drupal_version' => '6','name' => 'hook_update_index','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_update_index/6','short_description' => 'Update Drupal\'s full-text index for this module.','description' => 'Update Drupal\'s full-text index for this module. Modules can implement this hook if they want to use the full-text indexing
mechanism in Drupal. This hook is called every cron run if search.module is enabled. A module
should check which of its items were modified or added since the last
run. It is advised that you implement a throttling mechanism which indexes
at most \'search_cron_limit\' items per run (see example below). You should also be aware that indexing may take too long and be aborted if
there is a PHP time limit. That\'s why you should update your internal
bookkeeping multiple times per run, preferably after every item that
is indexed. Per item that needs to be indexed, you should call search_index() with
its content as a single HTML string. The search indexer will analyse the
HTML and use it to assign higher weights to important words (such as
titles). It will also check for links that point to nodes, and use them to
boost the ranking of the target nodes.','documentation' => '
 * Update Drupal\'s full-text index for this module. Modules can implement this
 * hook if they want to use the full-text indexing mechanism in Drupal. This hook
 * is called every cron run if search.module is enabled. A module should check
 * which of its items were modified or added since the last run. It is advised
 * that you implement a throttling mechanism which indexes at most
 * \'search_cron_limit\' items per run (see example below). You should also be
 * aware that indexing may take too long and be aborted if there is a PHP time
 * limit.','params_docs' => '','signature' => 'hook_update_index()','sample_code' => '  $last = variable_get(\'node_cron_last\', 0);
  $limit = (int) variable_get(\'search_cron_limit\', 100);

  $result = db_query_range(\'SELECT n.nid, c.last_comment_timestamp FROM {node} n LEFT JOIN {node_comment_statistics} c ON n.nid = c.nid WHERE n.status = 1 AND n.moderate = 0 AND (n.created > %d OR n.changed > %d OR c.last_comment_timestamp > %d) ORDER BY GREATEST(n.created, n.changed, c.last_comment_timestamp) ASC\', $last, $last, $last, 0, $limit);

  while ($node = db_fetch_object($result)) {
    $last_comment = $node->last_comment_timestamp;
    $node = node_load(array(\'nid\' => $node->nid));

    // We update this variable per node in case cron times out, or if the node
    // cannot be indexed (PHP nodes which call drupal_goto, for example).
    // In rare cases this can mean a node is only partially indexed, but the
    // chances of this happening are very small.
    variable_set(\'node_cron_last\', max($last_comment, $node->changed, $node->created));

    // Get node output (filtered and with module-specific fields).
    if (node_hook($node, \'view\')) {
      node_invoke($node, \'view\', false, false);
    }
    else {
      $node = node_prepare($node, false);
    }
    // Allow modules to change $node->body before viewing.
    node_invoke_nodeapi($node, \'view\', false, false);

    $text = \'<h1>\' . drupal_specialchars($node->title) . \'</h1>\' . $node->body;

    // Fetch extra data normally not visible
    $extra = node_invoke_nodeapi($node, \'update index\');
    foreach ($extra as $t) {
      $text .= $t;
    }

    // Update index
    search_index($node->nid, \'node\', $text);
  }'),
  array('id' => '69','drupal_version' => '6','name' => 'hook_update_last_removed','link' => 'http://api.drupal.org/api/drupal/developer!hooks!install.php/function/hook_update_last_removed/6','short_description' => 'Return a number which is no longer available as hook_update_N().','description' => 'Return a number which is no longer available as hook_update_N(). If you remove some update functions from your mymodule.install file, you
should notify Drupal of those missing functions. This way, Drupal can
ensure that no update is accidentally skipped. Implementations of this hook should be placed in a mymodule.install file in
the same directory as mymodule.module.','documentation' => '
 * Return a number which is no longer available as hook_update_N(). If you remove
 * some update functions from your mymodule.install file, you should notify
 * Drupal of those missing functions. This way, Drupal can ensure that no update
 * is accidentally skipped. Implementations of this hook should be placed in a
 * mymodule.install file in the same directory as mymodule.module.','params_docs' => '
 *
 * @return
 *   An integer, corresponding to hook_update_N() which has been removed from
 *   mymodule.install.','signature' => 'hook_update_last_removed()','sample_code' => '  // We\'ve removed the 5.x-1.x version of mymodule, including database updates.
  // The next update function is mymodule_update_5200().
  return 5103;'),
  array('id' => '70','drupal_version' => '6','name' => 'hook_update_N','link' => 'http://api.drupal.org/api/drupal/developer!hooks!install.php/function/hook_update_N/6','short_description' => 'Perform a single update.','description' => 'Perform a single update. For each patch which requires a database change add a new hook_update_N()
which will be called by update.php. The database updates are numbered
sequentially according to the version of Drupal you are compatible with. Schema updates should adhere to the Schema API: http://drupal.org/node/150215 Database updates consist of 3 parts: 1 digit for Drupal core compatibility
1 digit for your module\'s major release version (e.g. is this the 5.x-1.* (1) or 5.x-2.* (2) series of your module?)
2 digits for sequential counting starting with 00 The 2nd digit should be 0 for initial porting of your module to a new Drupal
core API. Examples: mymodule_update_5200()
This is the first update to get the database ready to run mymodule 5.x-2.*.

mymodule_update_6000()
This is the required update for mymodule to run with Drupal core API 6.x.

mymodule_update_6100()
This is the first update to get the database ready to run mymodule 6.x-1.*.

mymodule_update_6200()
This is the first update to get the database ready to run mymodule 6.x-2.*.
Users can directly update from 5.x-2.* to 6.x-2.* and they get all 60XX
and 62XX updates, but not 61XX updates, because those reside in the
6.x-1.x branch only. A good rule of thumb is to remove updates older than two major releases of
Drupal. See hook_update_last_removed() to notify Drupal about the removals. Never renumber update functions. Further information about releases and release numbers: http://drupal.org/handbook/version-info
http://drupal.org/node/93999 (Overview of contributions branches and tags)
http://drupal.org/handbook/cvs/releases Implementations of this hook should be placed in a mymodule.install file in
the same directory as mymodule.module. Drupal core\'s updates are implemented
using the system module as a name and stored in database/updates.inc. If your update task is potentially time-consuming, you\'ll need to implement a
multipass update to avoid PHP timeouts. Multipass updates use the $sandbox
parameter provided by the batch API (normally, $context[\'sandbox\']) to store
information between successive calls, and the $sandbox[\'#finished\'] value to
provide feedback regarding completion level. See the batch operations page for more information on how to use the batch
API: http://drupal.org/node/180528','documentation' => '
 * Perform a single update. For each patch which requires a database change add a
 * new hook_update_N() which will be called by update.php. The database updates
 * are numbered sequentially according to the version of Drupal you are
 * compatible with. Schema updates should adhere to the Schema API:
 * http://drupal.org/node/150215 Database updates consist of 3 parts: 1 digit for
 * Drupal core compatibility 1 digit for your module\'s major release version
 * (e.g. is this the 5.x-1.* (1) or 5.x-2.','params_docs' => '
 *
 * @param $sandbox
 *   Stores information for multipass updates. See above for more information.
 *
 * @return
 *   An array with the results of the calls to update_sql(). An update function
 *   can force the current and all later updates for this module to abort by
 *   returning a $ret array with an element like: $ret[\'#abort\'] =
 *   array(\'success\' => FALSE, \'query\' => \'What went wrong\'); The schema version
 *   will not be updated in this case, and all the aborted updates will continue
 *   to appear on update.php as updates that have not yet been run. Multipass
 *   update functions will also want to pass back the $ret[\'#finished\'] variable
 *   to inform the batch API of progress.','signature' => 'hook_update_N(&$sandbox)','sample_code' => '  // For non-multipass updates, the signature can simply be;
  // function hook_update_N() {

  // For most updates, the following is sufficient.
  $ret = array();
  db_add_field($ret, \'mytable1\', \'newcol\', array(\'type\' => \'int\', \'not null\' => TRUE));
  return $ret;

  // However, for more complex operations that may take a long time,
  // you may hook into Batch API as in the following example.
  $ret = array();

  // Update 3 users at a time to have an exclamation point after their names.
  // (They\'re really happy that we can do batch API in this hook!)
  if (!isset($sandbox[\'progress\'])) {
    $sandbox[\'progress\'] = 0;
    $sandbox[\'current_uid\'] = 0;
    // We\'ll -1 to disregard the uid 0...
    $sandbox[\'max\'] = db_result(db_query(\'SELECT COUNT(DISTINCT uid) FROM {users}\')) - 1;
  }

  $users = db_query_range("SELECT uid, name FROM {users} WHERE uid > %d ORDER BY uid ASC", $sandbox[\'current_uid\'], 0, 3);
  while ($user = db_fetch_object($users)) {
    $user->name .= \'!\';
    $ret[] = update_sql("UPDATE {users} SET name = \'$user->name\' WHERE uid = $user->uid");

    $sandbox[\'progress\']++;
    $sandbox[\'current_uid\'] = $user->uid;
  }

  $ret[\'#finished\'] = empty($sandbox[\'max\']) ? 1 : ($sandbox[\'progress\'] / $sandbox[\'max\']);

  return $ret;'),
  array('id' => '71','drupal_version' => '6','name' => 'hook_update_projects_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_update_projects_alter/6','short_description' => 'Alter the list of projects before fetching data and comparing versions.','description' => 'Alter the list of projects before fetching data and comparing versions. Most modules will never need to implement this hook. It is for advanced
interaction with the update status module: mere mortals need not apply.
The primary use-case for this hook is to add projects to the list, for
example, to provide update status data on disabled modules and themes. A
contributed module might want to hide projects from the list, for example,
if there is a site-specific module that doesn\'t have any official releases,
that module could remove itself from this list to avoid "No available
releases found" warnings on the available updates report. In rare cases, a
module might want to alter the data associated with a project already in
the list.','documentation' => '
 * Alter the list of projects before fetching data and comparing versions. Most
 * modules will never need to implement this hook. It is for advanced interaction
 * with the update status module: mere mortals need not apply. The primary
 * use-case for this hook is to add projects to the list, for example, to provide
 * update status data on disabled modules and themes. A contributed module might
 * want to hide projects from the list, for example, if there is a site-specific
 * module that doesn\'t have any official releases, that module could remove
 * itself from this list.','params_docs' => '
 *
 * @param $projects
 *   Reference to an array of the projects installed on the system. This includes
 *   all the metadata documented in the comments below for each project (either
 *   module or theme) that is currently enabled. The array is initially populated
 *   inside.','signature' => 'hook_update_projects_alter(&$projects)','sample_code' => '  // Hide a site-specific module from the list.
  unset($projects[\'site_specific_module\']);

  // Add a disabled module to the list.
  // The key for the array should be the machine-readable project "short name".
  $projects[\'disabled_project_name\'] = array(
    // Machine-readable project short name (same as the array key above).
    \'name\' => \'disabled_project_name\',
    // Array of values from the main .info file for this project.
    \'info\' => array(
      \'name\' => \'Some disabled module\',
      \'description\' => \'A module not enabled on the site that you want to see in the available updates report.\',
      \'version\' => \'6.x-1.0\',
      \'core\' => \'6.x\',
      // The maximum file change time (the "ctime" returned by the filectime()
      // PHP method) for all of the .info files included in this project.
      \'_info_file_ctime\' => 1243888165,
    ),
    // The date stamp when the project was released, if known. If the disabled
    // project was an officially packaged release from drupal.org, this will
    // be included in the .info file as the \'datestamp\' field. This only
    // really matters for development snapshot releases that are regenerated,
    // so it can be left undefined or set to 0 in most cases.
    \'datestamp\' => 1243888185,
    // Any modules (or themes) included in this project. Keyed by machine-
    // readable "short name", value is the human-readable project name printed
    // in the UI.
    \'includes\' => array(
      \'disabled_project\' => \'Disabled module\',
      \'disabled_project_helper\' => \'Disabled module helper module\',
      \'disabled_project_foo\' => \'Disabled module foo add-on module\',
    ),
    // Does this project contain a \'module\', \'theme\', \'disabled-module\', or
    // \'disabled-theme\'?
    \'project_type\' => \'disabled-module\',
  );'),
  array('id' => '72','drupal_version' => '6','name' => 'hook_update_status_alter','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_update_status_alter/6','short_description' => 'Alter the information about available updates for projects.','description' => 'Alter the information about available updates for projects.','documentation' => '
 * Alter the information about available updates for projects.','params_docs' => '
 *
 * @param $projects
 *   Reference to an array of information about available updates to each project
 *   installed on the system.','signature' => 'hook_update_status_alter(&$projects)','sample_code' => '  $settings = variable_get(\'update_advanced_project_settings\', array());
  foreach ($projects as $project => $project_info) {
    if (isset($settings[$project]) && isset($settings[$project][\'check\']) &&
        ($settings[$project][\'check\'] == \'never\' ||
         (isset($project_info[\'recommended\']) &&
          $settings[$project][\'check\'] === $project_info[\'recommended\']))) {
      $projects[$project][\'status\'] = UPDATE_NOT_CHECKED;
      $projects[$project][\'reason\'] = t(\'Ignored from settings\');
      if (!empty($settings[$project][\'notes\'])) {
        $projects[$project][\'extra\'][] = array(
          \'class\' => \'admin-note\',
          \'label\' => t(\'Administrator note\'),
          \'data\' => $settings[$project][\'notes\'],
        );
      }
    }
  }'),
  array('id' => '73','drupal_version' => '6','name' => 'hook_user','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_user/6','short_description' => 'Act on user account actions.','description' => 'Act on user account actions. This hook allows modules to react when operations are performed on user
accounts.','documentation' => '
 * Act on user account actions. This hook allows modules to react when operations
 * are performed on user accounts.','params_docs' => '
 *
 * @param $op
 *   What kind of action is being performed. Possible values (in alphabetical
 *   order): after_update: The user object has been updated and changed. Use this
 *   (probably along with \'insert\') if you want to reuse some information from
 *   the user object. categories: A set of user information categories is
 *   requested. delete: The user account is being deleted. The module should
 *   remove its custom additions to the user object from the database. form: The
 *   user account edit form is about to be displayed. The module should present
 *   the form elements it wishes to inject into the form. insert: The user
 *   account is being added. The module should save its custom additions to the
 *   user object into the database and set the saved fields to NULL in $edit.
 *   load: The user account is being loaded.
 * @param $edit
 *   The array of form values submitted by the user.
 * @param $account
 *   The user object on which the operation is being performed.
 * @param $category
 *   The active category of user information being edited.
 *
 * @return
 *   This varies depending on the operation. categories: An array of associative
 *   arrays representing the categories added by the implementing module. Each
 *   array can have the following keys: name: The internal name of the category.
 *   title: The human-readable, localized name of the category. weight: An
 *   integer specifying the category\'s sort ordering. access callback: Name of a
 *   menu access callback function to use when editing this category. Defaults to
 *   using user_edit_access() if not specified. See hook_menu() for more
 *   information on menu access callbacks.','signature' => 'hook_user($op, &$edit, &$account, $category = NULL)','sample_code' => '  if ($op == \'form\' && $category == \'account\') {
    $form[\'comment_settings\'] = array(
      \'#type\' => \'fieldset\',
      \'#title\' => t(\'Comment settings\'),
      \'#collapsible\' => TRUE,
      \'#weight\' => 4,
    );
    $form[\'comment_settings\'][\'signature\'] = array(
      \'#type\' => \'textarea\',
      \'#title\' => t(\'Signature\'),
      \'#default_value\' => $edit[\'signature\'],
      \'#description\' => t(\'Your signature will be publicly displayed at the end of your comments.\'),
    );
    return $form;
  }'),
  array('id' => '74','drupal_version' => '6','name' => 'hook_user_operations','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_user_operations/6','short_description' => 'Add mass user operations.','description' => 'Add mass user operations. This hook enables modules to inject custom operations into the mass operations
dropdown found at admin/user/user, by associating a callback function with
the operation, which is called when the form is submitted. The callback function
receives one initial argument, which is an array of the checked users.','documentation' => '
 * Add mass user operations. This hook enables modules to inject custom
 * operations into the mass operations dropdown found at admin/user/user, by
 * associating a callback function with the operation, which is called when the
 * form is submitted. The callback function receives one initial argument, which
 * is an array of the checked users.','params_docs' => '
 *
 * @return
 *   An array of operations. Each operation is an associative array that may
 *   contain the following key-value pairs: "label": Required. The label for the
 *   operation, displayed in the dropdown menu. "callback": Required. The
 *   function to call for the operation. "callback arguments": Optional. An array
 *   of additional arguments to pass to the callback function.','signature' => 'hook_user_operations()','sample_code' => '  $operations = array(
    \'unblock\' => array(
      \'label\' => t(\'Unblock the selected users\'),
      \'callback\' => \'user_user_operations_unblock\',
    ),
    \'block\' => array(
      \'label\' => t(\'Block the selected users\'),
      \'callback\' => \'user_user_operations_block\',
    ),
    \'delete\' => array(
      \'label\' => t(\'Delete the selected users\'),
    ),
  );
  return $operations;'),
  array('id' => '75','drupal_version' => '6','name' => 'hook_validate','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_validate/6','short_description' => 'Verify a node editing form.','description' => 'Verify a node editing form. This is a hook used by node modules. It is called to allow the module
to verify that the node is in a format valid to post to the site.
Errors should be set with form_set_error().','documentation' => '
 * Verify a node editing form. This is a hook used by node modules. It is called
 * to allow the module to verify that the node is in a format valid to post to
 * the site. Errors should be set with form_set_error().','params_docs' => '
 *
 * @param $node
 *   The node to be validated.
 * @param $form
 *   The node edit form array.
 *
 * @return
 *   None. To validate nodes of all types (not just nodes of the type(s) defined
 *   by this module), use hook_nodeapi() instead. Changes made to the $node
 *   object within a hook_validate() function will have no effect. The preferred
 *   method to change a node\'s content is to use hook_nodeapi($op=\'presave\')
 *   instead. If it is really necessary to change the node at the validate stage,
 *   you can use function form_set_value(). For a detailed usage example, see
 *   node_example.module.','signature' => 'hook_validate($node, &$form)','sample_code' => '  if (isset($node->end) && isset($node->start)) {
    if ($node->start > $node->end) {
      form_set_error(\'time\', t(\'An event may not end before it starts.\'));
    }
  }'),
  array('id' => '76','drupal_version' => '6','name' => 'hook_view','link' => 'http://api.drupal.org/api/drupal/developer!hooks!node.php/function/hook_view/6','short_description' => 'Display a node.','description' => 'Display a node. This is a hook used by node modules. It allows a module to define a
custom method of displaying its nodes, usually by displaying extra
information particular to that node type.','documentation' => '
 * Display a node. This is a hook used by node modules. It allows a module to
 * define a custom method of displaying its nodes, usually by displaying extra
 * information particular to that node type.','params_docs' => '
 *
 * @param $node
 *   The node to be displayed.
 * @param $teaser
 *   Whether we are to generate a "teaser" or summary of the node, rather than
 *   display the whole thing.
 * @param $page
 *   Whether the node is being displayed as a standalone page. If this is TRUE,
 *   the node title should not be displayed, as it will be printed automatically
 *   by the theme system. Also, the module may choose to alter the default
 *   breadcrumb trail in this case.
 *
 * @return
 *   $node. The passed $node parameter should be modified as necessary and
 *   returned so it can be properly presented. Nodes are prepared for display by
 *   assembling a structured array in $node->content, rather than directly
 *   manipulating $node->body and $node->teaser. The format of this array is the
 *   same used by the Forms API. As with FormAPI arrays, the #weight property can
 *   be used to control the relative positions of added elements. If for some
 *   reason you need to change the body or teaser returned by node_prepare(), you
 *   can modify.','signature' => 'hook_view($node, $teaser = FALSE, $page = FALSE)','sample_code' => '  if ($page) {
    $breadcrumb = array();
    $breadcrumb[] = l(t(\'Home\'), NULL);
    $breadcrumb[] = l(t(\'Example\'), \'example\');
    $breadcrumb[] = l($node->field1, \'example/\' . $node->field1);
    drupal_set_breadcrumb($breadcrumb);
  }

  $node = node_prepare($node, $teaser);
  $node->content[\'myfield\'] = array(
    \'#value\' => theme(\'mymodule_myfield\', $node->myfield),
    \'#weight\' => 1,
  );

  return $node;'),
  array('id' => '77','drupal_version' => '6','name' => 'hook_watchdog','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_watchdog/6','short_description' => 'Log an event message','description' => 'Log an event message This hook allows modules to route log events to custom destinations, such as
SMS, Email, pager, syslog, ...etc.','documentation' => '
 * Log an event message This hook allows modules to route log events to custom
 * destinations, such as SMS, Email, pager, syslog, ...etc.','params_docs' => '
 *
 * @param $log_entry
 *   An associative array containing the following keys: type: The type of
 *   message for this entry. For contributed modules, this is normally the module
 *   name. Do not use \'debug\', use severity WATCHDOG_DEBUG instead. user: The
 *   user object for the user who was logged in when the event happened.
 *   request_uri: The Request URI for the page the event happened in. referer:
 *   The page that referred the use to the page where the event occurred. ip: The
 *   IP address where the request for the page came from. timestamp: The UNIX
 *   timetamp of the date/time the event occurred severity: One of the following
 *   values as defined in RFC 3164 http://www.faqs.org/rfcs/rfc3164.html
 *   WATCHDOG_EMERG Emergency: system is unusable WATCHDOG_ALERT Alert: action
 *   must be taken immediately WATCHDOG_CRITICAL Critical:.
 *
 * @return
 *   None.','signature' => 'hook_watchdog($log_entry)','sample_code' => '  global $base_url, $language;

  $severity_list = array(
    WATCHDOG_EMERG => t(\'Emergency\'),
    WATCHDOG_ALERT => t(\'Alert\'),
    WATCHDOG_CRITICAL => t(\'Critical\'),
    WATCHDOG_ERROR => t(\'Error\'),
    WATCHDOG_WARNING => t(\'Warning\'),
    WATCHDOG_NOTICE => t(\'Notice\'),
    WATCHDOG_INFO => t(\'Info\'),
    WATCHDOG_DEBUG => t(\'Debug\'),
  );

  $to = \'someone@example.com\';
  $params = array();
  $params[\'subject\'] = t(\'[@site_name] @severity_desc: Alert from your web site\', array(
    \'@site_name\' => variable_get(\'site_name\', \'Drupal\'),
    \'@severity_desc\' => $severity_list[$log_entry[\'severity\']],
  ));

  $params[\'message\']  = "\\nSite:         @base_url";
  $params[\'message\'] .= "\\nSeverity:     (@severity) @severity_desc";
  $params[\'message\'] .= "\\nTimestamp:    @timestamp";
  $params[\'message\'] .= "\\nType:         @type";
  $params[\'message\'] .= "\\nIP Address:   @ip";
  $params[\'message\'] .= "\\nRequest URI:  @request_uri";
  $params[\'message\'] .= "\\nReferrer URI: @referer_uri";
  $params[\'message\'] .= "\\nUser:         (@uid) @name";
  $params[\'message\'] .= "\\nLink:         @link";
  $params[\'message\'] .= "\\nMessage:      \\n\\n@message";

  $params[\'message\'] = t($params[\'message\'], array(
    \'@base_url\' => $base_url,
    \'@severity\' => $log_entry[\'severity\'],
    \'@severity_desc\' => $severity_list[$log_entry[\'severity\']],
    \'@timestamp\' => format_date($log_entry[\'timestamp\']),
    \'@type\' => $log_entry[\'type\'],
    \'@ip\' => $log_entry[\'ip\'],
    \'@request_uri\' => $log_entry[\'request_uri\'],
    \'@referer_uri\' => $log_entry[\'referer\'],
    \'@uid\' => $log_entry[\'user\']->uid,
    \'@name\' => $log_entry[\'user\']->name,
    \'@link\' => strip_tags($log_entry[\'link\']),
    \'@message\' => strip_tags($log_entry[\'message\']),
  ));

  drupal_mail(\'emaillog\', \'log\', $to, $language, $params);'),
  array('id' => '78','drupal_version' => '6','name' => 'hook_xmlrpc','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/hook_xmlrpc/6','short_description' => 'Register XML-RPC callbacks.','description' => 'Register XML-RPC callbacks. This hook lets a module register callback functions to be called when
particular XML-RPC methods are invoked by a client.','documentation' => '
 * Register XML-RPC callbacks. This hook lets a module register callback
 * functions to be called when particular XML-RPC methods are invoked by a
 * client.','params_docs' => '
 *
 * @return
 *   An array which maps XML-RPC methods to Drupal functions. Each array element
 *   is either a pair of method => function or an array with four entries: The
 *   XML-RPC method name (for example, module.function). The Drupal callback
 *   function (for example, module_function). The method signature is an array of
 *   XML-RPC types. The first element of this array is the type of return value
 *   and then you should write a list of the types of the parameters. XML-RPC
 *   types are the following (See the types at http://www.xmlrpc.com/spec ):
 *   "boolean": 0 (false) or 1 (true).','signature' => 'hook_xmlrpc()','sample_code' => '  return array(
    \'drupal.login\' => \'drupal_login\', array(
      \'drupal.site.ping\',
      \'drupal_directory_ping\',
      array(\'boolean\', \'string\', \'string\', \'string\', \'string\', \'string\'),
      t(\'Handling ping request\'),
    ),
  );'),
  array('id' => '79','drupal_version' => '6','name' => 'module_hook','link' => 'http://api.drupal.org/api/drupal/includes!module.inc/function/module_hook/6','short_description' => 'Determine whether a module implements a hook.','description' => 'Determine whether a module implements a hook.','documentation' => '
 * Determine whether a module implements a hook.','params_docs' => '
 *
 * @param $module
 *   The name of the module (without the .module extension).
 * @param $hook
 *   The name of the hook (e.g. "help" or "menu").
 *
 * @return
 *   TRUE if the module is both installed and enabled, and the hook is
 *   implemented in that module.','signature' => 'module_hook($module, $hook)','sample_code' => '  return function_exists($module . \'_\' . $hook);'),
  array('id' => '80','drupal_version' => '6','name' => 'module_implements','link' => 'http://api.drupal.org/api/drupal/includes!module.inc/function/module_implements/6','short_description' => 'Determine which modules are implementing a hook.','description' => 'Determine which modules are implementing a hook.','documentation' => '
 * Determine which modules are implementing a hook.','params_docs' => '
 *
 * @param $hook
 *   The name of the hook (e.g. "help" or "menu").
 * @param $sort
 *   By default, modules are ordered by weight and filename, settings this option
 *   to TRUE, module list will be ordered by module name.
 * @param $refresh
 *   For internal use only: Whether to force the stored list of hook
 *   implementations to be regenerated (such as after enabling a new module,
 *   before processing hook_enable).
 *
 * @return
 *   An array with the names of the modules which are implementing this hook.','signature' => 'module_implements($hook, $sort = FALSE, $refresh = FALSE)','sample_code' => '  static $implementations;

  if ($refresh) {
    $implementations = array();
    return;
  }

  if (!isset($implementations[$hook])) {
    $implementations[$hook] = array();
    $list = module_list(FALSE, TRUE, $sort);
    foreach ($list as $module) {
      if (module_hook($module, $hook)) {
        $implementations[$hook][] = $module;
      }
    }
  }

  // The explicit cast forces a copy to be made. This is needed because
  // $implementations[$hook] is only a reference to an element of
  // $implementations and if there are nested foreaches (due to nested node
  // API calls, for example), they would both manipulate the same array\'s
  // references, which causes some modules\' hooks not to be called.
  // See also http://www.zend.com/zend/art/ref-count.php.
  return (array) $implementations[$hook];'),
  array('id' => '81','drupal_version' => '6','name' => 'module_invoke','link' => 'http://api.drupal.org/api/drupal/includes!module.inc/function/module_invoke/6','short_description' => 'Invoke a hook in a particular module.','description' => 'Invoke a hook in a particular module.','documentation' => '
 * Invoke a hook in a particular module.','params_docs' => '
 *
 * @param $module
 *   The name of the module (without the .module extension).
 * @param $hook
 *   The name of the hook to invoke.
 * @param ...
 *   Arguments to pass to the hook implementation.
 *
 * @return
 *   The return value of the hook implementation.','signature' => 'module_invoke()','sample_code' => '  $args = func_get_args();
  $module = $args[0];
  $hook = $args[1];
  unset($args[0], $args[1]);
  $function = $module . \'_\' . $hook;
  if (module_hook($module, $hook)) {
    return call_user_func_array($function, $args);
  }'),
  array('id' => '82','drupal_version' => '6','name' => 'module_invoke_all','link' => 'http://api.drupal.org/api/drupal/includes!module.inc/function/module_invoke_all/6','short_description' => 'Invoke a hook in all enabled modules that implement it.','description' => 'Invoke a hook in all enabled modules that implement it.','documentation' => '
 * Invoke a hook in all enabled modules that implement it.','params_docs' => '
 *
 * @param $hook
 *   The name of the hook to invoke.
 * @param ...
 *   Arguments to pass to the hook.
 *
 * @return
 *   An array of return values of the hook implementations. If modules return
 *   arrays from their implementations, those are merged into one array.','signature' => 'module_invoke_all()','sample_code' => '  $args = func_get_args();
  $hook = $args[0];
  unset($args[0]);
  $return = array();
  foreach (module_implements($hook) as $module) {
    $function = $module . \'_\' . $hook;
    $result = call_user_func_array($function, $args);
    if (isset($result) && is_array($result)) {
      $return = array_merge_recursive($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }

  return $return;'),
  array('id' => '83','drupal_version' => '6','name' => 'page_cache_fastpath','link' => 'http://api.drupal.org/api/drupal/developer!hooks!core.php/function/page_cache_fastpath/6','short_description' => 'Outputs a cached page.','description' => 'Outputs a cached page. By implementing page_cache_fastpath(), a special cache handler can skip
most of the bootstrap process, including the database connection.
This function is invoked during DRUPAL_BOOTSTRAP_EARLY_PAGE_CACHE.','documentation' => '
 * Outputs a cached page. By implementing page_cache_fastpath(), a special cache
 * handler can skip most of the bootstrap process, including the database
 * connection. This function is invoked during DRUPAL_BOOTSTRAP_EARLY_PAGE_CACHE.','params_docs' => '
 *
 * @return
 *   TRUE if a page was output successfully.','signature' => 'page_cache_fastpath()','sample_code' => '  $page = mycache_fetch($base_root . request_uri(), \'cache_page\');
  if (!empty($page)) {
    drupal_page_header();
    print $page;
    return TRUE;
  }'),
  array('id' => '84','drupal_version' => '7','name' => 'hook_actions_delete','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_actions_delete/7','short_description' => 'Executes code after an action is deleted.','description' => 'Executes code after an action is deleted.','documentation' => '
 * Executes code after an action is deleted.','params_docs' => '
 *
 * @param $aid
 *   The action ID.','signature' => 'hook_actions_delete($aid)','sample_code' => '  db_delete(\'actions_assignments\')
    ->condition(\'aid\', $aid)
    ->execute();'),
  array('id' => '85','drupal_version' => '7','name' => 'hook_action_info','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_action_info/7','short_description' => 'Declares information about actions.','description' => 'Declares information about actions. Any module can define actions, and then call actions_do() to make those
actions happen in response to events. The trigger module provides a user
interface for associating actions with module-defined triggers, and it makes
sure the core triggers fire off actions when their events happen. An action consists of two or three parts: an action definition (returned by this hook)
a function which performs the action (which by convention is named
MODULE_description-of-function_action)
an optional form definition function that defines a configuration form
(which has the name of the action function with \'_form\' appended to it.) The action function takes two to four arguments, which come from the input
arguments to actions_do().','documentation' => '
 * Declares information about actions. Any module can define actions, and then
 * call actions_do() to make those actions happen in response to events. The
 * trigger module provides a user interface for associating actions with
 * module-defined triggers, and it makes sure the core triggers fire off actions
 * when their events happen. An action consists of two or three parts: an action
 * definition (returned by this hook) a function which performs the action (which
 * by convention is named MODULE_description-of-function_action) an optional form
 * definition function that.','params_docs' => '
 *
 * @return
 *   An associative array of action descriptions. The keys of the array are the
 *   names of the action functions, and each corresponding value is an
 *   associative array with the following key-value pairs: \'type\': The type of
 *   object this action acts upon. Core actions have types \'node\', \'user\',
 *   \'comment\', and \'system\'. \'label\': The human-readable name of the action,
 *   which should be passed through the t() function for translation.
 *   \'configurable\': If FALSE, then the action doesn\'t require any extra
 *   configuration.','signature' => 'hook_action_info()','sample_code' => '  return array(
    \'comment_unpublish_action\' => array(
      \'type\' => \'comment\',
      \'label\' => t(\'Unpublish comment\'),
      \'configurable\' => FALSE,
      \'behavior\' => array(\'changes_property\'),
      \'triggers\' => array(\'comment_presave\', \'comment_insert\', \'comment_update\'),
    ),
    \'comment_unpublish_by_keyword_action\' => array(
      \'type\' => \'comment\',
      \'label\' => t(\'Unpublish comment containing keyword(s)\'),
      \'configurable\' => TRUE,
      \'behavior\' => array(\'changes_property\'),
      \'triggers\' => array(\'comment_presave\', \'comment_insert\', \'comment_update\'),
    ),
    \'comment_save_action\' => array(
      \'type\' => \'comment\',
      \'label\' => t(\'Save comment\'),
      \'configurable\' => FALSE,
      \'triggers\' => array(\'comment_insert\', \'comment_update\'),
    ),
  );'),
  array('id' => '86','drupal_version' => '7','name' => 'hook_action_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_action_info_alter/7','short_description' => 'Alters the actions declared by another module.','description' => 'Alters the actions declared by another module. Called by actions_list() to allow modules to alter the return values from
implementations of hook_action_info().','documentation' => '
 * Alters the actions declared by another module. Called by actions_list() to
 * allow modules to alter the return values from implementations of
 * hook_action_info().','params_docs' => '','signature' => 'hook_action_info_alter(&$actions)','sample_code' => '  $actions[\'node_unpublish_action\'][\'label\'] = t(\'Unpublish and remove from public view.\');'),
  array('id' => '87','drupal_version' => '7','name' => 'hook_admin_paths','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_admin_paths/7','short_description' => 'Define administrative paths.','description' => 'Define administrative paths. Modules may specify whether or not the paths they define in hook_menu() are
to be considered administrative. Other modules may use this information to
display those pages differently (e.g. in a modal overlay, or in a different
theme). To change the administrative status of menu items defined in another module\'s
hook_menu(), modules should implement hook_admin_paths_alter().','documentation' => '
 * Define administrative paths. Modules may specify whether or not the paths they
 * define in hook_menu() are to be considered administrative. Other modules may
 * use this information to display those pages differently (e.g. in a modal
 * overlay, or in a different theme). To change the administrative status of menu
 * items defined in another module\'s hook_menu(), modules should implement
 * hook_admin_paths_alter().','params_docs' => '
 *
 * @return
 *   An associative array. For each item, the key is the path in question, in a
 *   format acceptable to drupal_match_path(). The value for each item should be
 *   TRUE (for paths considered administrative) or FALSE (for non- administrative
 *   paths).','signature' => 'hook_admin_paths()','sample_code' => '  $paths = array(
    \'mymodule/*/add\' => TRUE,
    \'mymodule/*/edit\' => TRUE,
  );
  return $paths;'),
  array('id' => '88','drupal_version' => '7','name' => 'hook_admin_paths_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_admin_paths_alter/7','short_description' => 'Redefine administrative paths defined by other modules.','description' => 'Redefine administrative paths defined by other modules.','documentation' => '
 * Redefine administrative paths defined by other modules.','params_docs' => '
 *
 * @param $paths
 *   An associative array of administrative paths, as defined by implementations
 *   of.','signature' => 'hook_admin_paths_alter(&$paths)','sample_code' => '  // Treat all user pages as administrative.
  $paths[\'user\'] = TRUE;
  $paths[\'user/*\'] = TRUE;
  // Treat the forum topic node form as a non-administrative page.
  $paths[\'node/add/forum\'] = FALSE;'),
  array('id' => '89','drupal_version' => '7','name' => 'hook_aggregator_fetch','link' => 'http://api.drupal.org/api/drupal/modules!aggregator!aggregator.api.php/function/hook_aggregator_fetch/7','short_description' => 'Create an alternative fetcher for aggregator.module.','description' => 'Create an alternative fetcher for aggregator.module. A fetcher downloads feed data to a Drupal site. The fetcher is called at the
first of the three aggregation stages: first, data is downloaded by the
active fetcher; second, it is converted to a common format by the active
parser; and finally, it is passed to all active processors, which manipulate
or store the data. Modules that define this hook can be set as active fetcher on
admin/config/services/aggregator. Only one fetcher can be active at a time.','documentation' => '
 * Create an alternative fetcher for aggregator.module. A fetcher downloads feed
 * data to a Drupal site. The fetcher is called at the first of the three
 * aggregation stages: first, data is downloaded by the active fetcher; second,
 * it is converted to a common format by the active parser; and finally, it is
 * passed to all active processors, which manipulate or store the data. Modules
 * that define this hook can be set as active fetcher on
 * admin/config/services/aggregator. Only one fetcher can be active at a time.','params_docs' => '
 *
 * @param $feed
 *   A feed object representing the resource to be downloaded. $feed->url
 *   contains the link to the feed. Download the data at the URL and expose it to
 *   other modules by attaching it to $feed->source_string.
 *
 * @return
 *   TRUE if fetching was successful, FALSE otherwise.','signature' => 'hook_aggregator_fetch($feed)','sample_code' => '  $feed->source_string = mymodule_fetch($feed->url);'),
  array('id' => '90','drupal_version' => '7','name' => 'hook_aggregator_fetch_info','link' => 'http://api.drupal.org/api/drupal/modules!aggregator!aggregator.api.php/function/hook_aggregator_fetch_info/7','short_description' => 'Specify the title and short description of your fetcher.','description' => 'Specify the title and short description of your fetcher. The title and the description provided are shown on
admin/config/services/aggregator among other places. Use as title the human
readable name of the fetcher and as description a brief (40 to 80 characters)
explanation of the fetcher\'s functionality. This hook is only called if your module implements hook_aggregator_fetch().
If this hook is not implemented aggregator will use your module\'s file name
as title and there will be no description.','documentation' => '
 * Specify the title and short description of your fetcher. The title and the
 * description provided are shown on admin/config/services/aggregator among other
 * places. Use as title the human readable name of the fetcher and as description
 * a brief (40 to 80 characters) explanation of the fetcher\'s functionality. This
 * hook is only called if your module implements hook_aggregator_fetch(). If this
 * hook is not implemented aggregator will use your module\'s file name as title
 * and there will be no description.','params_docs' => '
 *
 * @return
 *   An associative array defining a title and a description string.','signature' => 'hook_aggregator_fetch_info()','sample_code' => '  return array(
    \'title\' => t(\'Default fetcher\'),
    \'description\' => t(\'Default fetcher for resources available by URL.\'),
  );'),
  array('id' => '91','drupal_version' => '7','name' => 'hook_aggregator_parse','link' => 'http://api.drupal.org/api/drupal/modules!aggregator!aggregator.api.php/function/hook_aggregator_parse/7','short_description' => 'Create an alternative parser for aggregator module.','description' => 'Create an alternative parser for aggregator module. A parser converts feed item data to a common format. The parser is called
at the second of the three aggregation stages: first, data is downloaded
by the active fetcher; second, it is converted to a common format by the
active parser; and finally, it is passed to all active processors which
manipulate or store the data. Modules that define this hook can be set as the active parser on
admin/config/services/aggregator. Only one parser can be active at a time.','documentation' => '
 * Create an alternative parser for aggregator module. A parser converts feed
 * item data to a common format. The parser is called at the second of the three
 * aggregation stages: first, data is downloaded by the active fetcher; second,
 * it is converted to a common format by the active parser; and finally, it is
 * passed to all active processors which manipulate or store the data. Modules
 * that define this hook can be set as the active parser on
 * admin/config/services/aggregator. Only one parser can be active at a time.','params_docs' => '
 *
 * @param $feed
 *   An object describing the resource to be parsed. $feed->source_string
 *   contains the raw feed data. The hook implementation should parse this data
 *   and add the following properties to the $feed object: description: The
 *   human-readable description of the feed. link: A full URL that directly
 *   relates to the feed. image: An image URL used to display an image of the
 *   feed. etag: An entity tag from the HTTP header used for cache validation to
 *   determine if the content has been changed. modified: The UNIX timestamp when
 *   the feed was last modified. items: An array of feed items. The common format
 *   for a single feed item is an associative array containing: title: The
 *   human-readable title of the feed item. description: The full body text of
 *   the item or a summary.
 *
 * @return
 *   TRUE if parsing was successful, FALSE otherwise.','signature' => 'hook_aggregator_parse($feed)','sample_code' => '  if ($items = mymodule_parse($feed->source_string)) {
    $feed->items = $items;
    return TRUE;
  }
  return FALSE;'),
  array('id' => '92','drupal_version' => '7','name' => 'hook_aggregator_parse_info','link' => 'http://api.drupal.org/api/drupal/modules!aggregator!aggregator.api.php/function/hook_aggregator_parse_info/7','short_description' => 'Specify the title and short description of your parser.','description' => 'Specify the title and short description of your parser. The title and the description provided are shown on
admin/config/services/aggregator among other places. Use as title the human
readable name of the parser and as description a brief (40 to 80 characters)
explanation of the parser\'s functionality. This hook is only called if your module implements hook_aggregator_parse().
If this hook is not implemented aggregator will use your module\'s file name
as title and there will be no description.','documentation' => '
 * Specify the title and short description of your parser. The title and the
 * description provided are shown on admin/config/services/aggregator among other
 * places. Use as title the human readable name of the parser and as description
 * a brief (40 to 80 characters) explanation of the parser\'s functionality. This
 * hook is only called if your module implements hook_aggregator_parse(). If this
 * hook is not implemented aggregator will use your module\'s file name as title
 * and there will be no description.','params_docs' => '
 *
 * @return
 *   An associative array defining a title and a description string.','signature' => 'hook_aggregator_parse_info()','sample_code' => '  return array(
    \'title\' => t(\'Default parser\'),
    \'description\' => t(\'Default parser for RSS, Atom and RDF feeds.\'),
  );'),
  array('id' => '93','drupal_version' => '7','name' => 'hook_aggregator_process','link' => 'http://api.drupal.org/api/drupal/modules!aggregator!aggregator.api.php/function/hook_aggregator_process/7','short_description' => 'Create a processor for aggregator.module.','description' => 'Create a processor for aggregator.module. A processor acts on parsed feed data. Active processors are called at the
third and last of the aggregation stages: first, data is downloaded by the
active fetcher; second, it is converted to a common format by the active
parser; and finally, it is passed to all active processors that manipulate or
store the data. Modules that define this hook can be activated as processor on
admin/config/services/aggregator.','documentation' => '
 * Create a processor for aggregator.module. A processor acts on parsed feed
 * data. Active processors are called at the third and last of the aggregation
 * stages: first, data is downloaded by the active fetcher; second, it is
 * converted to a common format by the active parser; and finally, it is passed
 * to all active processors that manipulate or store the data. Modules that
 * define this hook can be activated as processor on
 * admin/config/services/aggregator.','params_docs' => '
 *
 * @param $feed
 *   A feed object representing the resource to be processed. $feed->items
 *   contains an array of feed items downloaded and parsed at the parsing stage.
 *   See.','signature' => 'hook_aggregator_process($feed)','sample_code' => '  foreach ($feed->items as $item) {
    mymodule_save($item);
  }'),
  array('id' => '94','drupal_version' => '7','name' => 'hook_aggregator_process_info','link' => 'http://api.drupal.org/api/drupal/modules!aggregator!aggregator.api.php/function/hook_aggregator_process_info/7','short_description' => 'Specify the title and short description of your processor.','description' => 'Specify the title and short description of your processor. The title and the description provided are shown most importantly on
admin/config/services/aggregator. Use as title the natural name of the
processor and as description a brief (40 to 80 characters) explanation of the
functionality. This hook is only called if your module implements hook_aggregator_process().
If this hook is not implemented aggregator will use your module\'s file name
as title and there will be no description.','documentation' => '
 * Specify the title and short description of your processor. The title and the
 * description provided are shown most importantly on
 * admin/config/services/aggregator. Use as title the natural name of the
 * processor and as description a brief (40 to 80 characters) explanation of the
 * functionality. This hook is only called if your module implements
 * hook_aggregator_process(). If this hook is not implemented aggregator will use
 * your module\'s file name as title and there will be no description.','params_docs' => '
 *
 * @return
 *   An associative array defining a title and a description string.','signature' => 'hook_aggregator_process_info($feed)','sample_code' => '  return array(
    \'title\' => t(\'Default processor\'),
    \'description\' => t(\'Creates lightweight records of feed items.\'),
  );'),
  array('id' => '95','drupal_version' => '7','name' => 'hook_aggregator_remove','link' => 'http://api.drupal.org/api/drupal/modules!aggregator!aggregator.api.php/function/hook_aggregator_remove/7','short_description' => 'Remove stored feed data.','description' => 'Remove stored feed data. Aggregator calls this hook if either a feed is deleted or a user clicks on
"remove items". If your module stores feed items for example on hook_aggregator_process() it
is recommended to implement this hook and to remove data related to $feed
when called.','documentation' => '
 * Remove stored feed data. Aggregator calls this hook if either a feed is
 * deleted or a user clicks on "remove items". If your module stores feed items
 * for example on hook_aggregator_process() it is recommended to implement this
 * hook and to remove data related to $feed when called.','params_docs' => '
 *
 * @param $feed
 *   The $feed object whose items are being removed.','signature' => 'hook_aggregator_remove($feed)','sample_code' => '  mymodule_remove_items($feed->fid);'),
  array('id' => '96','drupal_version' => '7','name' => 'hook_ajax_render_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_ajax_render_alter/7','short_description' => 'Alter the commands that are sent to the user through the Ajax framework.','description' => 'Alter the commands that are sent to the user through the Ajax framework.','documentation' => '
 * Alter the commands that are sent to the user through the Ajax framework.','params_docs' => '
 *
 * @param $commands
 *   An array of all commands that will be sent to the user.','signature' => 'hook_ajax_render_alter($commands)','sample_code' => '  // Inject any new status messages into the content area.
  $commands[] = ajax_command_prepend(\'#block-system-main .content\', theme(\'status_messages\'));'),
  array('id' => '97','drupal_version' => '7','name' => 'hook_archiver_info','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_archiver_info/7','short_description' => 'Declare archivers to the system.','description' => 'Declare archivers to the system. An archiver is a class that is able to package and unpackage one or more files
into a single possibly compressed file.  Common examples of such files are
zip files and tar.gz files.  All archiver classes must implement
ArchiverInterface. Each entry should be keyed on a unique value, and specify three
additional keys: class: The name of the PHP class for this archiver.
extensions: An array of file extensions that this archiver supports.
weight: This optional key specifies the weight of this archiver.
When mapping file extensions to archivers, the first archiver by
weight found that supports the requested extension will be used.','documentation' => '
 * Declare archivers to the system. An archiver is a class that is able to
 * package and unpackage one or more files into a single possibly compressed
 * file. Common examples of such files are zip files and tar.gz files. All
 * archiver classes must implement ArchiverInterface. Each entry should be keyed
 * on a unique value, and specify three additional keys: class: The name of the
 * PHP class for this archiver. extensions: An array of file extensions that this
 * archiver supports. weight: This optional key specifies the weight of this
 * archiver.','params_docs' => '','signature' => 'hook_archiver_info()','sample_code' => '  return array(
    \'tar\' => array(
      \'class\' => \'ArchiverTar\',
      \'extensions\' => array(\'tar\', \'tar.gz\', \'tar.bz2\'),
    ),
  );'),
  array('id' => '98','drupal_version' => '7','name' => 'hook_archiver_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_archiver_info_alter/7','short_description' => 'Alter archiver information declared by other modules.','description' => 'Alter archiver information declared by other modules. See hook_archiver_info() for a description of archivers and the archiver
information structure.','documentation' => '
 * Alter archiver information declared by other modules. See hook_archiver_info()
 * for a description of archivers and the archiver information structure.','params_docs' => '
 *
 * @param $info
 *   Archiver information to alter (return values from.','signature' => 'hook_archiver_info_alter(&$info)','sample_code' => '  $info[\'tar\'][\'extensions\'][] = \'tgz\';'),
  array('id' => '99','drupal_version' => '7','name' => 'hook_batch_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_batch_alter/7','short_description' => 'Alter batch information before a batch is processed.','description' => 'Alter batch information before a batch is processed. Called by batch_process() to allow modules to alter a batch before it is
processed.','documentation' => '
 * Alter batch information before a batch is processed. Called by batch_process()
 * to allow modules to alter a batch before it is processed.','params_docs' => '
 *
 * @param $batch
 *   The associative array of batch information. See.','signature' => 'hook_batch_alter(&$batch)','sample_code' => '  // If the current page request is inside the overlay, add ?render=overlay to
  // the success callback URL, so that it appears correctly within the overlay.
  if (overlay_get_mode() == \'child\') {
    if (isset($batch[\'url_options\'][\'query\'])) {
      $batch[\'url_options\'][\'query\'][\'render\'] = \'overlay\';
    }
    else {
      $batch[\'url_options\'][\'query\'] = array(\'render\' => \'overlay\');
    }
  }'),
  array('id' => '100','drupal_version' => '7','name' => 'hook_block_configure','link' => 'http://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_configure/7','short_description' => 'Define a configuration form for a block.','description' => 'Define a configuration form for a block.','documentation' => '
 * Define a configuration form for a block.','params_docs' => '
 *
 * @param $delta
 *   Which block is being configured. This is a unique identifier for the block
 *   within the module, defined in.
 *
 * @return
 *   A configuration form, if one is needed for your block beyond the standard
 *   elements that the block module provides (block title, visibility, etc.). For
 *   a detailed usage example, see block_example.module.','signature' => 'hook_block_configure($delta = \'\')','sample_code' => '  // This example comes from node.module.
  $form = array();
  if ($delta == \'recent\') {
    $form[\'node_recent_block_count\'] = array(
      \'#type\' => \'select\',
      \'#title\' => t(\'Number of recent content items to display\'),
      \'#default_value\' => variable_get(\'node_recent_block_count\', 10),
      \'#options\' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 30)),
    );
  }
  return $form;'),
  array('id' => '101','drupal_version' => '7','name' => 'hook_block_info','link' => 'http://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_info/7','short_description' => 'Define all blocks provided by the module.','description' => 'Define all blocks provided by the module. This hook declares to Drupal what blocks are provided by your module and can
optionally specify initial block configuration settings. In hook_block_info(), each block your module provides is given a unique
identifier referred to as "delta" (the array key in the return value). Delta
values only need to be unique within your module, and they are used in the
following ways: Passed into the other block hooks in your module as an argument to identify
the block being configured or viewed.
Used to construct the default HTML ID of "block-MODULE-DELTA" applied to
each block when it is rendered. This ID may then be used for CSS styling or
JavaScript programming.
Used to define a theming template suggestion of block__MODULE__DELTA, for
advanced theming possibilities.
Used by other modules to identify your block in hook_block_info_alter() and
other alter hooks. The values of delta can be strings or numbers, but because of the uses above
it is preferable to use descriptive strings whenever possible, and only use a
numeric identifier if you have to (for instance if your module allows users
to create several similar blocks that you identify within your module code
with numeric IDs). The maximum length for delta values is 32 bytes.','documentation' => '
 * Define all blocks provided by the module. This hook declares to Drupal what
 * blocks are provided by your module and can optionally specify initial block
 * configuration settings. In hook_block_info(), each block your module provides
 * is given a unique identifier referred to as "delta" (the array key in the
 * return value). Delta values only need to be unique within your module, and
 * they are used in the following ways: Passed into the other block hooks in your
 * module as an argument to identify the block being configured or viewed.','params_docs' => '
 *
 * @return
 *   An associative array whose keys define the delta for each block and whose
 *   values contain the block descriptions. Each block description is itself an
 *   associative array, with the following key-value pairs: info: (required) The
 *   human-readable administrative name of the block. This is used to identify
 *   the block on administration screens, and is not displayed to
 *   non-administrative users. cache: (optional) A bitmask describing what kind
 *   of caching is appropriate for the block.','signature' => 'hook_block_info()','sample_code' => '  // This example comes from node.module.
  $blocks[\'syndicate\'] = array(
    \'info\' => t(\'Syndicate\'),
    \'cache\' => DRUPAL_NO_CACHE,
  );

  $blocks[\'recent\'] = array(
    \'info\' => t(\'Recent content\'),
    // DRUPAL_CACHE_PER_ROLE will be assumed.
  );

  return $blocks;'),
  array('id' => '102','drupal_version' => '7','name' => 'hook_block_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_info_alter/7','short_description' => 'Change block definition before saving to the database.','description' => 'Change block definition before saving to the database.','documentation' => '
 * Change block definition before saving to the database.','params_docs' => '
 *
 * @param $blocks
 *   A multidimensional array of blocks keyed by the defining module and delta;
 *   the values are blocks returned by.
 * @param $theme
 *   The theme these blocks belong to.
 * @param $code_blocks
 *   The blocks as defined in.','signature' => 'hook_block_info_alter(&$blocks, $theme, $code_blocks)','sample_code' => '  // Disable the login block.
  $blocks[\'user\'][\'login\'][\'status\'] = 0;'),
  array('id' => '103','drupal_version' => '7','name' => 'hook_block_list_alter','link' => 'http://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_list_alter/7','short_description' => 'Act on blocks prior to rendering.','description' => 'Act on blocks prior to rendering. This hook allows you to add, remove or modify blocks in the block list. The
block list contains the block definitions, not the rendered blocks. The
blocks are rendered after the modules have had a chance to manipulate the
block list. You can also set $block->content here, which will override the content of the
block and prevent hook_block_view() from running.','documentation' => '
 * Act on blocks prior to rendering. This hook allows you to add, remove or
 * modify blocks in the block list. The block list contains the block
 * definitions, not the rendered blocks. The blocks are rendered after the
 * modules have had a chance to manipulate the block list. You can also set
 * $block->content here, which will override the content of the block and prevent
 * hook_block_view() from running.','params_docs' => '
 *
 * @param $blocks
 *   An array of $blocks, keyed by the block ID.','signature' => 'hook_block_list_alter(&$blocks)','sample_code' => '  global $language, $theme_key;

  // This example shows how to achieve language specific visibility setting for
  // blocks.

  $result = db_query(\'SELECT module, delta, language FROM {my_table}\');
  $block_languages = array();
  foreach ($result as $record) {
    $block_languages[$record->module][$record->delta][$record->language] = TRUE;
  }

  foreach ($blocks as $key => $block) {
    // Any module using this alter should inspect the data before changing it,
    // to ensure it is what they expect.
    if (!isset($block->theme) || !isset($block->status) || $block->theme != $theme_key || $block->status != 1) {
      // This block was added by a contrib module, leave it in the list.
      continue;
    }

    if (!isset($block_languages[$block->module][$block->delta])) {
      // No language setting for this block, leave it in the list.
      continue;
    }

    if (!isset($block_languages[$block->module][$block->delta][$language->language])) {
      // This block should not be displayed with the active language, remove
      // from the list.
      unset($blocks[$key]);
    }
  }'),
  array('id' => '104','drupal_version' => '7','name' => 'hook_block_save','link' => 'http://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_save/7','short_description' => 'Save the configuration options from hook_block_configure().','description' => 'Save the configuration options from hook_block_configure(). This hook allows you to save the block-specific configuration settings
defined within your hook_block_configure().','documentation' => '
 * Save the configuration options from hook_block_configure(). This hook allows
 * you to save the block-specific configuration settings defined within your
 * hook_block_configure().','params_docs' => '
 *
 * @param $delta
 *   Which block is being configured. This is a unique identifier for the block
 *   within the module, defined in.
 * @param $edit
 *   The submitted form data from the configuration form.','signature' => 'hook_block_save($delta = \'\', $edit = array())','sample_code' => '  // This example comes from node.module.
  if ($delta == \'recent\') {
    variable_set(\'node_recent_block_count\', $edit[\'node_recent_block_count\']);
  }'),
  array('id' => '105','drupal_version' => '7','name' => 'hook_block_view','link' => 'http://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_view/7','short_description' => 'Return a rendered or renderable view of a block.','description' => 'Return a rendered or renderable view of a block.','documentation' => '
 * Return a rendered or renderable view of a block.','params_docs' => '
 *
 * @param $delta
 *   Which block to render. This is a unique identifier for the block within the
 *   module, defined in.
 *
 * @return
 *   An array containing the following elements: subject: The default localized
 *   title of the block. If the block does not have a default title, this should
 *   be set to NULL. content: The content of the block\'s body. This may be a
 *   renderable array (preferable) or a string containing rendered HTML content.
 *   For a detailed usage example, see block_example.module.','signature' => 'hook_block_view($delta = \'\')','sample_code' => '  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case \'syndicate\':
      $block[\'subject\'] = t(\'Syndicate\');
      $block[\'content\'] = array(
        \'#theme\' => \'feed_icon\',
        \'#url\' => \'rss.xml\',
        \'#title\' => t(\'Syndicate\'),
      );
      break;

    case \'recent\':
      if (user_access(\'access content\')) {
        $block[\'subject\'] = t(\'Recent content\');
        if ($nodes = node_get_recent(variable_get(\'node_recent_block_count\', 10))) {
          $block[\'content\'] = array(
            \'#theme\' => \'node_recent_block\',
            \'#nodes\' => $nodes,
          );
        }
        else {
          $block[\'content\'] = t(\'No content available.\');
        }
      }
      break;
  }
  return $block;'),
  array('id' => '106','drupal_version' => '7','name' => 'hook_block_view_alter','link' => 'http://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_view_alter/7','short_description' => 'Perform alterations to the content of a block.','description' => 'Perform alterations to the content of a block. This hook allows you to modify any data returned by hook_block_view(). Note that instead of hook_block_view_alter(), which is called for all
blocks, you can also use hook_block_view_MODULE_DELTA_alter() to alter a
specific block.','documentation' => '
 * Perform alterations to the content of a block. This hook allows you to modify
 * any data returned by hook_block_view(). Note that instead of
 * hook_block_view_alter(), which is called for all blocks, you can also use
 * hook_block_view_MODULE_DELTA_alter() to alter a specific block.','params_docs' => '
 *
 * @param $data
 *   An array of data, as returned from the subject: The default localized title
 *   of the block. content: Either a string or a renderable array representing
 *   the content of the block. You should check that the content is an array
 *   before trying to modify parts of the renderable structure.
 * @param $block
 *   The block object, as loaded from the database, having the main properties:
 *   module: The name of the module that defined the block. delta: The unique
 *   identifier for the block within that module, as defined in
 *   hook_block_info().','signature' => 'hook_block_view_alter(&$data, $block)','sample_code' => '  // Remove the contextual links on all blocks that provide them.
  if (is_array($data[\'content\']) && isset($data[\'content\'][\'#contextual_links\'])) {
    unset($data[\'content\'][\'#contextual_links\']);
  }
  // Add a theme wrapper function defined by the current module to all blocks
  // provided by the "somemodule" module.
  if (is_array($data[\'content\']) && $block->module == \'somemodule\') {
    $data[\'content\'][\'#theme_wrappers\'][] = \'mymodule_special_block\';
  }'),
  array('id' => '107','drupal_version' => '7','name' => 'hook_block_view_MODULE_DELTA_alter','link' => 'http://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_view_MODULE_DELTA_alter/7','short_description' => 'Perform alterations to a specific block.','description' => 'Perform alterations to a specific block. Modules can implement hook_block_view_MODULE_DELTA_alter() to modify a
specific block, rather than implementing hook_block_view_alter().','documentation' => '
 * Perform alterations to a specific block. Modules can implement
 * hook_block_view_MODULE_DELTA_alter() to modify a specific block, rather than
 * implementing hook_block_view_alter().','params_docs' => '
 *
 * @param $data
 *   An array of data, as returned from the subject: The localized title of the
 *   block. content: Either a string or a renderable array representing the
 *   content of the block. You should check that the content is an array before
 *   trying to modify parts of the renderable structure.
 * @param $block
 *   The block object, as loaded from the database, having the main properties:
 *   module: The name of the module that defined the block. delta: The unique
 *   identifier for the block within that module, as defined in
 *   hook_block_info().','signature' => 'hook_block_view_MODULE_DELTA_alter(&$data, $block)','sample_code' => '  // This code will only run for a specific block. For example, if MODULE_DELTA
  // in the function definition above is set to "mymodule_somedelta", the code
  // will only run on the "somedelta" block provided by the "mymodule" module.

  // Change the title of the "somedelta" block provided by the "mymodule"
  // module.
  $data[\'subject\'] = t(\'New title of the block\');'),
  array('id' => '108','drupal_version' => '7','name' => 'hook_boot','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_boot/7','short_description' => 'Perform setup tasks for all page requests.','description' => 'Perform setup tasks for all page requests. This hook is run at the beginning of the page request. It is typically
used to set up global parameters that are needed later in the request. Only use this hook if your code must run even for cached page views. This
hook is called before the theme, modules, or most include files are loaded
into memory. It happens while Drupal is still in bootstrap mode.','documentation' => '
 * Perform setup tasks for all page requests. This hook is run at the beginning
 * of the page request. It is typically used to set up global parameters that are
 * needed later in the request. Only use this hook if your code must run even for
 * cached page views. This hook is called before the theme, modules, or most
 * include files are loaded into memory. It happens while Drupal is still in
 * bootstrap mode.','params_docs' => '','signature' => 'hook_boot()','sample_code' => '  // We need user_access() in the shutdown function. Make sure it gets loaded.
  drupal_load(\'module\', \'user\');
  drupal_register_shutdown_function(\'devel_shutdown\');'),
  array('id' => '109','drupal_version' => '7','name' => 'hook_comment_delete','link' => 'http://api.drupal.org/api/drupal/modules!comment!comment.api.php/function/hook_comment_delete/7','short_description' => 'The comment is being deleted by the moderator.','description' => 'The comment is being deleted by the moderator.','documentation' => '
 * The comment is being deleted by the moderator.','params_docs' => '
 *
 * @param $comment
 *   Passes in the comment the action is being performed on.','signature' => 'hook_comment_delete($comment)','sample_code' => '  drupal_set_message(t(\'Comment: @subject has been deleted\', array(\'@subject\' => $comment->subject)));'),
  array('id' => '110','drupal_version' => '7','name' => 'hook_comment_insert','link' => 'http://api.drupal.org/api/drupal/modules!comment!comment.api.php/function/hook_comment_insert/7','short_description' => 'The comment is being inserted.','description' => 'The comment is being inserted.','documentation' => '
 * The comment is being inserted.','params_docs' => '
 *
 * @param $comment
 *   The comment object.','signature' => 'hook_comment_insert($comment)','sample_code' => '  // Reindex the node when comments are added.
  search_touch_node($comment->nid);'),
  array('id' => '111','drupal_version' => '7','name' => 'hook_comment_load','link' => 'http://api.drupal.org/api/drupal/modules!comment!comment.api.php/function/hook_comment_load/7','short_description' => 'Comments are being loaded from the database.','description' => 'Comments are being loaded from the database.','documentation' => '
 * Comments are being loaded from the database.','params_docs' => '
 *
 * @param $comments
 *   An array of comment objects indexed by cid.','signature' => 'hook_comment_load($comments)','sample_code' => '  $result = db_query(\'SELECT cid, foo FROM {mytable} WHERE cid IN (:cids)\', array(\':cids\' => array_keys($comments)));
  foreach ($result as $record) {
    $comments[$record->cid]->foo = $record->foo;
  }'),
  array('id' => '112','drupal_version' => '7','name' => 'hook_comment_presave','link' => 'http://api.drupal.org/api/drupal/modules!comment!comment.api.php/function/hook_comment_presave/7','short_description' => 'The comment passed validation and is about to be saved.','description' => 'The comment passed validation and is about to be saved. Modules may make changes to the comment before it is saved to the database.','documentation' => '
 * The comment passed validation and is about to be saved. Modules may make
 * changes to the comment before it is saved to the database.','params_docs' => '
 *
 * @param $comment
 *   The comment object.','signature' => 'hook_comment_presave($comment)','sample_code' => '  // Remove leading & trailing spaces from the comment subject.
  $comment->subject = trim($comment->subject);'),
  array('id' => '113','drupal_version' => '7','name' => 'hook_comment_publish','link' => 'http://api.drupal.org/api/drupal/modules!comment!comment.api.php/function/hook_comment_publish/7','short_description' => 'The comment is being published by the moderator.','description' => 'The comment is being published by the moderator.','documentation' => '
 * The comment is being published by the moderator.','params_docs' => '
 *
 * @param $comment
 *   Passes in the comment the action is being performed on.','signature' => 'hook_comment_publish($comment)','sample_code' => '  drupal_set_message(t(\'Comment: @subject has been published\', array(\'@subject\' => $comment->subject)));'),
  array('id' => '114','drupal_version' => '7','name' => 'hook_comment_unpublish','link' => 'http://api.drupal.org/api/drupal/modules!comment!comment.api.php/function/hook_comment_unpublish/7','short_description' => 'The comment is being unpublished by the moderator.','description' => 'The comment is being unpublished by the moderator.','documentation' => '
 * The comment is being unpublished by the moderator.','params_docs' => '
 *
 * @param $comment
 *   Passes in the comment the action is being performed on.','signature' => 'hook_comment_unpublish($comment)','sample_code' => '  drupal_set_message(t(\'Comment: @subject has been unpublished\', array(\'@subject\' => $comment->subject)));'),
  array('id' => '115','drupal_version' => '7','name' => 'hook_comment_update','link' => 'http://api.drupal.org/api/drupal/modules!comment!comment.api.php/function/hook_comment_update/7','short_description' => 'The comment is being updated.','description' => 'The comment is being updated.','documentation' => '
 * The comment is being updated.','params_docs' => '
 *
 * @param $comment
 *   The comment object.','signature' => 'hook_comment_update($comment)','sample_code' => '  // Reindex the node when comments are updated.
  search_touch_node($comment->nid);'),
  array('id' => '116','drupal_version' => '7','name' => 'hook_comment_view','link' => 'http://api.drupal.org/api/drupal/modules!comment!comment.api.php/function/hook_comment_view/7','short_description' => 'The comment is being viewed. This hook can be used to add additional data to the comment before theming.','description' => 'The comment is being viewed. This hook can be used to add additional data to the comment before theming.','documentation' => '
 * The comment is being viewed. This hook can be used to add additional data to
 * the comment before theming.','params_docs' => '
 *
 * @param $comment
 *   Passes in the comment the action is being performed on.
 * @param $view_mode
 *   View mode, e.g. \'full\', \'teaser\'...
 * @param $langcode
 *   The language code used for rendering.','signature' => 'hook_comment_view($comment, $view_mode, $langcode)','sample_code' => '  // how old is the comment
  $comment->time_ago = time() - $comment->changed;'),
  array('id' => '117','drupal_version' => '7','name' => 'hook_comment_view_alter','link' => 'http://api.drupal.org/api/drupal/modules!comment!comment.api.php/function/hook_comment_view_alter/7','short_description' => 'The comment was built; the module may modify the structured content.','description' => 'The comment was built; the module may modify the structured content. This hook is called after the content has been assembled in a structured array
and may be used for doing processing which requires that the complete comment
content structure has been built. If the module wishes to act on the rendered HTML of the comment rather than the
structured content array, it may use this hook to add a #post_render callback.
Alternatively, it could also implement hook_preprocess_comment(). See
drupal_render() and theme() documentation respectively for details.','documentation' => '
 * The comment was built; the module may modify the structured content. This hook
 * is called after the content has been assembled in a structured array and may
 * be used for doing processing which requires that the complete comment content
 * structure has been built. If the module wishes to act on the rendered HTML of
 * the comment rather than the structured content array, it may use this hook to
 * add a #post_render callback. Alternatively, it could also implement
 * hook_preprocess_comment(). See drupal_render() and theme() documentation
 * respectively for details.','params_docs' => '
 *
 * @param $build
 *   A renderable array representing the comment.','signature' => 'hook_comment_view_alter(&$build)','sample_code' => '  // Check for the existence of a field added by another module.
  if ($build[\'#view_mode\'] == \'full\' && isset($build[\'an_additional_field\'])) {
    // Change its weight.
    $build[\'an_additional_field\'][\'#weight\'] = -10;
  }

  // Add a #post_render callback to act on the rendered HTML of the comment.
  $build[\'#post_render\'][] = \'my_module_comment_post_render\';'),
  array('id' => '118','drupal_version' => '7','name' => 'hook_contextual_links_view_alter','link' => 'http://api.drupal.org/api/drupal/modules!contextual!contextual.api.php/function/hook_contextual_links_view_alter/7','short_description' => 'Alter a contextual links element before it is rendered.','description' => 'Alter a contextual links element before it is rendered. This hook is invoked by contextual_pre_render_links(). The renderable array
of #type \'contextual_links\', containing the entire contextual links data that
is passed in by reference. Further links may be added or existing links can
be altered.','documentation' => '
 * Alter a contextual links element before it is rendered. This hook is invoked
 * by contextual_pre_render_links(). The renderable array of #type
 * \'contextual_links\', containing the entire contextual links data that is passed
 * in by reference. Further links may be added or existing links can be altered.','params_docs' => '
 *
 * @param $element
 *   A renderable array representing the contextual links.
 * @param $items
 *   An associative array containing the original contextual link items, as
 *   generated by.','signature' => 'hook_contextual_links_view_alter(&$element, $items)','sample_code' => '  // Add another class to all contextual link lists to facilitate custom
  // styling.
  $element[\'#attributes\'][\'class\'][] = \'custom-class\';'),
  array('id' => '119','drupal_version' => '7','name' => 'hook_countries_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_countries_alter/7','short_description' => 'Alter the default country list.','description' => 'Alter the default country list.','documentation' => '
 * Alter the default country list.','params_docs' => '
 *
 * @param $countries
 *   The associative array of countries keyed by ISO 3166-1 country code.','signature' => 'hook_countries_alter(&$countries)','sample_code' => '  // Elbonia is now independent, so add it to the country list.
  $countries[\'EB\'] = \'Elbonia\';'),
  array('id' => '120','drupal_version' => '7','name' => 'hook_cron','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_cron/7','short_description' => 'Perform periodic actions.','description' => 'Perform periodic actions. Modules that require some commands to be executed periodically can
implement hook_cron(). The engine will then call the hook whenever a cron
run happens, as defined by the administrator. Typical tasks managed by
hook_cron() are database maintenance, backups, recalculation of settings
or parameters, automated mailing, and retrieving remote data. Short-running or non-resource-intensive tasks can be executed directly in
the hook_cron() implementation. Long-running tasks and tasks that could time out, such as retrieving remote
data, sending email, and intensive file tasks, should use the queue API
instead of executing the tasks directly. To do this, first define one or
more queues via hook_cron_queue_info(). Then, add items that need to be
processed to the defined queues.','documentation' => '
 * Perform periodic actions. Modules that require some commands to be executed
 * periodically can implement hook_cron(). The engine will then call the hook
 * whenever a cron run happens, as defined by the administrator. Typical tasks
 * managed by hook_cron() are database maintenance, backups, recalculation of
 * settings or parameters, automated mailing, and retrieving remote data.
 * Short-running or non-resource-intensive tasks can be executed directly in the
 * hook_cron() implementation.','params_docs' => '','signature' => 'hook_cron()','sample_code' => '  // Short-running operation example, not using a queue:
  // Delete all expired records since the last cron run.
  $expires = variable_get(\'mymodule_cron_last_run\', REQUEST_TIME);
  db_delete(\'mymodule_table\')
    ->condition(\'expires\', $expires, \'>=\')
    ->execute();
  variable_set(\'mymodule_cron_last_run\', REQUEST_TIME);

  // Long-running operation example, leveraging a queue:
  // Fetch feeds from other sites.
  $result = db_query(\'SELECT * FROM {aggregator_feed} WHERE checked + refresh < :time AND refresh <> :never\', array(
    \':time\' => REQUEST_TIME,
    \':never\' => AGGREGATOR_CLEAR_NEVER,
  ));
  $queue = DrupalQueue::get(\'aggregator_feeds\');
  foreach ($result as $feed) {
    $queue->createItem($feed);
  }'),
  array('id' => '121','drupal_version' => '7','name' => 'hook_cron_queue_info','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_cron_queue_info/7','short_description' => 'Declare queues holding items that need to be run periodically.','description' => 'Declare queues holding items that need to be run periodically. While there can be only one hook_cron() process running at the same time,
there can be any number of processes defined here running. Because of
this, long running tasks are much better suited for this API. Items queued
in hook_cron() might be processed in the same cron run if there are not many
items in the queue, otherwise it might take several requests, which can be
run in parallel.','documentation' => '
 * Declare queues holding items that need to be run periodically. While there can
 * be only one hook_cron() process running at the same time, there can be any
 * number of processes defined here running. Because of this, long running tasks
 * are much better suited for this API. Items queued in hook_cron() might be
 * processed in the same cron run if there are not many items in the queue,
 * otherwise it might take several requests, which can be run in parallel.','params_docs' => '
 *
 * @return
 *   An associative array where the key is the queue name and the value is again
 *   an associative array. Possible keys are: \'worker callback\': The name of the
 *   function to call. It will be called with one argument, the item created via
 *   DrupalQueue::createItem() in hook_cron(). \'time\': (optional) How much time
 *   Drupal should spend on calling this worker in seconds. Defaults to 15.','signature' => 'hook_cron_queue_info()','sample_code' => '  $queues[\'aggregator_feeds\'] = array(
    \'worker callback\' => \'aggregator_refresh\',
    \'time\' => 60,
  );
  return $queues;'),
  array('id' => '122','drupal_version' => '7','name' => 'hook_cron_queue_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_cron_queue_info_alter/7','short_description' => 'Alter cron queue information before cron runs.','description' => 'Alter cron queue information before cron runs. Called by drupal_cron_run() to allow modules to alter cron queue settings
before any jobs are processesed.','documentation' => '
 * Alter cron queue information before cron runs. Called by drupal_cron_run() to
 * allow modules to alter cron queue settings before any jobs are processesed.','params_docs' => '
 *
 * @param array $queues
 *   An array of cron queue information.','signature' => 'hook_cron_queue_info_alter(&$queues)','sample_code' => '  // This site has many feeds so let\'s spend 90 seconds on each cron run
  // updating feeds instead of the default 60.
  $queues[\'aggregator_feeds\'][\'time\'] = 90;'),
  array('id' => '123','drupal_version' => '7','name' => 'hook_css_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_css_alter/7','short_description' => 'Alter CSS files before they are output on the page.','description' => 'Alter CSS files before they are output on the page.','documentation' => '
 * Alter CSS files before they are output on the page.','params_docs' => '
 *
 * @param $css
 *   An array of all CSS items (files and inline CSS) being requested on the
 *   page.','signature' => 'hook_css_alter(&$css)','sample_code' => '  // Remove defaults.css file.
  unset($css[drupal_get_path(\'module\', \'system\') . \'/defaults.css\']);'),
  array('id' => '124','drupal_version' => '7','name' => 'hook_custom_theme','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_custom_theme/7','short_description' => 'Return the machine-readable name of the theme to use for the current page.','description' => 'Return the machine-readable name of the theme to use for the current page. This hook can be used to dynamically set the theme for the current page
request. It should be used by modules which need to override the theme
based on dynamic conditions (for example, a module which allows the theme to
be set based on the current user\'s role). The return value of this hook will
be used on all pages except those which have a valid per-page or per-section
theme set via a theme callback function in hook_menu(); the themes on those
pages can only be overridden using hook_menu_alter(). Note that returning different themes for the same path may not work with page
caching. This is most likely to be a problem if an anonymous user on a given
path could have different themes returned under different conditions. Since only one theme can be used at a time, the last (i.e., highest
weighted) module which returns a valid theme name from this hook will
prevail.','documentation' => '
 * Return the machine-readable name of the theme to use for the current page.
 * This hook can be used to dynamically set the theme for the current page
 * request. It should be used by modules which need to override the theme based
 * on dynamic conditions (for example, a module which allows the theme to be set
 * based on the current user\'s role). The return value of this hook will be used
 * on all pages except those which have a valid per-page or per-section theme set
 * via a theme callback function in hook_menu(); the themes on those pages can
 * only be overridden using ...','params_docs' => '
 *
 * @return
 *   The machine-readable name of the theme that should be used for the current
 *   page request. The value returned from this function will only have an effect
 *   if it corresponds to a currently-active theme on the site.','signature' => 'hook_custom_theme()','sample_code' => '  // Allow the user to request a particular theme via a query parameter.
  if (isset($_GET[\'theme\'])) {
    return $_GET[\'theme\'];
  }'),
  array('id' => '125','drupal_version' => '7','name' => 'hook_dashboard_regions','link' => 'http://api.drupal.org/api/drupal/modules!dashboard!dashboard.api.php/function/hook_dashboard_regions/7','short_description' => 'Add regions to the dashboard.','description' => 'Add regions to the dashboard.','documentation' => '
 * Add regions to the dashboard.','params_docs' => '
 *
 * @return
 *   An array whose keys are the names of the dashboard regions and whose values
 *   are the titles that will be displayed in the blocks administration
 *   interface. The keys are also used as theme wrapper functions.','signature' => 'hook_dashboard_regions()','sample_code' => '  // Define a new dashboard region. Your module can also then define
  // theme_mymodule_dashboard_region() as a theme wrapper function to control
  // the region\'s appearance.
  return array(\'mymodule_dashboard_region\' => "My module\'s dashboard region");'),
  array('id' => '126','drupal_version' => '7','name' => 'hook_dashboard_regions_alter','link' => 'http://api.drupal.org/api/drupal/modules!dashboard!dashboard.api.php/function/hook_dashboard_regions_alter/7','short_description' => 'Alter dashboard regions provided by modules.','description' => 'Alter dashboard regions provided by modules.','documentation' => '
 * Alter dashboard regions provided by modules.','params_docs' => '
 *
 * @param $regions
 *   An array containing all dashboard regions, in the format provided by.','signature' => 'hook_dashboard_regions_alter($regions)','sample_code' => '  // Remove the sidebar region defined by the core dashboard module.
  unset($regions[\'dashboard_sidebar\']);'),
  array('id' => '127','drupal_version' => '7','name' => 'hook_date_formats','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_date_formats/7','short_description' => 'Define additional date formats.','description' => 'Define additional date formats. This hook is used to define the PHP date format strings that can be assigned
to date types in the administrative interface. A module can provide date
format strings for the core-provided date types (\'long\', \'medium\', and
\'short\'), or for date types defined in hook_date_format_types() by itself
or another module. Since date formats can be locale-specific, you can specify the locales that
each date format string applies to. There may be more than one locale for a
format. There may also be more than one format for the same locale. For
example d/m/Y and Y/m/d work equally well in some locales. You may wish to
define some additional date formats that aren\'t specific to any one locale,
for example, "Y m". For these cases, the \'locales\' component of the return
value should be omitted. Providing a date format here does not normally assign the format to be
used with the associated date type -- a user has to choose a format for each
date type in the administrative interface. There is one exception: locale
initialization chooses a locale-specific format for the three core-provided
types (see locale_get_localized_date_format() for details). If your module
needs to ensure that a date type it defines has a format associated with it,
call variable_set(\'date_format_\' . $type, $format); where $type is the machine-readable name defined in hook_date_format_types(),
and $format is a PHP date format string.','documentation' => '
 * Define additional date formats. This hook is used to define the PHP date
 * format strings that can be assigned to date types in the administrative
 * interface. A module can provide date format strings for the core-provided date
 * types (\'long\', \'medium\', and \'short\'), or for date types defined in
 * hook_date_format_types() by itself or another module. Since date formats can
 * be locale-specific, you can specify the locales that each date format string
 * applies to. There may be more than one locale for a format.','params_docs' => '
 *
 * @return
 *   A list of date formats to offer as choices in the administrative interface.
 *   Each date format is a keyed array consisting of three elements: \'type\': The
 *   date type name that this format can be used with, as declared in an
 *   implementation of hook_date_format_types(). \'format\': A PHP date format
 *   string to use when formatting dates. It can contain any of the formatting
 *   options described at http://php.net/manual/en/function.date.php \'locales\':
 *   (optional) An array of 2 and 5 character locale codes, defining which
 *   locales this format applies to (for example,.','signature' => 'hook_date_formats()','sample_code' => '  return array(
    array(
      \'type\' => \'mymodule_extra_long\',
      \'format\' => \'l jS F Y H:i:s e\',
      \'locales\' => array(\'en-ie\'),
    ),
    array(
      \'type\' => \'mymodule_extra_long\',
      \'format\' => \'l jS F Y h:i:sa\',
      \'locales\' => array(\'en\', \'en-us\'),
    ),
    array(
      \'type\' => \'short\',
      \'format\' => \'F Y\',
      \'locales\' => array(),
    ),
  );'),
  array('id' => '128','drupal_version' => '7','name' => 'hook_date_formats_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_date_formats_alter/7','short_description' => 'Alter date formats declared by another module.','description' => 'Alter date formats declared by another module. Called by _system_date_format_types_build() to allow modules to alter the
return values from implementations of hook_date_formats().','documentation' => '
 * Alter date formats declared by another module. Called by
 * _system_date_format_types_build() to allow modules to alter the return values
 * from implementations of hook_date_formats().','params_docs' => '','signature' => 'hook_date_formats_alter(&$formats)','sample_code' => '  foreach ($formats as $id => $format) {
    $formats[$id][\'locales\'][] = \'en-ca\';
  }'),
  array('id' => '129','drupal_version' => '7','name' => 'hook_date_format_types','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_date_format_types/7','short_description' => 'Define additional date types.','description' => 'Define additional date types. Next to the \'long\', \'medium\' and \'short\' date types defined in core, any
module can define additional types that can be used when displaying dates,
by implementing this hook. A date type is basically just a name for a date
format. Date types are used in the administration interface: a user can assign
date format types defined in hook_date_formats() to date types defined in
this hook. Once a format has been assigned by a user, the machine name of a
type can be used in the format_date() function to format a date using the
chosen formatting. To define a date type in a module and make sure a format has been assigned to
it, without requiring a user to visit the administrative interface, use variable_set(\'date_format_\' . $type, $format); where $type is the machine-readable name defined here, and $format is a PHP
date format string. To avoid namespace collisions with date types defined by other modules, it is
recommended that each date type starts with the module name. A date type
can consist of letters, numbers and underscores.','documentation' => '
 * Define additional date types. Next to the \'long\', \'medium\' and \'short\' date
 * types defined in core, any module can define additional types that can be used
 * when displaying dates, by implementing this hook. A date type is basically
 * just a name for a date format. Date types are used in the administration
 * interface: a user can assign date format types defined in hook_date_formats()
 * to date types defined in this hook. Once a format has been assigned by a user,
 * the machine name of a type can be used in the format_date() function to format
 * a date using.','params_docs' => '
 *
 * @return
 *   An array of date types where the keys are the machine-readable names and the
 *   values are the human-readable labels.','signature' => 'hook_date_format_types()','sample_code' => '  // Define the core date format types.
  return array(
    \'long\' => t(\'Long\'),
    \'medium\' => t(\'Medium\'),
    \'short\' => t(\'Short\'),
  );'),
  array('id' => '130','drupal_version' => '7','name' => 'hook_date_format_types_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_date_format_types_alter/7','short_description' => 'Modify existing date types.','description' => 'Modify existing date types. Allows other modules to modify existing date types like \'long\'. Called by
_system_date_format_types_build(). For instance, A module may use this hook
to apply settings across all date types, such as locking all date types so
they appear to be provided by the system.','documentation' => '
 * Modify existing date types. Allows other modules to modify existing date types
 * like \'long\'. Called by _system_date_format_types_build(). For instance, A
 * module may use this hook to apply settings across all date types, such as
 * locking all date types so they appear to be provided by the system.','params_docs' => '
 *
 * @param $types
 *   A list of date types. Each date type is keyed by the machine-readable name
 *   and the values are associative arrays containing: is_new: Set to FALSE to
 *   override previous settings. module: The name of the module that created the
 *   date type. type: The machine-readable date type name. title: The
 *   human-readable date type name. locked: Specifies that the date type is
 *   system-provided.','signature' => 'hook_date_format_types_alter(&$types)','sample_code' => '  foreach ($types as $name => $type) {
    $types[$name][\'locked\'] = 1;
  }'),
  array('id' => '131','drupal_version' => '7','name' => 'hook_delete','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_delete/7','short_description' => 'Respond to node deletion.','description' => 'Respond to node deletion. This hook is invoked only on the module that defines the node\'s content type
(use hook_node_delete() to respond to all node deletions). This hook is invoked from node_delete_multiple() after the node has been
removed from the node table in the database, before hook_node_delete() is
invoked, and before field_attach_delete() is called.','documentation' => '
 * Respond to node deletion. This hook is invoked only on the module that defines
 * the node\'s content type (use hook_node_delete() to respond to all node
 * deletions). This hook is invoked from node_delete_multiple() after the node
 * has been removed from the node table in the database, before
 * hook_node_delete() is invoked, and before field_attach_delete() is called.','params_docs' => '
 *
 * @param $node
 *   The node that is being deleted.','signature' => 'hook_delete($node)','sample_code' => '  db_delete(\'mytable\')
    ->condition(\'nid\', $node->nid)
    ->execute();'),
  array('id' => '132','drupal_version' => '7','name' => 'hook_disable','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_disable/7','short_description' => 'Perform necessary actions before module is disabled.','description' => 'Perform necessary actions before module is disabled. The hook is called every time the module is disabled. It should be
implemented in the module\'s .install file. The implementation can rely
on the .module file being loaded.','documentation' => '
 * Perform necessary actions before module is disabled. The hook is called every
 * time the module is disabled. It should be implemented in the module\'s .install
 * file. The implementation can rely on the .module file being loaded.','params_docs' => '','signature' => 'hook_disable()','sample_code' => '  mymodule_cache_rebuild();'),
  array('id' => '133','drupal_version' => '7','name' => 'hook_drupal_goto_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_drupal_goto_alter/7','short_description' => 'Change the page the user is sent to by drupal_goto().','description' => 'Change the page the user is sent to by drupal_goto().','documentation' => '
 * Change the page the user is sent to by drupal_goto().','params_docs' => '
 *
 * @param $path
 *   A Drupal path or a full URL.
 * @param $options
 *   An associative array of additional URL options to pass to.
 * @param $http_response_code
 *   The HTTP status code to use for the redirection. See.','signature' => 'hook_drupal_goto_alter(&$path, &$options, &$http_response_code)','sample_code' => '  // A good addition to misery module.
  $http_response_code = 500;'),
  array('id' => '134','drupal_version' => '7','name' => 'hook_element_info','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_element_info/7','short_description' => 'Allows modules to declare their own Forms API element types and specify their default values.','description' => 'Allows modules to declare their own Forms API element types and specify their
default values. This hook allows modules to declare their own form element types and to
specify their default values. The values returned by this hook will be
merged with the elements returned by hook_form() implementations and so
can return defaults for any Form APIs keys in addition to those explicitly
mentioned below. Each of the form element types defined by this hook is assumed to have
a matching theme function, e.g. theme_elementtype(), which should be
registered with hook_theme() as normal. For more information about custom element types see the explanation at
http://drupal.org/node/169815.','documentation' => '
 * Allows modules to declare their own Forms API element types and specify their
 * default values. This hook allows modules to declare their own form element
 * types and to specify their default values. The values returned by this hook
 * will be merged with the elements returned by hook_form() implementations and
 * so can return defaults for any Form APIs keys in addition to those explicitly
 * mentioned below. Each of the form element types defined by this hook is
 * assumed to have a matching theme function, e.g.','params_docs' => '
 *
 * @return
 *   An associative array describing the element types being defined. The array
 *   contains a sub-array for each element type, with the machine-readable type
 *   name as the key. Each sub-array has a number of possible attributes:
 *   "#input": boolean indicating whether or not this element carries a value
 *   (even if it\'s hidden). "#process": array of callback functions taking
 *   $element, $form_state, and $complete_form. "#after_build": array of callback
 *   functions taking $element and $form_state. "#validate": array of callback
 *   functions taking $form and $form_state.','signature' => 'hook_element_info()','sample_code' => '  $types[\'filter_format\'] = array(
    \'#input\' => TRUE,
  );
  return $types;'),
  array('id' => '135','drupal_version' => '7','name' => 'hook_element_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_element_info_alter/7','short_description' => 'Alter the element type information returned from modules.','description' => 'Alter the element type information returned from modules. A module may implement this hook in order to alter the element type defaults
defined by a module.','documentation' => '
 * Alter the element type information returned from modules. A module may
 * implement this hook in order to alter the element type defaults defined by a
 * module.','params_docs' => '
 *
 * @param $type
 *   All element type defaults as collected by.','signature' => 'hook_element_info_alter(&$type)','sample_code' => '  // Decrease the default size of textfields.
  if (isset($type[\'textfield\'][\'#size\'])) {
    $type[\'textfield\'][\'#size\'] = 40;
  }'),
  array('id' => '136','drupal_version' => '7','name' => 'hook_enable','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_enable/7','short_description' => 'Perform necessary actions after module is enabled.','description' => 'Perform necessary actions after module is enabled. The hook is called every time the module is enabled. It should be
implemented in the module\'s .install file. The implementation can
rely on the .module file being loaded.','documentation' => '
 * Perform necessary actions after module is enabled. The hook is called every
 * time the module is enabled. It should be implemented in the module\'s .install
 * file. The implementation can rely on the .module file being loaded.','params_docs' => '','signature' => 'hook_enable()','sample_code' => '  mymodule_cache_rebuild();'),
  array('id' => '137','drupal_version' => '7','name' => 'hook_entity_delete','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_delete/7','short_description' => 'Act on entities when deleted.','description' => 'Act on entities when deleted.','documentation' => '
 * Act on entities when deleted.','params_docs' => '
 *
 * @param $entity
 *   The entity object.
 * @param $type
 *   The type of entity being deleted (i.e. node, user, comment).','signature' => 'hook_entity_delete($entity, $type)','sample_code' => '  // Delete the entity\'s entry from a fictional table of all entities.
  $info = entity_get_info($type);
  list($id) = entity_extract_ids($type, $entity);
  db_delete(\'example_entity\')
    ->condition(\'type\', $type)
    ->condition(\'id\', $id)
    ->execute();'),
  array('id' => '138','drupal_version' => '7','name' => 'hook_entity_info','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_info/7','short_description' => 'Inform the base system and the Field API about one or more entity types.','description' => 'Inform the base system and the Field API about one or more entity types. Inform the system about one or more entity types (i.e., object types that
can be loaded via entity_load() and, optionally, to which fields can be
attached).','documentation' => '
 * Inform the base system and the Field API about one or more entity types.
 * Inform the system about one or more entity types (i.e., object types that can
 * be loaded via entity_load() and, optionally, to which fields can be attached).','params_docs' => '
 *
 * @return
 *   An array whose keys are entity type names and whose values identify
 *   properties of those types that the system needs to know about: label: The
 *   human-readable name of the type. controller class: The name of the class
 *   that is used to load the objects. The class has to implement the
 *   DrupalEntityControllerInterface interface. Leave blank to use the
 *   DrupalDefaultEntityController implementation. base table: (used by
 *   DrupalDefaultEntityController) The name of the entity type\'s base table.
 *   revision table: The name of the entity type\'s revision table (if any).','signature' => 'hook_entity_info()','sample_code' => '  $return = array(
    \'node\' => array(
      \'label\' => t(\'Node\'),
      \'controller class\' => \'NodeController\',
      \'base table\' => \'node\',
      \'revision table\' => \'node_revision\',
      \'uri callback\' => \'node_uri\',
      \'fieldable\' => TRUE,
      \'translation\' => array(
        \'locale\' => TRUE,
      ),
      \'entity keys\' => array(
        \'id\' => \'nid\',
        \'revision\' => \'vid\',
        \'bundle\' => \'type\',
      ),
      \'bundle keys\' => array(
        \'bundle\' => \'type\',
      ),
      \'bundles\' => array(),
      \'view modes\' => array(
        \'full\' => array(
          \'label\' => t(\'Full content\'),
          \'custom settings\' => FALSE,
        ),
        \'teaser\' => array(
          \'label\' => t(\'Teaser\'),
          \'custom settings\' => TRUE,
        ),
        \'rss\' => array(
          \'label\' => t(\'RSS\'),
          \'custom settings\' => FALSE,
        ),
      ),
    ),
  );

  // Search integration is provided by node.module, so search-related
  // view modes for nodes are defined here and not in search.module.
  if (module_exists(\'search\')) {
    $return[\'node\'][\'view modes\'] += array(
      \'search_index\' => array(
        \'label\' => t(\'Search index\'),
        \'custom settings\' => FALSE,
      ),
      \'search_result\' => array(
        \'label\' => t(\'Search result\'),
        \'custom settings\' => FALSE,
      ),
    );
  }

  // Bundles must provide a human readable name so we can create help and error
  // messages, and the path to attach Field admin pages to.
  foreach (node_type_get_names() as $type => $name) {
    $return[\'node\'][\'bundles\'][$type] = array(
      \'label\' => $name,
      \'admin\' => array(
        \'path\' => \'admin/structure/types/manage/%node_type\',
        \'real path\' => \'admin/structure/types/manage/\' . str_replace(\'_\', \'-\', $type),
        \'bundle argument\' => 4,
        \'access arguments\' => array(\'administer content types\'),
      ),
    );
  }

  return $return;'),
  array('id' => '139','drupal_version' => '7','name' => 'hook_entity_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_info_alter/7','short_description' => 'Alter the entity info.','description' => 'Alter the entity info. Modules may implement this hook to alter the information that defines an
entity. All properties that are available in hook_entity_info() can be
altered here.','documentation' => '
 * Alter the entity info. Modules may implement this hook to alter the
 * information that defines an entity. All properties that are available in
 * hook_entity_info() can be altered here.','params_docs' => '
 *
 * @param $entity_info
 *   The entity info array, keyed by entity name.','signature' => 'hook_entity_info_alter(&$entity_info)','sample_code' => '  // Set the controller class for nodes to an alternate implementation of the
  // DrupalEntityController interface.
  $entity_info[\'node\'][\'controller class\'] = \'MyCustomNodeController\';'),
  array('id' => '140','drupal_version' => '7','name' => 'hook_entity_insert','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_insert/7','short_description' => 'Act on entities when inserted.','description' => 'Act on entities when inserted.','documentation' => '
 * Act on entities when inserted.','params_docs' => '
 *
 * @param $entity
 *   The entity object.
 * @param $type
 *   The type of entity being inserted (i.e. node, user, comment).','signature' => 'hook_entity_insert($entity, $type)','sample_code' => '  // Insert the new entity into a fictional table of all entities.
  $info = entity_get_info($type);
  list($id) = entity_extract_ids($type, $entity);
  db_insert(\'example_entity\')
    ->fields(array(
    \'type\' => $type,
    \'id\' => $id,
    \'created\' => REQUEST_TIME,
    \'updated\' => REQUEST_TIME,
  ))
    ->execute();'),
  array('id' => '141','drupal_version' => '7','name' => 'hook_entity_load','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_load/7','short_description' => 'Act on entities when loaded.','description' => 'Act on entities when loaded. This is a generic load hook called for all entity types loaded via the
entity API.','documentation' => '
 * Act on entities when loaded. This is a generic load hook called for all entity
 * types loaded via the entity API.','params_docs' => '
 *
 * @param $entities
 *   The entities keyed by entity ID.
 * @param $type
 *   The type of entities being loaded (i.e. node, user, comment).','signature' => 'hook_entity_load($entities, $type)','sample_code' => '  foreach ($entities as $entity) {
    $entity->foo = mymodule_add_something($entity, $type);
  }'),
  array('id' => '142','drupal_version' => '7','name' => 'hook_entity_prepare_view','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_prepare_view/7','short_description' => 'Act on entities as they are being prepared for view.','description' => 'Act on entities as they are being prepared for view. Allows you to operate on multiple entities as they are being prepared for
view. Only use this if attaching the data during the entity_load() phase
is not appropriate, for example when attaching other \'entity\' style objects.','documentation' => '
 * Act on entities as they are being prepared for view. Allows you to operate on
 * multiple entities as they are being prepared for view. Only use this if
 * attaching the data during the entity_load() phase is not appropriate, for
 * example when attaching other \'entity\' style objects.','params_docs' => '
 *
 * @param $entities
 *   The entities keyed by entity ID.
 * @param $type
 *   The type of entities being loaded (i.e. node, user, comment).
 * @param $langcode
 *   The language to display the entity in.','signature' => 'hook_entity_prepare_view($entities, $type, $langcode)','sample_code' => '  // Load a specific node into the user object for later theming.
  if ($type == \'user\') {
    $nodes = mymodule_get_user_nodes(array_keys($entities));
    foreach ($entities as $uid => $entity) {
      $entity->user_node = $nodes[$uid];
    }
  }'),
  array('id' => '143','drupal_version' => '7','name' => 'hook_entity_presave','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_presave/7','short_description' => 'Act on an entity before it is about to be created or updated.','description' => 'Act on an entity before it is about to be created or updated.','documentation' => '
 * Act on an entity before it is about to be created or updated.','params_docs' => '
 *
 * @param $entity
 *   The entity object.
 * @param $type
 *   The type of entity being saved (i.e. node, user, comment).','signature' => 'hook_entity_presave($entity, $type)','sample_code' => '  $entity->changed = REQUEST_TIME;'),
  array('id' => '144','drupal_version' => '7','name' => 'hook_entity_query_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_query_alter/7','short_description' => 'Alter or execute an EntityFieldQuery.','description' => 'Alter or execute an EntityFieldQuery.','documentation' => '
 * Alter or execute an EntityFieldQuery.','params_docs' => '
 *
 * @param EntityFieldQuery $query
 *   An.','signature' => 'hook_entity_query_alter($query)','sample_code' => '  $query->executeCallback = \'my_module_query_callback\';'),
  array('id' => '145','drupal_version' => '7','name' => 'hook_entity_update','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_update/7','short_description' => 'Act on entities when updated.','description' => 'Act on entities when updated.','documentation' => '
 * Act on entities when updated.','params_docs' => '
 *
 * @param $entity
 *   The entity object.
 * @param $type
 *   The type of entity being updated (i.e. node, user, comment).','signature' => 'hook_entity_update($entity, $type)','sample_code' => '  // Update the entity\'s entry in a fictional table of all entities.
  $info = entity_get_info($type);
  list($id) = entity_extract_ids($type, $entity);
  db_update(\'example_entity\')
    ->fields(array(
    \'updated\' => REQUEST_TIME,
  ))
    ->condition(\'type\', $type)
    ->condition(\'id\', $id)
    ->execute();'),
  array('id' => '146','drupal_version' => '7','name' => 'hook_entity_view','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_view/7','short_description' => 'Act on entities being assembled before rendering.','description' => 'Act on entities being assembled before rendering.','documentation' => '
 * Act on entities being assembled before rendering.','params_docs' => '
 *
 * @param $entity
 *   The entity object.
 * @param $type
 *   The type of entity being rendered (i.e. node, user, comment).
 * @param $view_mode
 *   The view mode the entity is rendered in.
 * @param $langcode
 *   The language code used for rendering.','signature' => 'hook_entity_view($entity, $type, $view_mode, $langcode)','sample_code' => '  $entity->content[\'my_additional_field\'] = array(
    \'#markup\' => $additional_field,
    \'#weight\' => 10,
    \'#theme\' => \'mymodule_my_additional_field\',
  );'),
  array('id' => '147','drupal_version' => '7','name' => 'hook_entity_view_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_entity_view_alter/7','short_description' => 'Alter the results of ENTITY_view().','description' => 'Alter the results of ENTITY_view(). This hook is called after the content has been assembled in a structured
array and may be used for doing processing which requires that the complete
entity content structure has been built. If a module wishes to act on the rendered HTML of the entity rather than the
structured content array, it may use this hook to add a #post_render
callback. Alternatively, it could also implement hook_preprocess_ENTITY().
See drupal_render() and theme() for details.','documentation' => '
 * Alter the results of ENTITY_view(). This hook is called after the content has
 * been assembled in a structured array and may be used for doing processing
 * which requires that the complete entity content structure has been built. If a
 * module wishes to act on the rendered HTML of the entity rather than the
 * structured content array, it may use this hook to add a #post_render callback.
 * Alternatively, it could also implement hook_preprocess_ENTITY(). See
 * drupal_render() and theme() for details.','params_docs' => '
 *
 * @param $build
 *   A renderable array representing the entity content.
 * @param $type
 *   The type of entity being rendered (i.e. node, user, comment).','signature' => 'hook_entity_view_alter(&$build, $type)','sample_code' => '  if ($build[\'#view_mode\'] == \'full\' && isset($build[\'an_additional_field\'])) {
    // Change its weight.
    $build[\'an_additional_field\'][\'#weight\'] = -10;

    // Add a #post_render callback to act on the rendered HTML of the entity.
    $build[\'#post_render\'][] = \'my_module_node_post_render\';
  }'),
  array('id' => '148','drupal_version' => '7','name' => 'hook_exit','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_exit/7','short_description' => 'Perform cleanup tasks.','description' => 'Perform cleanup tasks. This hook is run at the end of each page request. It is often used for
page logging and specialized cleanup. This hook MUST NOT print anything. Only use this hook if your code must run even for cached page views.
If you have code which must run once on all non-cached pages, use
hook_init() instead. That is the usual case. If you implement this hook
and see an error like \'Call to undefined function\', it is likely that
you are depending on the presence of a module which has not been loaded yet.
It is not loaded because Drupal is still in bootstrap mode.','documentation' => '
 * Perform cleanup tasks. This hook is run at the end of each page request. It is
 * often used for page logging and specialized cleanup. This hook MUST NOT print
 * anything. Only use this hook if your code must run even for cached page views.
 * If you have code which must run once on all non-cached pages, use hook_init()
 * instead. That is the usual case. If you implement this hook and see an error
 * like \'Call to undefined function\', it is likely that you are depending on the
 * presence of a module which has not been loaded yet.','params_docs' => '
 *
 * @param $destination
 *   If this hook is invoked as part of a.','signature' => 'hook_exit($destination = NULL)','sample_code' => '  db_update(\'counter\')
    ->expression(\'hits\', \'hits + 1\')
    ->condition(\'type\', 1)
    ->execute();'),
  array('id' => '149','drupal_version' => '7','name' => 'hook_field_access','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_access/7','short_description' => 'Determine whether the user has access to a given field.','description' => 'Determine whether the user has access to a given field. This hook is invoked from field_access() to let modules block access to
operations on fields. If no module returns FALSE, the operation is allowed.','documentation' => '
 * Determine whether the user has access to a given field. This hook is invoked
 * from field_access() to let modules block access to operations on fields. If no
 * module returns FALSE, the operation is allowed.','params_docs' => '
 *
 * @param $op
 *   The operation to be performed. Possible values: \'edit\', \'view\'.
 * @param $field
 *   The field on which the operation is to be performed.
 * @param $entity_type
 *   The type of $entity; for example, \'node\' or \'user\'.
 * @param $entity
 *   (optional) The entity for the operation.
 * @param $account
 *   (optional) The account to check; if not given use currently logged in user.
 *
 * @return
 *   TRUE if the operation is allowed, and FALSE if the operation is denied.','signature' => 'hook_field_access($op, $field, $entity_type, $entity, $account)','sample_code' => '  if ($field[\'field_name\'] == \'field_of_interest\' && $op == \'edit\') {
    return user_access(\'edit field of interest\', $account);
  }
  return TRUE;'),
  array('id' => '150','drupal_version' => '7','name' => 'hook_field_attach_create_bundle','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_create_bundle/7','short_description' => 'Act on field_attach_create_bundle().','description' => 'Act on field_attach_create_bundle(). This hook is invoked after the field module has performed the operation. See field_attach_create_bundle() for details and arguments.','documentation' => '
 * Act on field_attach_create_bundle(). This hook is invoked after the field
 * module has performed the operation. See field_attach_create_bundle() for
 * details and arguments.','params_docs' => '','signature' => 'hook_field_attach_create_bundle($entity_type, $bundle)','sample_code' => '  // When a new bundle is created, the menu needs to be rebuilt to add the
  // Field UI menu item tabs.
  variable_set(\'menu_rebuild_needed\', TRUE);'),
  array('id' => '151','drupal_version' => '7','name' => 'hook_field_attach_delete','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_delete/7','short_description' => 'Act on field_attach_delete().','description' => 'Act on field_attach_delete(). This hook is invoked after the field module has performed the operation. See field_attach_delete() for details and arguments.','documentation' => '
 * Act on field_attach_delete(). This hook is invoked after the field module has
 * performed the operation. See field_attach_delete() for details and arguments.','params_docs' => '','signature' => 'hook_field_attach_delete($entity_type, $entity)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '152','drupal_version' => '7','name' => 'hook_field_attach_delete_bundle','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_delete_bundle/7','short_description' => 'Act on field_attach_delete_bundle.','description' => 'Act on field_attach_delete_bundle. This hook is invoked after the field module has performed the operation.','documentation' => '
 * Act on field_attach_delete_bundle. This hook is invoked after the field module
 * has performed the operation.','params_docs' => '
 *
 * @param $entity_type
 *   The type of entity; for example, \'node\' or \'user\'.
 * @param $bundle
 *   The bundle that was just deleted.
 * @param $instances
 *   An array of all instances that existed for the bundle before it was deleted.','signature' => 'hook_field_attach_delete_bundle($entity_type, $bundle, $instances)','sample_code' => '  // Remove the extra weights variable information for this bundle.
  $extra_weights = variable_get(\'field_extra_weights\', array());
  if (isset($extra_weights[$entity_type][$bundle])) {
    unset($extra_weights[$entity_type][$bundle]);
    variable_set(\'field_extra_weights\', $extra_weights);
  }'),
  array('id' => '153','drupal_version' => '7','name' => 'hook_field_attach_delete_revision','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_delete_revision/7','short_description' => 'Act on field_attach_delete_revision().','description' => 'Act on field_attach_delete_revision(). This hook is invoked after the field module has performed the operation. See field_attach_delete_revision() for details and arguments.','documentation' => '
 * Act on field_attach_delete_revision(). This hook is invoked after the field
 * module has performed the operation. See field_attach_delete_revision() for
 * details and arguments.','params_docs' => '','signature' => 'hook_field_attach_delete_revision($entity_type, $entity)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '154','drupal_version' => '7','name' => 'hook_field_attach_form','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_form/7','short_description' => 'Act on field_attach_form().','description' => 'Act on field_attach_form(). This hook is invoked after the field module has performed the operation.
Implementing modules should alter the $form or $form_state parameters.','documentation' => '
 * Act on field_attach_form(). This hook is invoked after the field module has
 * performed the operation. Implementing modules should alter the $form or
 * $form_state parameters.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity; for example, \'node\' or \'user\'.
 * @param $entity
 *   The entity for which an edit form is being built.
 * @param $form
 *   The form structure where field elements are attached to. This might be a
 *   full form structure, or a sub-element of a larger form. The
 *   $form[\'#parents\'] property can be used to identify the corresponding part of
 *   $form_state[\'values\']. Hook implementations that need to act on the
 *   top-level properties of the global form (like #submit, #validate...) can add
 *   a #process callback to the array received in the $form parameter, and act on
 *   the $complete_form parameter in the process callback.
 * @param $form_state
 *   An associative array containing the current state of the form.
 * @param $langcode
 *   The language the field values are going to be entered in. If no language is
 *   provided the default site language will be used.','signature' => 'hook_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode)','sample_code' => '  // Add a checkbox allowing a given field to be emptied.
  // See hook_field_attach_submit() for the corresponding processing code.
  $form[\'empty_field_foo\'] = array(
    \'#type\' => \'checkbox\',
    \'#title\' => t("Empty the \'field_foo\' field"),
  );'),
  array('id' => '155','drupal_version' => '7','name' => 'hook_field_attach_insert','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_insert/7','short_description' => 'Act on field_attach_insert().','description' => 'Act on field_attach_insert(). This hook is invoked after the field module has performed the operation. See field_attach_insert() for details and arguments.','documentation' => '
 * Act on field_attach_insert(). This hook is invoked after the field module has
 * performed the operation. See field_attach_insert() for details and arguments.','params_docs' => '','signature' => 'hook_field_attach_insert($entity_type, $entity)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '156','drupal_version' => '7','name' => 'hook_field_attach_load','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_load/7','short_description' => 'Act on field_attach_load().','description' => 'Act on field_attach_load(). This hook is invoked after the field module has performed the operation. Unlike other field_attach hooks, this hook accounts for \'multiple loads\'.
Instead of the usual $entity parameter, it accepts an array of entities,
indexed by entity ID. For performance reasons, information for all available
entities should be loaded in a single query where possible. The changes made to the entities\' field values get cached by the field cache
for subsequent loads. See field_attach_load() for details and arguments.','documentation' => '
 * Act on field_attach_load(). This hook is invoked after the field module has
 * performed the operation. Unlike other field_attach hooks, this hook accounts
 * for \'multiple loads\'. Instead of the usual $entity parameter, it accepts an
 * array of entities, indexed by entity ID. For performance reasons, information
 * for all available entities should be loaded in a single query where possible.
 * The changes made to the entities\' field values get cached by the field cache
 * for subsequent loads. See field_attach_load() for details and arguments.','params_docs' => '','signature' => 'hook_field_attach_load($entity_type, $entities, $age, $options)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '157','drupal_version' => '7','name' => 'hook_field_attach_prepare_translation_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_prepare_translation_alter/7','short_description' => 'Perform alterations on field_attach_prepare_translation().','description' => 'Perform alterations on field_attach_prepare_translation(). This hook is invoked after the field module has performed the operation.','documentation' => '
 * Perform alterations on field_attach_prepare_translation(). This hook is
 * invoked after the field module has performed the operation.','params_docs' => '
 *
 * @param $entity
 *   The entity being prepared for translation.
 * @param $context
 *   An associative array containing: entity_type: The type of $entity; e.g.
 *   \'node\' or \'user\'. langcode: The language the entity has to be translated in.
 *   source_entity: The entity holding the field values to be translated.
 *   source_langcode: The source language from which translate.','signature' => 'hook_field_attach_prepare_translation_alter(&$entity, $context)','sample_code' => '  if ($context[\'entity_type\'] == \'custom_entity_type\') {
    $entity->custom_field = $context[\'source_entity\']->custom_field;
  }'),
  array('id' => '158','drupal_version' => '7','name' => 'hook_field_attach_preprocess_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_preprocess_alter/7','short_description' => 'Alter field_attach_preprocess() variables.','description' => 'Alter field_attach_preprocess() variables. This hook is invoked while preprocessing the field.tpl.php template file
in field_attach_preprocess().','documentation' => '
 * Alter field_attach_preprocess() variables. This hook is invoked while
 * preprocessing the field.tpl.php template file in field_attach_preprocess().','params_docs' => '
 *
 * @param $variables
 *   The variables array is passed by reference and will be populated with field
 *   values.
 * @param $context
 *   An associative array containing: entity_type: The type of $entity; for
 *   example, \'node\' or \'user\'. entity: The entity with fields to render.
 *   element: The structured array containing the values ready for rendering.','signature' => 'hook_field_attach_preprocess_alter(&$variables, $context)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '159','drupal_version' => '7','name' => 'hook_field_attach_presave','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_presave/7','short_description' => 'Act on field_attach_presave().','description' => 'Act on field_attach_presave(). This hook is invoked after the field module has performed the operation. See field_attach_presave() for details and arguments.','documentation' => '
 * Act on field_attach_presave(). This hook is invoked after the field module has
 * performed the operation. See field_attach_presave() for details and arguments.','params_docs' => '','signature' => 'hook_field_attach_presave($entity_type, $entity)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '160','drupal_version' => '7','name' => 'hook_field_attach_purge','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_purge/7','short_description' => 'Act on field_purge_data().','description' => 'Act on field_purge_data(). This hook is invoked in field_purge_data() and allows modules to act on
purging data from a single field pseudo-entity. For example, if a module
relates data in the field with its own data, it may purge its own data
during this process as well.','documentation' => '
 * Act on field_purge_data(). This hook is invoked in field_purge_data() and
 * allows modules to act on purging data from a single field pseudo-entity. For
 * example, if a module relates data in the field with its own data, it may purge
 * its own data during this process as well.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity; for example, \'node\' or \'user\'.
 * @param $entity
 *   The pseudo-entity whose field data is being purged.
 * @param $field
 *   The (possibly deleted) field whose data is being purged.
 * @param $instance
 *   The deleted field instance whose data is being purged.','signature' => 'hook_field_attach_purge($entity_type, $entity, $field, $instance)','sample_code' => '  // find the corresponding data in mymodule and purge it
  if ($entity_type == \'node\' && $field->field_name == \'my_field_name\') {
    mymodule_remove_mydata($entity->nid);
  }'),
  array('id' => '161','drupal_version' => '7','name' => 'hook_field_attach_rename_bundle','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_rename_bundle/7','short_description' => 'Act on field_attach_rename_bundle().','description' => 'Act on field_attach_rename_bundle(). This hook is invoked after the field module has performed the operation. See field_attach_rename_bundle() for details and arguments.','documentation' => '
 * Act on field_attach_rename_bundle(). This hook is invoked after the field
 * module has performed the operation. See field_attach_rename_bundle() for
 * details and arguments.','params_docs' => '','signature' => 'hook_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new)','sample_code' => '  // Update the extra weights variable with new information.
  if ($bundle_old !== $bundle_new) {
    $extra_weights = variable_get(\'field_extra_weights\', array());
    if (isset($info[$entity_type][$bundle_old])) {
      $extra_weights[$entity_type][$bundle_new] = $extra_weights[$entity_type][$bundle_old];
      unset($extra_weights[$entity_type][$bundle_old]);
      variable_set(\'field_extra_weights\', $extra_weights);
    }
  }'),
  array('id' => '162','drupal_version' => '7','name' => 'hook_field_attach_submit','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_submit/7','short_description' => 'Act on field_attach_submit().','description' => 'Act on field_attach_submit(). This hook is invoked after the field module has performed the operation.','documentation' => '
 * Act on field_attach_submit(). This hook is invoked after the field module has
 * performed the operation.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity; for example, \'node\' or \'user\'.
 * @param $entity
 *   The entity for which an edit form is being submitted. The incoming form
 *   values have been extracted as field values of the $entity object.
 * @param $form
 *   The form structure where field elements are attached to. This might be a
 *   full form structure, or a sub-part of a larger form. The $form[\'#parents\']
 *   property can be used to identify the corresponding part of
 *   $form_state[\'values\'].
 * @param $form_state
 *   An associative array containing the current state of the form.','signature' => 'hook_field_attach_submit($entity_type, $entity, $form, &$form_state)','sample_code' => '  // Sample case of an \'Empty the field\' checkbox added on the form, allowing
  // a given field to be emptied.
  $values = drupal_array_get_nested_value($form_state[\'values\'], $form[\'#parents\']);
  if (!empty($values[\'empty_field_foo\'])) {
    unset($entity->field_foo);
  }'),
  array('id' => '163','drupal_version' => '7','name' => 'hook_field_attach_update','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_update/7','short_description' => 'Act on field_attach_update().','description' => 'Act on field_attach_update(). This hook is invoked after the field module has performed the operation. See field_attach_update() for details and arguments.','documentation' => '
 * Act on field_attach_update(). This hook is invoked after the field module has
 * performed the operation. See field_attach_update() for details and arguments.','params_docs' => '','signature' => 'hook_field_attach_update($entity_type, $entity)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '164','drupal_version' => '7','name' => 'hook_field_attach_validate','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_validate/7','short_description' => 'Act on field_attach_validate().','description' => 'Act on field_attach_validate(). This hook is invoked after the field module has performed the operation. See field_attach_validate() for details and arguments.','documentation' => '
 * Act on field_attach_validate(). This hook is invoked after the field module
 * has performed the operation. See field_attach_validate() for details and
 * arguments.','params_docs' => '','signature' => 'hook_field_attach_validate($entity_type, $entity, &$errors)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '165','drupal_version' => '7','name' => 'hook_field_attach_view_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_attach_view_alter/7','short_description' => 'Perform alterations on field_attach_view() or field_view_field().','description' => 'Perform alterations on field_attach_view() or field_view_field(). This hook is invoked after the field module has performed the operation.','documentation' => '
 * Perform alterations on field_attach_view() or field_view_field(). This hook is
 * invoked after the field module has performed the operation.','params_docs' => '
 *
 * @param $output
 *   The structured content array tree for all of the entity\'s fields.
 * @param $context
 *   An associative array containing: entity_type: The type of $entity; for
 *   example, \'node\' or \'user\'. entity: The entity with fields to render.
 *   view_mode: View mode; for example, \'full\' or \'teaser\'. display: Either a
 *   view mode string or an array of display settings. If this hook is being
 *   invoked from field_attach_view(), the \'display\' element is set to the view
 *   mode string. If this hook is being invoked from field_view_field(), this
 *   element is set to the $display argument and the view_mode element is set to
 *   \'_custom\'. See field_view_field() for more information on what its $display
 *   argument contains. language: The language code used for rendering.','signature' => 'hook_field_attach_view_alter(&$output, $context)','sample_code' => '  // Append RDF term mappings on displayed taxonomy links.
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    if ($element[\'#field_type\'] == \'taxonomy_term_reference\' && $element[\'#formatter\'] == \'taxonomy_term_reference_link\') {
      foreach ($element[\'#items\'] as $delta => $item) {
        $term = $item[\'taxonomy_term\'];
        if (!empty($term->rdf_mapping[\'rdftype\'])) {
          $element[$delta][\'#options\'][\'attributes\'][\'typeof\'] = $term->rdf_mapping[\'rdftype\'];
        }
        if (!empty($term->rdf_mapping[\'name\'][\'predicates\'])) {
          $element[$delta][\'#options\'][\'attributes\'][\'property\'] = $term->rdf_mapping[\'name\'][\'predicates\'];
        }
      }
    }
  }'),
  array('id' => '166','drupal_version' => '7','name' => 'hook_field_available_languages_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_available_languages_alter/7','short_description' => 'Alter field_available_languages() values.','description' => 'Alter field_available_languages() values. This hook is invoked from field_available_languages() to allow modules to
alter the array of available languages for the given field.','documentation' => '
 * Alter field_available_languages() values. This hook is invoked from
 * field_available_languages() to allow modules to alter the array of available
 * languages for the given field.','params_docs' => '
 *
 * @param $languages
 *   A reference to an array of language codes to be made available.
 * @param $context
 *   An associative array containing: entity_type: The type of the entity the
 *   field is attached to. field: A field data structure.','signature' => 'hook_field_available_languages_alter(&$languages, $context)','sample_code' => '  // Add an unavailable language.
  $languages[] = \'xx\';

  // Remove an available language.
  $index = array_search(\'yy\', $languages);
  unset($languages[$index]);'),
  array('id' => '167','drupal_version' => '7','name' => 'hook_field_create_field','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_create_field/7','short_description' => 'Act on a field being created.','description' => 'Act on a field being created. This hook is invoked from field_create_field() after the field is created, to
allow modules to act on field creation.','documentation' => '
 * Act on a field being created. This hook is invoked from field_create_field()
 * after the field is created, to allow modules to act on field creation.','params_docs' => '
 *
 * @param $field
 *   The field just created.','signature' => 'hook_field_create_field($field)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '168','drupal_version' => '7','name' => 'hook_field_create_instance','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_create_instance/7','short_description' => 'Act on a field instance being created.','description' => 'Act on a field instance being created. This hook is invoked from field_create_instance() after the instance record
is saved, so it cannot be used to modify the instance itself.','documentation' => '
 * Act on a field instance being created. This hook is invoked from
 * field_create_instance() after the instance record is saved, so it cannot be
 * used to modify the instance itself.','params_docs' => '
 *
 * @param $instance
 *   The instance just created.','signature' => 'hook_field_create_instance($instance)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '169','drupal_version' => '7','name' => 'hook_field_delete','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_delete/7','short_description' => 'Define custom delete behavior for this module\'s field data.','description' => 'Define custom delete behavior for this module\'s field data. This hook is invoked from field_attach_delete() on the module that defines a
field, during the process of deleting an entity object (node, taxonomy term,
etc.). It is invoked just before the data for this field on the particular
entity object is deleted from field storage. Only field modules that are
storing or tracking information outside the standard field storage mechanism
need to implement this hook.','documentation' => '
 * Define custom delete behavior for this module\'s field data. This hook is
 * invoked from field_attach_delete() on the module that defines a field, during
 * the process of deleting an entity object (node, taxonomy term, etc.). It is
 * invoked just before the data for this field on the particular entity object is
 * deleted from field storage. Only field modules that are storing or tracking
 * information outside the standard field storage mechanism need to implement
 * this hook.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entity
 *   The entity for the operation.
 * @param $field
 *   The field structure for the operation.
 * @param $instance
 *   The instance structure for $field on $entity\'s bundle.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   $entity->{$field[\'field_name\']}[$langcode], or an empty array if unset.','signature' => 'hook_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items)','sample_code' => '  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  foreach ($items as $delta => $item) {
    // For hook_file_references(), remember that this is being deleted.
    $item[\'file_field_name\'] = $field[\'field_name\'];
    // Pass in the ID of the object that is being removed so all references can
    // be counted in hook_file_references().
    $item[\'file_field_type\'] = $entity_type;
    $item[\'file_field_id\'] = $id;
    file_field_delete_file($item, $field, $entity_type, $id);
  }'),
  array('id' => '170','drupal_version' => '7','name' => 'hook_field_delete_field','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_delete_field/7','short_description' => 'Act on a field being deleted.','description' => 'Act on a field being deleted. This hook is invoked just after a field is deleted by field_delete_field().','documentation' => '
 * Act on a field being deleted. This hook is invoked just after a field is
 * deleted by field_delete_field().','params_docs' => '
 *
 * @param $field
 *   The field just deleted.','signature' => 'hook_field_delete_field($field)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '171','drupal_version' => '7','name' => 'hook_field_delete_instance','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_delete_instance/7','short_description' => 'Act on a field instance being deleted.','description' => 'Act on a field instance being deleted. This hook is invoked from field_delete_instance() after the instance is
deleted.','documentation' => '
 * Act on a field instance being deleted. This hook is invoked from
 * field_delete_instance() after the instance is deleted.','params_docs' => '
 *
 * @param $instance
 *   The instance just deleted.','signature' => 'hook_field_delete_instance($instance)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '172','drupal_version' => '7','name' => 'hook_field_delete_revision','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_delete_revision/7','short_description' => 'Define custom revision delete behavior for this module\'s field types.','description' => 'Define custom revision delete behavior for this module\'s field types. This hook is invoked just before the data is deleted from field storage
in field_attach_delete_revision(), and will only be called for fieldable
types that are versioned.','documentation' => '
 * Define custom revision delete behavior for this module\'s field types. This
 * hook is invoked just before the data is deleted from field storage in
 * field_attach_delete_revision(), and will only be called for fieldable types
 * that are versioned.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entity
 *   The entity for the operation.
 * @param $field
 *   The field structure for the operation.
 * @param $instance
 *   The instance structure for $field on $entity\'s bundle.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   $entity->{$field[\'field_name\']}[$langcode], or an empty array if unset.','signature' => 'hook_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items)','sample_code' => '  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  foreach ($items as $delta => $item) {
    // For hook_file_references, remember that this file is being deleted.
    $item[\'file_field_name\'] = $field[\'field_name\'];
    if (file_field_delete_file($item, $field, $entity_type, $id)) {
      $items[$delta] = NULL;
    }
  }'),
  array('id' => '173','drupal_version' => '7','name' => 'hook_field_display_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_display_alter/7','short_description' => 'Alters the display settings of a field before it gets displayed.','description' => 'Alters the display settings of a field before it gets displayed. Note that instead of hook_field_display_alter(), which is called for all
fields on all entity types, hook_field_display_ENTITY_TYPE_alter() may be
used to alter display settings for fields on a specific entity type only. This hook is called once per field per displayed entity. If the result of the
hook involves reading from the database, it is highly recommended to
statically cache the information.','documentation' => '
 * Alters the display settings of a field before it gets displayed. Note that
 * instead of hook_field_display_alter(), which is called for all fields on all
 * entity types, hook_field_display_ENTITY_TYPE_alter() may be used to alter
 * display settings for fields on a specific entity type only. This hook is
 * called once per field per displayed entity. If the result of the hook involves
 * reading from the database, it is highly recommended to statically cache the
 * information.','params_docs' => '
 *
 * @param $display
 *   The display settings that will be used to display the field values, as found
 *   in the \'display\' key of $instance definitions.
 * @param $context
 *   An associative array containing: entity_type: The entity type; e.g., \'node\'
 *   or \'user\'. field: The field being rendered. instance: The instance being
 *   rendered. entity: The entity being rendered. view_mode: The view mode, e.g.
 *   \'full\', \'teaser\'...','signature' => 'hook_field_display_alter(&$display, $context)','sample_code' => '  // Leave field labels out of the search index.
  // Note: The check against $context[\'entity_type\'] == \'node\' could be avoided
  // by using hook_field_display_node_alter() instead of
  // hook_field_display_alter(), resulting in less function calls when
  // rendering non-node entities.
  if ($context[\'entity_type\'] == \'node\' && $context[\'view_mode\'] == \'search_index\') {
    $display[\'label\'] = \'hidden\';
  }'),
  array('id' => '174','drupal_version' => '7','name' => 'hook_field_display_ENTITY_TYPE_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_display_ENTITY_TYPE_alter/7','short_description' => 'Alters the display settings of a field on a given entity type before it gets displayed.','description' => 'Alters the display settings of a field on a given entity type before it gets displayed. Modules can implement hook_field_display_ENTITY_TYPE_alter() to alter display
settings for fields on a specific entity type, rather than implementing
hook_field_display_alter(). This hook is called once per field per displayed entity. If the result of the
hook involves reading from the database, it is highly recommended to
statically cache the information.','documentation' => '
 * Alters the display settings of a field on a given entity type before it gets
 * displayed. Modules can implement hook_field_display_ENTITY_TYPE_alter() to
 * alter display settings for fields on a specific entity type, rather than
 * implementing hook_field_display_alter(). This hook is called once per field
 * per displayed entity. If the result of the hook involves reading from the
 * database, it is highly recommended to statically cache the information.','params_docs' => '
 *
 * @param $display
 *   The display settings that will be used to display the field values, as found
 *   in the \'display\' key of $instance definitions.
 * @param $context
 *   An associative array containing: entity_type: The entity type; e.g., \'node\'
 *   or \'user\'. field: The field being rendered. instance: The instance being
 *   rendered. entity: The entity being rendered. view_mode: The view mode, e.g.
 *   \'full\', \'teaser\'...','signature' => 'hook_field_display_ENTITY_TYPE_alter(&$display, $context)','sample_code' => '  // Leave field labels out of the search index.
  if ($context[\'view_mode\'] == \'search_index\') {
    $display[\'label\'] = \'hidden\';
  }'),
  array('id' => '175','drupal_version' => '7','name' => 'hook_field_extra_fields','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_extra_fields/7','short_description' => 'Exposes "pseudo-field" components on fieldable entities.','description' => 'Exposes "pseudo-field" components on fieldable entities. Field UI\'s "Manage fields" and "Manage display" pages let users re-order
fields, but also non-field components. For nodes, these include the title,
poll choices, and other elements exposed by modules through hook_form() or
hook_form_alter(). Fieldable entities or modules that want to have their components supported
should expose them using this hook. The user-defined settings (weight,
visible) are automatically applied on rendered forms and displayed
entities in a #pre_render callback added by field_attach_form() and
field_attach_view().','documentation' => '
 * Exposes "pseudo-field" components on fieldable entities. Field UI\'s "Manage
 * fields" and "Manage display" pages let users re-order fields, but also
 * non-field components. For nodes, these include the title, poll choices, and
 * other elements exposed by modules through hook_form() or hook_form_alter().
 * Fieldable entities or modules that want to have their components supported
 * should expose them using this hook. The user-defined settings (weight,
 * visible) are automatically applied on rendered forms and displayed entities in
 * a #pre_render callback added by.','params_docs' => '
 *
 * @return
 *   A nested array of \'pseudo-field\' components. Each list is nested within the
 *   following keys: entity type, bundle name, context (either \'form\' or
 *   \'display\'). The keys are the name of the elements as appearing in the
 *   renderable array (either the entity form or the displayed entity). The value
 *   is an associative array: label: The human readable name of the component.
 *   description: A short description of the component contents. weight: The
 *   default weight of the element.','signature' => 'hook_field_extra_fields()','sample_code' => '  $extra[\'node\'][\'poll\'] = array(
    \'form\' => array(
      \'choice_wrapper\' => array(
        \'label\' => t(\'Poll choices\'),
        \'description\' => t(\'Poll choices\'),
        \'weight\' => -4,
      ),
      \'settings\' => array(
        \'label\' => t(\'Poll settings\'),
        \'description\' => t(\'Poll module settings\'),
        \'weight\' => -3,
      ),
    ),
    \'display\' => array(
      \'poll_view_voting\' => array(
        \'label\' => t(\'Poll vote\'),
        \'description\' => t(\'Poll vote\'),
        \'weight\' => 0,
      ),
      \'poll_view_results\' => array(
        \'label\' => t(\'Poll results\'),
        \'description\' => t(\'Poll results\'),
        \'weight\' => 0,
      ),
    ),
  );

  return $extra;'),
  array('id' => '176','drupal_version' => '7','name' => 'hook_field_extra_fields_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_extra_fields_alter/7','short_description' => 'Alter "pseudo-field" components on fieldable entities.','description' => 'Alter "pseudo-field" components on fieldable entities.','documentation' => '
 * Alter "pseudo-field" components on fieldable entities.','params_docs' => '
 *
 * @param $info
 *   The associative array of \'pseudo-field\' components.','signature' => 'hook_field_extra_fields_alter(&$info)','sample_code' => '  // Force node title to always be at the top of the list by default.
  foreach (node_type_get_types() as $bundle) {
    if (isset($info[\'node\'][$bundle->type][\'form\'][\'title\'])) {
      $info[\'node\'][$bundle->type][\'form\'][\'title\'][\'weight\'] = -20;
    }
  }'),
  array('id' => '177','drupal_version' => '7','name' => 'hook_field_extra_fields_display_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_extra_fields_display_alter/7','short_description' => 'Alters the display settings of pseudo-fields before an entity is displayed.','description' => 'Alters the display settings of pseudo-fields before an entity is displayed. This hook is called once per displayed entity. If the result of the hook
involves reading from the database, it is highly recommended to statically
cache the information.','documentation' => '
 * Alters the display settings of pseudo-fields before an entity is displayed.
 * This hook is called once per displayed entity. If the result of the hook
 * involves reading from the database, it is highly recommended to statically
 * cache the information.','params_docs' => '
 *
 * @param $displays
 *   An array of display settings for the pseudo-fields in the entity, keyed by
 *   pseudo-field names.
 * @param $context
 *   An associative array containing: entity_type: The entity type; e.g., \'node\'
 *   or \'user\'. bundle: The bundle name. view_mode: The view mode, e.g. \'full\',
 *   \'teaser\'...','signature' => 'hook_field_extra_fields_display_alter(&$displays, $context)','sample_code' => '  if ($context[\'entity_type\'] == \'taxonomy_term\' && $context[\'view_mode\'] == \'full\') {
    $displays[\'description\'][\'visible\'] = FALSE;
  }'),
  array('id' => '178','drupal_version' => '7','name' => 'hook_field_formatter_info','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_formatter_info/7','short_description' => 'Expose Field API formatter types.','description' => 'Expose Field API formatter types. Formatters handle the display of field values. Formatter hooks are typically
called by the Field Attach API field_attach_prepare_view() and
field_attach_view() functions.','documentation' => '
 * Expose Field API formatter types. Formatters handle the display of field
 * values. Formatter hooks are typically called by the Field Attach API
 * field_attach_prepare_view() and field_attach_view() functions.','params_docs' => '
 *
 * @return
 *   An array describing the formatter types implemented by the module. The keys
 *   are formatter type names. To avoid name clashes, formatter type names should
 *   be prefixed with the name of the module that exposes them. The values are
 *   arrays describing the formatter type, with the following key/value pairs:
 *   label: The human-readable name of the formatter type. description: A short
 *   description for the formatter type. field types: An array of field types the
 *   formatter supports.','signature' => 'hook_field_formatter_info()','sample_code' => '  return array(
    \'text_default\' => array(
      \'label\' => t(\'Default\'),
      \'field types\' => array(\'text\', \'text_long\', \'text_with_summary\'),
    ),
    \'text_plain\' => array(
      \'label\' => t(\'Plain text\'),
      \'field types\' => array(\'text\', \'text_long\', \'text_with_summary\'),
    ),
    // The text_trimmed formatter displays the trimmed version of the
    // full element of the field. It is intended to be used with text
    // and text_long fields. It also works with text_with_summary
    // fields though the text_summary_or_trimmed formatter makes more
    // sense for that field type.
    \'text_trimmed\' => array(
      \'label\' => t(\'Trimmed\'),
      \'field types\' => array(\'text\', \'text_long\', \'text_with_summary\'),
    ),
    // The \'summary or trimmed\' field formatter for text_with_summary
    // fields displays returns the summary element of the field or, if
    // the summary is empty, the trimmed version of the full element
    // of the field.
    \'text_summary_or_trimmed\' => array(
      \'label\' => t(\'Summary or trimmed\'),
      \'field types\' => array(\'text_with_summary\'),
    ),
  );'),
  array('id' => '179','drupal_version' => '7','name' => 'hook_field_formatter_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_formatter_info_alter/7','short_description' => 'Perform alterations on Field API formatter types.','description' => 'Perform alterations on Field API formatter types.','documentation' => '
 * Perform alterations on Field API formatter types.','params_docs' => '
 *
 * @param $info
 *   Array of informations on formatter types exposed by
 *   hook_field_field_formatter_info() implementations.','signature' => 'hook_field_formatter_info_alter(&$info)','sample_code' => '  // Add a setting to a formatter type.
  $info[\'text_default\'][\'settings\'] += array(
    \'mymodule_additional_setting\' => \'default value\',
  );

  // Let a new field type re-use an existing formatter.
  $info[\'text_default\'][\'field types\'][] = \'my_field_type\';'),
  array('id' => '180','drupal_version' => '7','name' => 'hook_field_formatter_prepare_view','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_formatter_prepare_view/7','short_description' => 'Allow formatters to load information for field values being displayed.','description' => 'Allow formatters to load information for field values being displayed. This should be used when a formatter needs to load additional information
from the database in order to render a field, for example a reference field
which displays properties of the referenced entities such as name or type. This hook is called after the field type\'s own hook_field_prepare_view(). Unlike most other field hooks, this hook operates on multiple entities. The
$entities, $instances and $items parameters are arrays keyed by entity ID.
For performance reasons, information for all available entities should be
loaded in a single query where possible.','documentation' => '
 * Allow formatters to load information for field values being displayed. This
 * should be used when a formatter needs to load additional information from the
 * database in order to render a field, for example a reference field which
 * displays properties of the referenced entities such as name or type. This hook
 * is called after the field type\'s own hook_field_prepare_view(). Unlike most
 * other field hooks, this hook operates on multiple entities. The $entities,
 * $instances and $items parameters are arrays keyed by entity ID.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entities
 *   Array of entities being displayed, keyed by entity ID.
 * @param $field
 *   The field structure for the operation.
 * @param $instances
 *   Array of instance structures for $field for each entity, keyed by entity ID.
 * @param $langcode
 *   The language the field values are to be shown in. If no language is provided
 *   the current language is used.
 * @param $items
 *   Array of field values for the entities, keyed by entity ID.
 * @param $displays
 *   Array of display settings to use for each entity, keyed by entity ID.
 *
 * @return
 *   Changes or additions to field values are done by altering the $items
 *   parameter by reference.','signature' => 'hook_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays)','sample_code' => '  $tids = array();

  // Collect every possible term attached to any of the fieldable entities.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Force the array key to prevent duplicates.
      $tids[$item[\'tid\']] = $item[\'tid\'];
    }
  }

  if ($tids) {
    $terms = taxonomy_term_load_multiple($tids);

    // Iterate through the fieldable entities again to attach the loaded term
    // data.
    foreach ($entities as $id => $entity) {
      $rekey = FALSE;

      foreach ($items[$id] as $delta => $item) {
        // Check whether the taxonomy term field instance value could be loaded.
        if (isset($terms[$item[\'tid\']])) {
          // Replace the instance value with the term data.
          $items[$id][$delta][\'taxonomy_term\'] = $terms[$item[\'tid\']];
        }
        // Otherwise, unset the instance value, since the term does not exist.
        else {
          unset($items[$id][$delta]);
          $rekey = TRUE;
        }
      }

      if ($rekey) {
        // Rekey the items array.
        $items[$id] = array_values($items[$id]);
      }
    }
  }'),
  array('id' => '181','drupal_version' => '7','name' => 'hook_field_formatter_view','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_formatter_view/7','short_description' => 'Build a renderable array for a field value.','description' => 'Build a renderable array for a field value.','documentation' => '
 * Build a renderable array for a field value.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entity
 *   The entity being displayed.
 * @param $field
 *   The field structure.
 * @param $instance
 *   The field instance.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   Array of values for this field.
 * @param $display
 *   The display settings to use, as found in the \'display\' entry of instance
 *   definitions. The array notably contains the following keys and values; type:
 *   The name of the formatter to use. settings: The array of formatter settings.
 *
 * @return
 *   A renderable array for the $items, as an array of child elements keyed by
 *   numeric indexes starting from 0.','signature' => 'hook_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)','sample_code' => '  $element = array();
  $settings = $display[\'settings\'];

  switch ($display[\'type\']) {
    case \'sample_field_formatter_simple\':
      // Common case: each value is displayed individually in a sub-element
      // keyed by delta. The field.tpl.php template specifies the markup
      // wrapping each value.
      foreach ($items as $delta => $item) {
        $element[$delta] = array(\'#markup\' => $settings[\'some_setting\'] . $item[\'value\']);
      }
      break;

    case \'sample_field_formatter_themeable\':
      // More elaborate formatters can defer to a theme function for easier
      // customization.
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          \'#theme\' => \'mymodule_theme_sample_field_formatter_themeable\',
          \'#data\' => $item[\'value\'],
          \'#some_setting\' => $settings[\'some_setting\'],
        );
      }
      break;

    case \'sample_field_formatter_combined\':
      // Some formatters might need to display all values within a single piece
      // of markup.
      $rows = array();
      foreach ($items as $delta => $item) {
        $rows[] = array($delta, $item[\'value\']);
      }
      $element[0] = array(
        \'#theme\' => \'table\',
        \'#header\' => array(t(\'Delta\'), t(\'Value\')),
        \'#rows\' => $rows,
      );
      break;
  }

  return $element;'),
  array('id' => '182','drupal_version' => '7','name' => 'hook_field_info','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_info/7','short_description' => 'Define Field API field types.','description' => 'Define Field API field types.','documentation' => '
 * Define Field API field types.','params_docs' => '
 *
 * @return
 *   An array whose keys are field type names and whose values are arrays
 *   describing the field type, with the following key/value pairs: label: The
 *   human-readable name of the field type. description: A short description for
 *   the field type. settings: An array whose keys are the names of the settings
 *   available for the field type, and whose values are the default values for
 *   those settings. instance_settings: An array whose keys are the names of the
 *   settings available for instances of the field type, and whose values are the
 *   default values for those settings.','signature' => 'hook_field_info()','sample_code' => '  return array(
    \'text\' => array(
      \'label\' => t(\'Text\'),
      \'description\' => t(\'This field stores varchar text in the database.\'),
      \'settings\' => array(\'max_length\' => 255),
      \'instance_settings\' => array(\'text_processing\' => 0),
      \'default_widget\' => \'text_textfield\',
      \'default_formatter\' => \'text_default\',
    ),
    \'text_long\' => array(
      \'label\' => t(\'Long text\'),
      \'description\' => t(\'This field stores long text in the database.\'),
      \'settings\' => array(\'max_length\' => \'\'),
      \'instance_settings\' => array(\'text_processing\' => 0),
      \'default_widget\' => \'text_textarea\',
      \'default_formatter\' => \'text_default\',
    ),
    \'text_with_summary\' => array(
      \'label\' => t(\'Long text and summary\'),
      \'description\' => t(\'This field stores long text in the database along with optional summary text.\'),
      \'settings\' => array(\'max_length\' => \'\'),
      \'instance_settings\' => array(
        \'text_processing\' => 1,
        \'display_summary\' => 0,
      ),
      \'default_widget\' => \'text_textarea_with_summary\',
      \'default_formatter\' => \'text_summary_or_trimmed\',
    ),
  );'),
  array('id' => '183','drupal_version' => '7','name' => 'hook_field_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_info_alter/7','short_description' => 'Perform alterations on Field API field types.','description' => 'Perform alterations on Field API field types.','documentation' => '
 * Perform alterations on Field API field types.','params_docs' => '
 *
 * @param $info
 *   Array of information on field types exposed by.','signature' => 'hook_field_info_alter(&$info)','sample_code' => '  // Add a setting to all field types.
  foreach ($info as $field_type => $field_type_info) {
    $info[$field_type][\'settings\'] += array(
      \'mymodule_additional_setting\' => \'default value\',
    );
  }

  // Change the default widget for fields of type \'foo\'.
  if (isset($info[\'foo\'])) {
    $info[\'foo\'][\'default widget\'] = \'mymodule_widget\';
  }'),
  array('id' => '184','drupal_version' => '7','name' => 'hook_field_info_max_weight','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_info_max_weight/7','short_description' => 'Returns the maximum weight for the entity components handled by the module.','description' => 'Returns the maximum weight for the entity components handled by the module. Field API takes care of fields and \'extra_fields\'. This hook is intended for
third-party modules adding other entity components (e.g. field_group).','documentation' => '
 * Returns the maximum weight for the entity components handled by the module.
 * Field API takes care of fields and \'extra_fields\'. This hook is intended for
 * third-party modules adding other entity components (e.g. field_group).','params_docs' => '
 *
 * @param $entity_type
 *   The type of entity; e.g. \'node\' or \'user\'.
 * @param $bundle
 *   The bundle name.
 * @param $context
 *   The context for which the maximum weight is requested. Either \'form\', or the
 *   name of a view mode.
 *
 * @return
 *   The maximum weight of the entity\'s components, or NULL if no components were
 *   found.','signature' => 'hook_field_info_max_weight($entity_type, $bundle, $context)','sample_code' => '  $weights = array();

  foreach (my_module_entity_additions($entity_type, $bundle, $context) as $addition) {
    $weights[] = $addition[\'weight\'];
  }

  return $weights ? max($weights) : NULL;'),
  array('id' => '185','drupal_version' => '7','name' => 'hook_field_insert','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_insert/7','short_description' => 'Define custom insert behavior for this module\'s field data.','description' => 'Define custom insert behavior for this module\'s field data. This hook is invoked from field_attach_insert() on the module that defines a
field, during the process of inserting an entity object (node, taxonomy term,
etc.). It is invoked just before the data for this field on the particular
entity object is inserted into field storage. Only field modules that are
storing or tracking information outside the standard field storage mechanism
need to implement this hook.','documentation' => '
 * Define custom insert behavior for this module\'s field data. This hook is
 * invoked from field_attach_insert() on the module that defines a field, during
 * the process of inserting an entity object (node, taxonomy term, etc.). It is
 * invoked just before the data for this field on the particular entity object is
 * inserted into field storage. Only field modules that are storing or tracking
 * information outside the standard field storage mechanism need to implement
 * this hook.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entity
 *   The entity for the operation.
 * @param $field
 *   The field structure for the operation.
 * @param $instance
 *   The instance structure for $field on $entity\'s bundle.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   $entity->{$field[\'field_name\']}[$langcode], or an empty array if unset.','signature' => 'hook_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items)','sample_code' => '  if (variable_get(\'taxonomy_maintain_index_table\', TRUE) && $field[\'storage\'][\'type\'] == \'field_sql_storage\' && $entity_type == \'node\' && $entity->status) {
    $query = db_insert(\'taxonomy_index\')->fields(array(\'nid\', \'tid\', \'sticky\', \'created\'));
    foreach ($items as $item) {
      $query->values(array(
        \'nid\' => $entity->nid,
        \'tid\' => $item[\'tid\'],
        \'sticky\' => $entity->sticky,
        \'created\' => $entity->created,
      ));
    }
    $query->execute();
  }'),
  array('id' => '186','drupal_version' => '7','name' => 'hook_field_is_empty','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_is_empty/7','short_description' => 'Define what constitutes an empty item for a field type.','description' => 'Define what constitutes an empty item for a field type.','documentation' => '
 * Define what constitutes an empty item for a field type.','params_docs' => '
 *
 * @param $item
 *   An item that may or may not be empty.
 * @param $field
 *   The field to which $item belongs.
 *
 * @return
 *   TRUE if $field\'s type considers $item not to contain any data; FALSE
 *   otherwise.','signature' => 'hook_field_is_empty($item, $field)','sample_code' => '  if (empty($item[\'value\']) && (string) $item[\'value\'] !== \'0\') {
    return TRUE;
  }
  return FALSE;'),
  array('id' => '187','drupal_version' => '7','name' => 'hook_field_language_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_language_alter/7','short_description' => 'Perform alterations on field_language() values.','description' => 'Perform alterations on field_language() values. This hook is invoked to alter the array of display languages for the given
entity.','documentation' => '
 * Perform alterations on field_language() values. This hook is invoked to alter
 * the array of display languages for the given entity.','params_docs' => '
 *
 * @param $display_language
 *   A reference to an array of language codes keyed by field name.
 * @param $context
 *   An associative array containing: entity_type: The type of the entity to be
 *   displayed. entity: The entity with fields to render. langcode: The language
 *   code $entity has to be displayed in.','signature' => 'hook_field_language_alter(&$display_language, $context)','sample_code' => '  // Do not apply core language fallback rules if they are disabled or if Locale
  // is not registered as a translation handler.
  if (variable_get(\'locale_field_language_fallback\', TRUE) && field_has_translation_handler($context[\'entity_type\'], \'locale\')) {
    locale_field_language_fallback($display_language, $context[\'entity\'], $context[\'language\']);
  }'),
  array('id' => '188','drupal_version' => '7','name' => 'hook_field_load','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_load/7','short_description' => 'Define custom load behavior for this module\'s field types.','description' => 'Define custom load behavior for this module\'s field types. Unlike most other field hooks, this hook operates on multiple entities. The
$entities, $instances and $items parameters are arrays keyed by entity ID.
For performance reasons, information for all available entity should be
loaded in a single query where possible. Note that the changes made to the field values get cached by the field cache
for subsequent loads. You should never use this hook to load fieldable
entities, since this is likely to cause infinite recursions when
hook_field_load() is run on those as well. Use
hook_field_formatter_prepare_view() instead. Make changes or additions to field values by altering the $items parameter by
reference. There is no return value.','documentation' => '
 * Define custom load behavior for this module\'s field types. Unlike most other
 * field hooks, this hook operates on multiple entities. The $entities,
 * $instances and $items parameters are arrays keyed by entity ID. For
 * performance reasons, information for all available entity should be loaded in
 * a single query where possible. Note that the changes made to the field values
 * get cached by the field cache for subsequent loads. You should never use this
 * hook to load fieldable entities, since this is likely to cause infinite
 * recursions when hook_field_load() is.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entities
 *   Array of entities being loaded, keyed by entity ID.
 * @param $field
 *   The field structure for the operation.
 * @param $instances
 *   Array of instance structures for $field for each entity, keyed by entity ID.
 * @param $langcode
 *   The language code associated with $items.
 * @param $items
 *   Array of field values already loaded for the entities, keyed by entity ID.
 *   Store your changes in this parameter (passed by reference).
 * @param $age
 *   :.','signature' => 'hook_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age)','sample_code' => '  // Sample code from text.module: precompute sanitized strings so they are
  // stored in the field cache.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Only process items with a cacheable format, the rest will be handled
      // by formatters if needed.
      if (empty($instances[$id][\'settings\'][\'text_processing\']) || filter_format_allowcache($item[\'format\'])) {
        $items[$id][$delta][\'safe_value\'] = isset($item[\'value\']) ? _text_sanitize($instances[$id], $langcode, $item, \'value\') : \'\';
        if ($field[\'type\'] == \'text_with_summary\') {
          $items[$id][$delta][\'safe_summary\'] = isset($item[\'summary\']) ? _text_sanitize($instances[$id], $langcode, $item, \'summary\') : \'\';
        }
      }
    }
  }'),
  array('id' => '189','drupal_version' => '7','name' => 'hook_field_prepare_translation','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_prepare_translation/7','short_description' => 'Define custom prepare_translation behavior for this module\'s field types.','description' => 'Define custom prepare_translation behavior for this module\'s field types.','documentation' => '
 * Define custom prepare_translation behavior for this module\'s field types.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entity
 *   The entity for the operation.
 * @param $field
 *   The field structure for the operation.
 * @param $instance
 *   The instance structure for $field on $entity\'s bundle.
 * @param $langcode
 *   The language associated to $items.
 * @param $items
 *   $entity->{$field[\'field_name\']}[$langcode], or an empty array if unset.
 * @param $source_entity
 *   The source entity from which field values are being copied.
 * @param $source_langcode
 *   The source language from which field values are being copied.','signature' => 'hook_field_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &$items, $source_entity, $source_langcode)','sample_code' => '  // If the translating user is not permitted to use the assigned text format,
  // we must not expose the source values.
  $field_name = $field[\'field_name\'];
  $formats = filter_formats();
  $format_id = $source_entity->{$field_name}[$source_langcode][0][\'format\'];
  if (!filter_access($formats[$format_id])) {
    $items = array();
  }'),
  array('id' => '190','drupal_version' => '7','name' => 'hook_field_prepare_view','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_prepare_view/7','short_description' => 'Prepare field values prior to display.','description' => 'Prepare field values prior to display. This hook is invoked before the field values are handed to formatters
for display, and runs before the formatters\' own
hook_field_formatter_prepare_view(). Unlike most other field hooks, this hook operates on multiple entities. The
$entities, $instances and $items parameters are arrays keyed by entity ID.
For performance reasons, information for all available entities should be
loaded in a single query where possible. Make changes or additions to field values by altering the $items parameter by
reference. There is no return value.','documentation' => '
 * Prepare field values prior to display. This hook is invoked before the field
 * values are handed to formatters for display, and runs before the formatters\'
 * own hook_field_formatter_prepare_view(). Unlike most other field hooks, this
 * hook operates on multiple entities. The $entities, $instances and $items
 * parameters are arrays keyed by entity ID. For performance reasons, information
 * for all available entities should be loaded in a single query where possible.
 * Make changes or additions to field values by altering the $items parameter by
 * reference.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entities
 *   Array of entities being displayed, keyed by entity ID.
 * @param $field
 *   The field structure for the operation.
 * @param $instances
 *   Array of instance structures for $field for each entity, keyed by entity ID.
 * @param $langcode
 *   The language associated to $items.
 * @param $items
 *   $entity->{$field[\'field_name\']}, or an empty array if unset.','signature' => 'hook_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items)','sample_code' => '  // Sample code from image.module: if there are no images specified at all,
  // use the default image.
  foreach ($entities as $id => $entity) {
    if (empty($items[$id]) && $field[\'settings\'][\'default_image\']) {
      if ($file = file_load($field[\'settings\'][\'default_image\'])) {
        $items[$id][0] = (array) $file + array(
          \'is_default\' => TRUE,
          \'alt\' => \'\',
          \'title\' => \'\',
        );
      }
    }
  }'),
  array('id' => '191','drupal_version' => '7','name' => 'hook_field_presave','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_presave/7','short_description' => 'Define custom presave behavior for this module\'s field types.','description' => 'Define custom presave behavior for this module\'s field types. Make changes or additions to field values by altering the $items parameter by
reference. There is no return value.','documentation' => '
 * Define custom presave behavior for this module\'s field types. Make changes or
 * additions to field values by altering the $items parameter by reference. There
 * is no return value.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entity
 *   The entity for the operation.
 * @param $field
 *   The field structure for the operation.
 * @param $instance
 *   The instance structure for $field on $entity\'s bundle.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   $entity->{$field[\'field_name\']}[$langcode], or an empty array if unset.','signature' => 'hook_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items)','sample_code' => '  if ($field[\'type\'] == \'number_decimal\') {
    // Let PHP round the value to ensure consistent behavior across storage
    // backends.
    foreach ($items as $delta => $item) {
      if (isset($item[\'value\'])) {
        $items[$delta][\'value\'] = round($item[\'value\'], $field[\'settings\'][\'scale\']);
      }
    }
  }'),
  array('id' => '192','drupal_version' => '7','name' => 'hook_field_purge_field','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_purge_field/7','short_description' => 'Acts when a field record is being purged.','description' => 'Acts when a field record is being purged. In field_purge_field(), after the field configuration has been
removed from the database, the field storage module has had a chance to
run its hook_field_storage_purge_field(), and the field info cache
has been cleared, this hook is invoked on all modules to allow them to
respond to the field being purged.','documentation' => '
 * Acts when a field record is being purged. In field_purge_field(), after the
 * field configuration has been removed from the database, the field storage
 * module has had a chance to run its hook_field_storage_purge_field(), and the
 * field info cache has been cleared, this hook is invoked on all modules to
 * allow them to respond to the field being purged.','params_docs' => '
 *
 * @param $field
 *   The field being purged.','signature' => 'hook_field_purge_field($field)','sample_code' => '  db_delete(\'my_module_field_info\')
    ->condition(\'id\', $field[\'id\'])
    ->execute();'),
  array('id' => '193','drupal_version' => '7','name' => 'hook_field_purge_instance','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_purge_instance/7','short_description' => 'Acts when a field instance is being purged.','description' => 'Acts when a field instance is being purged. In field_purge_instance(), after the field instance has been
removed from the database, the field storage module has had a chance to
run its hook_field_storage_purge_instance(), and the field info cache
has been cleared, this hook is invoked on all modules to allow them to
respond to the field instance being purged.','documentation' => '
 * Acts when a field instance is being purged. In field_purge_instance(), after
 * the field instance has been removed from the database, the field storage
 * module has had a chance to run its hook_field_storage_purge_instance(), and
 * the field info cache has been cleared, this hook is invoked on all modules to
 * allow them to respond to the field instance being purged.','params_docs' => '
 *
 * @param $instance
 *   The instance being purged.','signature' => 'hook_field_purge_instance($instance)','sample_code' => '  db_delete(\'my_module_field_instance_info\')
    ->condition(\'id\', $instance[\'id\'])
    ->execute();'),
  array('id' => '194','drupal_version' => '7','name' => 'hook_field_read_field','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_read_field/7','short_description' => 'Act on field records being read from the database.','description' => 'Act on field records being read from the database. This hook is invoked from field_read_fields() on each field being read.','documentation' => '
 * Act on field records being read from the database. This hook is invoked from
 * field_read_fields() on each field being read.','params_docs' => '
 *
 * @param $field
 *   The field record just read from the database.','signature' => 'hook_field_read_field($field)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '195','drupal_version' => '7','name' => 'hook_field_read_instance','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_read_instance/7','short_description' => 'Act on a field record being read from the database.','description' => 'Act on a field record being read from the database. This hook is invoked from field_read_instances() on each instance being read.','documentation' => '
 * Act on a field record being read from the database. This hook is invoked from
 * field_read_instances() on each instance being read.','params_docs' => '
 *
 * @param $instance
 *   The instance record just read from the database.','signature' => 'hook_field_read_instance($instance)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '196','drupal_version' => '7','name' => 'hook_field_schema','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_schema/7','short_description' => 'Define the Field API schema for a field structure.','description' => 'Define the Field API schema for a field structure. This hook MUST be defined in .install for it to be detected during
installation and upgrade.','documentation' => '
 * Define the Field API schema for a field structure. This hook MUST be defined
 * in .install for it to be detected during installation and upgrade.','params_docs' => '
 *
 * @param $field
 *   A field structure.
 *
 * @return
 *   An associative array with the following keys: columns: An array of Schema
 *   API column specifications, keyed by column name. This specifies what
 *   comprises a value for a given field. For example, a value for a number field
 *   is simply \'value\', while a value for a formatted text field is the
 *   combination of \'value\' and \'format\'. It is recommended to avoid having the
 *   column definitions depend on field settings when possible. No assumptions
 *   should be made on how storage engines internally use the original column
 *   name to structure their storage.','signature' => 'hook_field_schema($field)','sample_code' => '  if ($field[\'type\'] == \'text_long\') {
    $columns = array(
      \'value\' => array(
        \'type\' => \'text\',
        \'size\' => \'big\',
        \'not null\' => FALSE,
      ),
    );
  }
  else {
    $columns = array(
      \'value\' => array(
        \'type\' => \'varchar\',
        \'length\' => $field[\'settings\'][\'max_length\'],
        \'not null\' => FALSE,
      ),
    );
  }
  $columns += array(
    \'format\' => array(
      \'type\' => \'varchar\',
      \'length\' => 255,
      \'not null\' => FALSE,
    ),
  );
  return array(
    \'columns\' => $columns,
    \'indexes\' => array(
      \'format\' => array(\'format\'),
    ),
    \'foreign keys\' => array(
      \'format\' => array(
        \'table\' => \'filter_format\',
        \'columns\' => array(\'format\' => \'format\'),
      ),
    ),
  );'),
  array('id' => '197','drupal_version' => '7','name' => 'hook_field_storage_create_field','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_create_field/7','short_description' => 'Act on creation of a new field.','description' => 'Act on creation of a new field. This hook is invoked from field_create_field() to ask the field storage
module to save field information and prepare for storing field instances.
If there is a problem, the field storage module should throw an exception.','documentation' => '
 * Act on creation of a new field. This hook is invoked from field_create_field()
 * to ask the field storage module to save field information and prepare for
 * storing field instances. If there is a problem, the field storage module
 * should throw an exception.','params_docs' => '
 *
 * @param $field
 *   The field structure being created.','signature' => 'hook_field_storage_create_field($field)','sample_code' => '  $schema = _field_sql_storage_schema($field);
  foreach ($schema as $name => $table) {
    db_create_table($name, $table);
  }
  drupal_get_schema(NULL, TRUE);'),
  array('id' => '198','drupal_version' => '7','name' => 'hook_field_storage_delete','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_delete/7','short_description' => 'Delete all field data for an entity.','description' => 'Delete all field data for an entity. This hook is invoked from field_attach_delete() to ask the field storage
module to delete field data.','documentation' => '
 * Delete all field data for an entity. This hook is invoked from
 * field_attach_delete() to ask the field storage module to delete field data.','params_docs' => '
 *
 * @param $entity_type
 *   The entity type of entity, such as \'node\' or \'user\'.
 * @param $entity
 *   The entity on which to operate.
 * @param $fields
 *   An array listing the fields to delete. The keys and values of the array are
 *   field IDs.','signature' => 'hook_field_storage_delete($entity_type, $entity, $fields)','sample_code' => '  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  foreach (field_info_instances($entity_type, $bundle) as $instance) {
    if (isset($fields[$instance[\'field_id\']])) {
      $field = field_info_field_by_id($instance[\'field_id\']);
      field_sql_storage_field_storage_purge($entity_type, $entity, $field, $instance);
    }
  }'),
  array('id' => '199','drupal_version' => '7','name' => 'hook_field_storage_delete_field','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_delete_field/7','short_description' => 'Act on deletion of a field.','description' => 'Act on deletion of a field. This hook is invoked from field_delete_field() to ask the field storage
module to mark all information stored in the field for deletion.','documentation' => '
 * Act on deletion of a field. This hook is invoked from field_delete_field() to
 * ask the field storage module to mark all information stored in the field for
 * deletion.','params_docs' => '
 *
 * @param $field
 *   The field being deleted.','signature' => 'hook_field_storage_delete_field($field)','sample_code' => '  // Mark all data associated with the field for deletion.
  $field[\'deleted\'] = 0;
  $table = _field_sql_storage_tablename($field);
  $revision_table = _field_sql_storage_revision_tablename($field);
  db_update($table)
    ->fields(array(\'deleted\' => 1))
    ->execute();

  // Move the table to a unique name while the table contents are being deleted.
  $field[\'deleted\'] = 1;
  $new_table = _field_sql_storage_tablename($field);
  $revision_new_table = _field_sql_storage_revision_tablename($field);
  db_rename_table($table, $new_table);
  db_rename_table($revision_table, $revision_new_table);
  drupal_get_schema(NULL, TRUE);'),
  array('id' => '200','drupal_version' => '7','name' => 'hook_field_storage_delete_instance','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_delete_instance/7','short_description' => 'Act on deletion of a field instance.','description' => 'Act on deletion of a field instance. This hook is invoked from field_delete_instance() to ask the field storage
module to mark all information stored for the field instance for deletion.','documentation' => '
 * Act on deletion of a field instance. This hook is invoked from
 * field_delete_instance() to ask the field storage module to mark all
 * information stored for the field instance for deletion.','params_docs' => '
 *
 * @param $instance
 *   The instance being deleted.','signature' => 'hook_field_storage_delete_instance($instance)','sample_code' => '  $field = field_info_field($instance[\'field_name\']);
  $table_name = _field_sql_storage_tablename($field);
  $revision_name = _field_sql_storage_revision_tablename($field);
  db_update($table_name)
    ->fields(array(\'deleted\' => 1))
    ->condition(\'entity_type\', $instance[\'entity_type\'])
    ->condition(\'bundle\', $instance[\'bundle\'])
    ->execute();
  db_update($revision_name)
    ->fields(array(\'deleted\' => 1))
    ->condition(\'entity_type\', $instance[\'entity_type\'])
    ->condition(\'bundle\', $instance[\'bundle\'])
    ->execute();'),
  array('id' => '201','drupal_version' => '7','name' => 'hook_field_storage_delete_revision','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_delete_revision/7','short_description' => 'Delete a single revision of field data for an entity.','description' => 'Delete a single revision of field data for an entity. This hook is invoked from field_attach_delete_revision() to ask the field
storage module to delete field revision data. Deleting the current (most recently written) revision is not
allowed as has undefined results.','documentation' => '
 * Delete a single revision of field data for an entity. This hook is invoked
 * from field_attach_delete_revision() to ask the field storage module to delete
 * field revision data. Deleting the current (most recently written) revision is
 * not allowed as has undefined results.','params_docs' => '
 *
 * @param $entity_type
 *   The entity type of entity, such as \'node\' or \'user\'.
 * @param $entity
 *   The entity on which to operate. The revision to delete is indicated by the
 *   entity\'s revision ID property, as identified by hook_fieldable_info() for
 *   $entity_type.
 * @param $fields
 *   An array listing the fields to delete. The keys and values of the array are
 *   field IDs.','signature' => 'hook_field_storage_delete_revision($entity_type, $entity, $fields)','sample_code' => '  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  if (isset($vid)) {
    foreach ($fields as $field_id) {
      $field = field_info_field_by_id($field_id);
      $revision_name = _field_sql_storage_revision_tablename($field);
      db_delete($revision_name)
        ->condition(\'entity_type\', $entity_type)
        ->condition(\'entity_id\', $id)
        ->condition(\'revision_id\', $vid)
        ->execute();
    }
  }'),
  array('id' => '202','drupal_version' => '7','name' => 'hook_field_storage_details','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_details/7','short_description' => 'Reveal the internal details about the storage for a field.','description' => 'Reveal the internal details about the storage for a field. For example, an SQL storage module might return the Schema API structure for
the table. A key/value storage module might return the server name,
authentication credentials, and bin name. Field storage modules are not obligated to implement this hook. Modules
that rely on these details must only use them for read operations.','documentation' => '
 * Reveal the internal details about the storage for a field. For example, an SQL
 * storage module might return the Schema API structure for the table. A
 * key/value storage module might return the server name, authentication
 * credentials, and bin name. Field storage modules are not obligated to
 * implement this hook. Modules that rely on these details must only use them for
 * read operations.','params_docs' => '
 *
 * @param $field
 *   A field structure.
 *
 * @return
 *   An array of details. The first dimension is a store type (sql, solr, etc).
 *   The second dimension indicates the age of the values in the store
 *   FIELD_LOAD_CURRENT or FIELD_LOAD_REVISION. Other dimensions are specific to
 *   the field storage module.','signature' => 'hook_field_storage_details($field)','sample_code' => '  $details = array();

  // Add field columns.
  foreach ((array) $field[\'columns\'] as $column_name => $attributes) {
    $real_name = _field_sql_storage_columnname($field[\'field_name\'], $column_name);
    $columns[$column_name] = $real_name;
  }
  return array(
    \'sql\' => array(
      FIELD_LOAD_CURRENT => array(
        _field_sql_storage_tablename($field) => $columns,
      ),
      FIELD_LOAD_REVISION => array(
        _field_sql_storage_revision_tablename($field) => $columns,
      ),
    ),
  );'),
  array('id' => '203','drupal_version' => '7','name' => 'hook_field_storage_details_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_details_alter/7','short_description' => 'Perform alterations on Field API storage details.','description' => 'Perform alterations on Field API storage details.','documentation' => '
 * Perform alterations on Field API storage details.','params_docs' => '
 *
 * @param $details
 *   An array of storage details for fields as exposed by.
 * @param $field
 *   A field structure.','signature' => 'hook_field_storage_details_alter(&$details, $field)','sample_code' => '  if ($field[\'field_name\'] == \'field_of_interest\') {
    $columns = array();
    foreach ((array) $field[\'columns\'] as $column_name => $attributes) {
      $columns[$column_name] = $column_name;
    }
    $details[\'drupal_variables\'] = array(
      FIELD_LOAD_CURRENT => array(
        \'moon\' => $columns,
      ),
      FIELD_LOAD_REVISION => array(
        \'mars\' => $columns,
      ),
    );
  }'),
  array('id' => '204','drupal_version' => '7','name' => 'hook_field_storage_info','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_info/7','short_description' => 'Expose Field API storage backends.','description' => 'Expose Field API storage backends.','documentation' => '
 * Expose Field API storage backends.','params_docs' => '
 *
 * @return
 *   An array describing the storage backends implemented by the module. The keys
 *   are storage backend names. To avoid name clashes, storage backend names
 *   should be prefixed with the name of the module that exposes them. The values
 *   are arrays describing the storage backend, with the following key/value
 *   pairs: label: The human-readable name of the storage backend. description: A
 *   short description for the storage backend. settings: An array whose keys are
 *   the names of the settings available for the storage backend, and whose
 *   values are the default values.','signature' => 'hook_field_storage_info()','sample_code' => '  return array(
    \'field_sql_storage\' => array(
      \'label\' => t(\'Default SQL storage\'),
      \'description\' => t(\'Stores fields in the local SQL database, using per-field tables.\'),
      \'settings\' => array(),
    ),
  );'),
  array('id' => '205','drupal_version' => '7','name' => 'hook_field_storage_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_info_alter/7','short_description' => 'Perform alterations on Field API storage types.','description' => 'Perform alterations on Field API storage types.','documentation' => '
 * Perform alterations on Field API storage types.','params_docs' => '
 *
 * @param $info
 *   Array of informations on storage types exposed by
 *   hook_field_field_storage_info() implementations.','signature' => 'hook_field_storage_info_alter(&$info)','sample_code' => '  // Add a setting to a storage type.
  $info[\'field_sql_storage\'][\'settings\'] += array(
    \'mymodule_additional_setting\' => \'default value\',
  );'),
  array('id' => '206','drupal_version' => '7','name' => 'hook_field_storage_load','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_load/7','short_description' => 'Load field data for a set of entities.','description' => 'Load field data for a set of entities. This hook is invoked from field_attach_load() to ask the field storage
module to load field data. Modules implementing this hook should load field values and add them to
objects in $entities. Fields with no values should be added as empty
arrays.','documentation' => '
 * Load field data for a set of entities. This hook is invoked from
 * field_attach_load() to ask the field storage module to load field data.
 * Modules implementing this hook should load field values and add them to
 * objects in $entities. Fields with no values should be added as empty arrays.','params_docs' => '
 *
 * @param $entity_type
 *   The type of entity, such as \'node\' or \'user\'.
 * @param $entities
 *   The array of entity objects to add fields to, keyed by entity ID.
 * @param $age
 *   :.
 * @param $fields
 *   An array listing the fields to be loaded. The keys of the array are field
 *   IDs, and the values of the array are the entity IDs (or revision IDs,
 *   depending on the $age parameter) to add each field to.
 * @param $options
 *   An associative array of additional options, with the following keys:
 *   deleted: If TRUE, deleted fields should be loaded as well as non-deleted
 *   fields. If unset or FALSE, only non-deleted fields should be loaded.','signature' => 'hook_field_storage_load($entity_type, $entities, $age, $fields, $options)','sample_code' => '  $field_info = field_info_field_by_ids();
  $load_current = $age == FIELD_LOAD_CURRENT;

  foreach ($fields as $field_id => $ids) {
    $field = $field_info[$field_id];
    $field_name = $field[\'field_name\'];
    $table = $load_current ? _field_sql_storage_tablename($field) : _field_sql_storage_revision_tablename($field);

    $query = db_select($table, \'t\')
      ->fields(\'t\')
      ->condition(\'entity_type\', $entity_type)
      ->condition($load_current ? \'entity_id\' : \'revision_id\', $ids, \'IN\')
      ->condition(\'language\', field_available_languages($entity_type, $field), \'IN\')
      ->orderBy(\'delta\');

    if (empty($options[\'deleted\'])) {
      $query->condition(\'deleted\', 0);
    }

    $results = $query->execute();

    $delta_count = array();
    foreach ($results as $row) {
      if (!isset($delta_count[$row->entity_id][$row->language])) {
        $delta_count[$row->entity_id][$row->language] = 0;
      }

      if ($field[\'cardinality\'] == FIELD_CARDINALITY_UNLIMITED || $delta_count[$row->entity_id][$row->language] $field[\'cardinality\']) {
        $item = array();
        // For each column declared by the field, populate the item
        // from the prefixed database column.
        foreach ($field[\'columns\'] as $column => $attributes) {
          $column_name = _field_sql_storage_columnname($field_name, $column);
          $item[$column] = $row->$column_name;
        }

        // Add the item to the field values for the entity.
        $entities[$row->entity_id]->{$field_name}[$row->language][] = $item;
        $delta_count[$row->entity_id][$row->language]++;
      }
    }
  }'),
  array('id' => '207','drupal_version' => '7','name' => 'hook_field_storage_pre_insert','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_pre_insert/7','short_description' => 'Act before the storage backends insert field data.','description' => 'Act before the storage backends insert field data. This hook allows modules to store data before the Field Storage API,
optionally preventing the field storage module from doing so.','documentation' => '
 * Act before the storage backends insert field data. This hook allows modules to
 * store data before the Field Storage API, optionally preventing the field
 * storage module from doing so.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity; for example, \'node\' or \'user\'.
 * @param $entity
 *   The entity with fields to save.
 * @param $skip_fields
 *   An array keyed by field IDs whose data has already been written and
 *   therefore should not be written again. The values associated with these keys
 *   are not specified.
 *
 * @return
 *   Saved field IDs are set set as keys in $skip_fields.','signature' => 'hook_field_storage_pre_insert($entity_type, $entity, &$skip_fields)','sample_code' => '  if ($entity_type == \'node\' && $entity->status && _forum_node_check_node_type($entity)) {
    $query = db_insert(\'forum_index\')->fields(array(\'nid\', \'title\', \'tid\', \'sticky\', \'created\', \'comment_count\', \'last_comment_timestamp\'));
    foreach ($entity->taxonomy_forums as $language) {
      foreach ($language as $delta) {
        $query->values(array(
          \'nid\' => $entity->nid,
          \'title\' => $entity->title,
          \'tid\' => $delta[\'value\'],
          \'sticky\' => $entity->sticky,
          \'created\' => $entity->created,
          \'comment_count\' => 0,
          \'last_comment_timestamp\' => $entity->created,
        ));
      }
    }
    $query->execute();
  }'),
  array('id' => '208','drupal_version' => '7','name' => 'hook_field_storage_pre_load','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_pre_load/7','short_description' => 'Act before the storage backends load field data.','description' => 'Act before the storage backends load field data. This hook allows modules to load data before the Field Storage API,
optionally preventing the field storage module from doing so. This lets 3rd party modules override, mirror, shard, or otherwise store a
subset of fields in a different way than the current storage engine.
Possible use cases include per-bundle storage, per-combo-field storage, etc. Modules implementing this hook should load field values and add them to
objects in $entities. Fields with no values should be added as empty
arrays. In addition, fields loaded should be added as keys to $skip_fields.','documentation' => '
 * Act before the storage backends load field data. This hook allows modules to
 * load data before the Field Storage API, optionally preventing the field
 * storage module from doing so. This lets 3rd party modules override, mirror,
 * shard, or otherwise store a subset of fields in a different way than the
 * current storage engine. Possible use cases include per-bundle storage,
 * per-combo-field storage, etc. Modules implementing this hook should load field
 * values and add them to objects in $entities. Fields with no values should be
 * added as empty arrays.','params_docs' => '
 *
 * @param $entity_type
 *   The type of entity, such as \'node\' or \'user\'.
 * @param $entities
 *   The array of entity objects to add fields to, keyed by entity ID.
 * @param $age
 *   :.
 * @param $skip_fields
 *   An array keyed by field IDs whose data has already been loaded and therefore
 *   should not be loaded again. Add a key to this array to indicate that your
 *   module has already loaded a field.
 * @param $options
 *   An associative array of additional options, with the following keys:
 *   field_id: The field ID that should be loaded. If unset, all fields should be
 *   loaded. deleted: If TRUE, deleted fields should be loaded as well as
 *   non-deleted fields. If unset or FALSE, only non-deleted fields should be
 *   loaded.','signature' => 'hook_field_storage_pre_load($entity_type, $entities, $age, &$skip_fields, $options)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '209','drupal_version' => '7','name' => 'hook_field_storage_pre_update','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_pre_update/7','short_description' => 'Act before the storage backends update field data.','description' => 'Act before the storage backends update field data. This hook allows modules to store data before the Field Storage API,
optionally preventing the field storage module from doing so.','documentation' => '
 * Act before the storage backends update field data. This hook allows modules to
 * store data before the Field Storage API, optionally preventing the field
 * storage module from doing so.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity; for example, \'node\' or \'user\'.
 * @param $entity
 *   The entity with fields to save.
 * @param $skip_fields
 *   An array keyed by field IDs whose data has already been written and
 *   therefore should not be written again. The values associated with these keys
 *   are not specified.
 *
 * @return
 *   Saved field IDs are set set as keys in $skip_fields.','signature' => 'hook_field_storage_pre_update($entity_type, $entity, &$skip_fields)','sample_code' => '  $first_call = &drupal_static(__FUNCTION__, array());

  if ($entity_type == \'node\' && $entity->status && _forum_node_check_node_type($entity)) {
    // We don\'t maintain data for old revisions, so clear all previous values
    // from the table. Since this hook runs once per field, per entity, make
    // sure we only wipe values once.
    if (!isset($first_call[$entity->nid])) {
      $first_call[$entity->nid] = FALSE;
      db_delete(\'forum_index\')->condition(\'nid\', $entity->nid)->execute();
    }
    // Only save data to the table if the node is published.
    if ($entity->status) {
      $query = db_insert(\'forum_index\')->fields(array(\'nid\', \'title\', \'tid\', \'sticky\', \'created\', \'comment_count\', \'last_comment_timestamp\'));
      foreach ($entity->taxonomy_forums as $language) {
        foreach ($language as $delta) {
          $query->values(array(
            \'nid\' => $entity->nid,
            \'title\' => $entity->title,
            \'tid\' => $delta[\'value\'],
            \'sticky\' => $entity->sticky,
            \'created\' => $entity->created,
            \'comment_count\' => 0,
            \'last_comment_timestamp\' => $entity->created,
          ));
        }
      }
      $query->execute();
      // The logic for determining last_comment_count is fairly complex, so
      // call _forum_update_forum_index() too.
      _forum_update_forum_index($entity->nid);
    }
  }'),
  array('id' => '210','drupal_version' => '7','name' => 'hook_field_storage_purge','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_purge/7','short_description' => 'Remove field storage information when field data is purged.','description' => 'Remove field storage information when field data is purged. Called from field_purge_data() to allow the field storage
module to delete field data information.','documentation' => '
 * Remove field storage information when field data is purged. Called from
 * field_purge_data() to allow the field storage module to delete field data
 * information.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity; for example, \'node\' or \'user\'.
 * @param $entity
 *   The pseudo-entity whose field data to delete.
 * @param $field
 *   The (possibly deleted) field whose data is being purged.
 * @param $instance
 *   The deleted field instance whose data is being purged.','signature' => 'hook_field_storage_purge($entity_type, $entity, $field, $instance)','sample_code' => '  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  $table_name = _field_sql_storage_tablename($field);
  $revision_name = _field_sql_storage_revision_tablename($field);
  db_delete($table_name)
    ->condition(\'entity_type\', $entity_type)
    ->condition(\'entity_id\', $id)
    ->execute();
  db_delete($revision_name)
    ->condition(\'entity_type\', $entity_type)
    ->condition(\'entity_id\', $id)
    ->execute();'),
  array('id' => '211','drupal_version' => '7','name' => 'hook_field_storage_purge_field','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_purge_field/7','short_description' => 'Remove field storage information when a field record is purged.','description' => 'Remove field storage information when a field record is purged. Called from field_purge_field() to allow the field storage module
to remove field information when a field is being purged.','documentation' => '
 * Remove field storage information when a field record is purged. Called from
 * field_purge_field() to allow the field storage module to remove field
 * information when a field is being purged.','params_docs' => '
 *
 * @param $field
 *   The field being purged.','signature' => 'hook_field_storage_purge_field($field)','sample_code' => '  $table_name = _field_sql_storage_tablename($field);
  $revision_name = _field_sql_storage_revision_tablename($field);
  db_drop_table($table_name);
  db_drop_table($revision_name);'),
  array('id' => '212','drupal_version' => '7','name' => 'hook_field_storage_purge_field_instance','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_purge_field_instance/7','short_description' => 'Remove field storage information when a field instance is purged.','description' => 'Remove field storage information when a field instance is purged. Called from field_purge_instance() to allow the field storage module
to remove field instance information when a field instance is being
purged.','documentation' => '
 * Remove field storage information when a field instance is purged. Called from
 * field_purge_instance() to allow the field storage module to remove field
 * instance information when a field instance is being purged.','params_docs' => '
 *
 * @param $instance
 *   The instance being purged.','signature' => 'hook_field_storage_purge_field_instance($instance)','sample_code' => '  db_delete(\'my_module_field_instance_info\')
    ->condition(\'id\', $instance[\'id\'])
    ->execute();'),
  array('id' => '213','drupal_version' => '7','name' => 'hook_field_storage_query','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_query/7','short_description' => 'Execute an EntityFieldQuery.','description' => 'Execute an EntityFieldQuery. This hook is called to find the entities having certain entity and field
conditions and sort them in the given field order. If the field storage
engine also handles property sorts and orders, it should unset those
properties in the called object to signal that those have been handled.','documentation' => '
 * Execute an EntityFieldQuery. This hook is called to find the entities having
 * certain entity and field conditions and sort them in the given field order. If
 * the field storage engine also handles property sorts and orders, it should
 * unset those properties in the called object to signal that those have been
 * handled.','params_docs' => '
 *
 * @param EntityFieldQuery $query
 *   An.
 *
 * @return
 *   See EntityFieldQuery::execute() for the return values.','signature' => 'hook_field_storage_query($query)','sample_code' => '  $groups = array();
  if ($query->age == FIELD_LOAD_CURRENT) {
    $tablename_function = \'_field_sql_storage_tablename\';
    $id_key = \'entity_id\';
  }
  else {
    $tablename_function = \'_field_sql_storage_revision_tablename\';
    $id_key = \'revision_id\';
  }
  $table_aliases = array();
  // Add tables for the fields used.
  foreach ($query->fields as $key => $field) {
    $tablename = $tablename_function($field);
    // Every field needs a new table.
    $table_alias = $tablename . $key;
    $table_aliases[$key] = $table_alias;
    if ($key) {
      $select_query->join($tablename, $table_alias, "$table_alias.entity_type = $field_base_table.entity_type AND $table_alias.$id_key = $field_base_table.$id_key");
    }
    else {
      $select_query = db_select($tablename, $table_alias);
      $select_query->addTag(\'entity_field_access\');
      $select_query->addMetaData(\'base_table\', $tablename);
      $select_query->fields($table_alias, array(\'entity_type\', \'entity_id\', \'revision_id\', \'bundle\'));
      $field_base_table = $table_alias;
    }
    if ($field[\'cardinality\'] != 1) {
      $select_query->distinct();
    }
  }

  // Add field conditions.
  foreach ($query->fieldConditions as $key => $condition) {
    $table_alias = $table_aliases[$key];
    $field = $condition[\'field\'];
    // Add the specified condition.
    $sql_field = "$table_alias." . _field_sql_storage_columnname($field[\'field_name\'], $condition[\'column\']);
    $query->addCondition($select_query, $sql_field, $condition);
    // Add delta / language group conditions.
    foreach (array(\'delta\', \'language\') as $column) {
      if (isset($condition[$column . \'_group\'])) {
        $group_name = $condition[$column . \'_group\'];
        if (!isset($groups[$column][$group_name])) {
          $groups[$column][$group_name] = $table_alias;
        }
        else {
          $select_query->where("$table_alias.$column = " . $groups[$column][$group_name] . ".$column");
        }
      }
    }
  }

  if (isset($query->deleted)) {
    $select_query->condition("$field_base_table.deleted", (int) $query->deleted);
  }

  // Is there a need to sort the query by property?
  $has_property_order = FALSE;
  foreach ($query->order as $order) {
    if ($order[\'type\'] == \'property\') {
      $has_property_order = TRUE;
    }
  }

  if ($query->propertyConditions || $has_property_order) {
    if (empty($query->entityConditions[\'entity_type\'][\'value\'])) {
      throw new EntityFieldQueryException(\'Property conditions and orders must have an entity type defined.\');
    }
    $entity_type = $query->entityConditions[\'entity_type\'][\'value\'];
    $entity_base_table = _field_sql_storage_query_join_entity($select_query, $entity_type, $field_base_table);
    $query->entityConditions[\'entity_type\'][\'operator\'] = \'=\';
    foreach ($query->propertyConditions as $property_condition) {
      $query->addCondition($select_query, "$entity_base_table." . $property_condition[\'column\'], $property_condition);
    }
  }
  foreach ($query->entityConditions as $key => $condition) {
    $query->addCondition($select_query, "$field_base_table.$key", $condition);
  }

  // Order the query.
  foreach ($query->order as $order) {
    if ($order[\'type\'] == \'entity\') {
      $key = $order[\'specifier\'];
      $select_query->orderBy("$field_base_table.$key", $order[\'direction\']);
    }
    elseif ($order[\'type\'] == \'field\') {
      $specifier = $order[\'specifier\'];
      $field = $specifier[\'field\'];
      $table_alias = $table_aliases[$specifier[\'index\']];
      $sql_field = "$table_alias." . _field_sql_storage_columnname($field[\'field_name\'], $specifier[\'column\']);
      $select_query->orderBy($sql_field, $order[\'direction\']);
    }
    elseif ($order[\'type\'] == \'property\') {
      $select_query->orderBy("$entity_base_table." . $order[\'specifier\'], $order[\'direction\']);
    }
  }

  return $query->finishQuery($select_query, $id_key);'),
  array('id' => '214','drupal_version' => '7','name' => 'hook_field_storage_update_field','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_update_field/7','short_description' => 'Update the storage information for a field.','description' => 'Update the storage information for a field. This is invoked on the field\'s storage module from field_update_field(),
before the new field information is saved to the database. The field storage
module should update its storage tables to agree with the new field
information. If there is a problem, the field storage module should throw an
exception.','documentation' => '
 * Update the storage information for a field. This is invoked on the field\'s
 * storage module from field_update_field(), before the new field information is
 * saved to the database. The field storage module should update its storage
 * tables to agree with the new field information. If there is a problem, the
 * field storage module should throw an exception.','params_docs' => '
 *
 * @param $field
 *   The updated field structure to be saved.
 * @param $prior_field
 *   The previously-saved field structure.
 * @param $has_data
 *   TRUE if the field has data in storage currently.','signature' => 'hook_field_storage_update_field($field, $prior_field, $has_data)','sample_code' => '  if (!$has_data) {
    // There is no data. Re-create the tables completely.
    $prior_schema = _field_sql_storage_schema($prior_field);
    foreach ($prior_schema as $name => $table) {
      db_drop_table($name, $table);
    }
    $schema = _field_sql_storage_schema($field);
    foreach ($schema as $name => $table) {
      db_create_table($name, $table);
    }
  }
  else {
    // There is data. See field_sql_storage_field_storage_update_field() for
    // an example of what to do to modify the schema in place, preserving the
    // old data as much as possible.
  }
  drupal_get_schema(NULL, TRUE);'),
  array('id' => '215','drupal_version' => '7','name' => 'hook_field_storage_write','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_storage_write/7','short_description' => 'Write field data for an entity.','description' => 'Write field data for an entity. This hook is invoked from field_attach_insert() and field_attach_update(),
to ask the field storage module to save field data.','documentation' => '
 * Write field data for an entity. This hook is invoked from
 * field_attach_insert() and field_attach_update(), to ask the field storage
 * module to save field data.','params_docs' => '
 *
 * @param $entity_type
 *   The entity type of entity, such as \'node\' or \'user\'.
 * @param $entity
 *   The entity on which to operate.
 * @param $op
 *   :.
 * @param $fields
 *   An array listing the fields to be written. The keys and values of the array
 *   are field IDs.','signature' => 'hook_field_storage_write($entity_type, $entity, $op, $fields)','sample_code' => '  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  if (!isset($vid)) {
    $vid = $id;
  }

  foreach ($fields as $field_id) {
    $field = field_info_field_by_id($field_id);
    $field_name = $field[\'field_name\'];
    $table_name = _field_sql_storage_tablename($field);
    $revision_name = _field_sql_storage_revision_tablename($field);

    $all_languages = field_available_languages($entity_type, $field);
    $field_languages = array_intersect($all_languages, array_keys((array) $entity->$field_name));

    // Delete and insert, rather than update, in case a value was added.
    if ($op == FIELD_STORAGE_UPDATE) {
      // Delete languages present in the incoming $entity->$field_name.
      // Delete all languages if $entity->$field_name is empty.
      $languages = !empty($entity->$field_name) ? $field_languages : $all_languages;
      if ($languages) {
        db_delete($table_name)
          ->condition(\'entity_type\', $entity_type)
          ->condition(\'entity_id\', $id)
          ->condition(\'language\', $languages, \'IN\')
          ->execute();
        db_delete($revision_name)
          ->condition(\'entity_type\', $entity_type)
          ->condition(\'entity_id\', $id)
          ->condition(\'revision_id\', $vid)
          ->condition(\'language\', $languages, \'IN\')
          ->execute();
      }
    }

    // Prepare the multi-insert query.
    $do_insert = FALSE;
    $columns = array(\'entity_type\', \'entity_id\', \'revision_id\', \'bundle\', \'delta\', \'language\');
    foreach ($field[\'columns\'] as $column => $attributes) {
      $columns[] = _field_sql_storage_columnname($field_name, $column);
    }
    $query = db_insert($table_name)->fields($columns);
    $revision_query = db_insert($revision_name)->fields($columns);

    foreach ($field_languages as $langcode) {
      $items = (array) $entity->{$field_name}[$langcode];
      $delta_count = 0;
      foreach ($items as $delta => $item) {
        // We now know we have someting to insert.
        $do_insert = TRUE;
        $record = array(
          \'entity_type\' => $entity_type,
          \'entity_id\' => $id,
          \'revision_id\' => $vid,
          \'bundle\' => $bundle,
          \'delta\' => $delta,
          \'language\' => $langcode,
        );
        foreach ($field[\'columns\'] as $column => $attributes) {
          $record[_field_sql_storage_columnname($field_name, $column)] = isset($item[$column]) ? $item[$column] : NULL;
        }
        $query->values($record);
        if (isset($vid)) {
          $revision_query->values($record);
        }

        if ($field[\'cardinality\'] != FIELD_CARDINALITY_UNLIMITED && ++$delta_count == $field[\'cardinality\']) {
          break;
        }
      }
    }

    // Execute the query if we have values to insert.
    if ($do_insert) {
      $query->execute();
      $revision_query->execute();
    }
  }'),
  array('id' => '216','drupal_version' => '7','name' => 'hook_field_update','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_update/7','short_description' => 'Define custom update behavior for this module\'s field data.','description' => 'Define custom update behavior for this module\'s field data. This hook is invoked from field_attach_update() on the module that defines a
field, during the process of updating an entity object (node, taxonomy term,
etc.). It is invoked just before the data for this field on the particular
entity object is updated into field storage. Only field modules that are
storing or tracking information outside the standard field storage mechanism
need to implement this hook.','documentation' => '
 * Define custom update behavior for this module\'s field data. This hook is
 * invoked from field_attach_update() on the module that defines a field, during
 * the process of updating an entity object (node, taxonomy term, etc.). It is
 * invoked just before the data for this field on the particular entity object is
 * updated into field storage. Only field modules that are storing or tracking
 * information outside the standard field storage mechanism need to implement
 * this hook.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entity
 *   The entity for the operation.
 * @param $field
 *   The field structure for the operation.
 * @param $instance
 *   The instance structure for $field on $entity\'s bundle.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   $entity->{$field[\'field_name\']}[$langcode], or an empty array if unset.','signature' => 'hook_field_update($entity_type, $entity, $field, $instance, $langcode, &$items)','sample_code' => '  if (variable_get(\'taxonomy_maintain_index_table\', TRUE) && $field[\'storage\'][\'type\'] == \'field_sql_storage\' && $entity_type == \'node\') {
    $first_call = &drupal_static(__FUNCTION__, array());

    // We don\'t maintain data for old revisions, so clear all previous values
    // from the table. Since this hook runs once per field, per object, make
    // sure we only wipe values once.
    if (!isset($first_call[$entity->nid])) {
      $first_call[$entity->nid] = FALSE;
      db_delete(\'taxonomy_index\')->condition(\'nid\', $entity->nid)->execute();
    }
    // Only save data to the table if the node is published.
    if ($entity->status) {
      $query = db_insert(\'taxonomy_index\')->fields(array(\'nid\', \'tid\', \'sticky\', \'created\'));
      foreach ($items as $item) {
        $query->values(array(
          \'nid\' => $entity->nid,
          \'tid\' => $item[\'tid\'],
          \'sticky\' => $entity->sticky,
          \'created\' => $entity->created,
        ));
      }
      $query->execute();
    }
  }'),
  array('id' => '217','drupal_version' => '7','name' => 'hook_field_update_field','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_update_field/7','short_description' => 'Act on a field being updated.','description' => 'Act on a field being updated. This hook is invoked just after field is updated in field_update_field().','documentation' => '
 * Act on a field being updated. This hook is invoked just after field is updated
 * in field_update_field().','params_docs' => '
 *
 * @param $field
 *   The field as it is post-update.
 * @param $prior_field
 *   The field as it was pre-update.
 * @param $has_data
 *   Whether any data already exists for this field.','signature' => 'hook_field_update_field($field, $prior_field, $has_data)','sample_code' => '  // Reset the static value that keeps track of allowed values for list fields.
  drupal_static_reset(\'list_allowed_values\');'),
  array('id' => '218','drupal_version' => '7','name' => 'hook_field_update_forbid','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_update_forbid/7','short_description' => 'Forbid a field update from occurring.','description' => 'Forbid a field update from occurring. Any module may forbid any update for any reason. For example, the
field\'s storage module might forbid an update if it would change
the storage schema while data for the field exists. A field type
module might forbid an update if it would change existing data\'s
semantics, or if there are external dependencies on field settings
that cannot be updated. To forbid the update from occurring, throw a FieldUpdateForbiddenException.','documentation' => '
 * Forbid a field update from occurring. Any module may forbid any update for any
 * reason. For example, the field\'s storage module might forbid an update if it
 * would change the storage schema while data for the field exists. A field type
 * module might forbid an update if it would change existing data\'s semantics, or
 * if there are external dependencies on field settings that cannot be updated.
 * To forbid the update from occurring, throw a FieldUpdateForbiddenException.','params_docs' => '
 *
 * @param $field
 *   The field as it will be post-update.
 * @param $prior_field
 *   The field as it is pre-update.
 * @param $has_data
 *   Whether any data already exists for this field.','signature' => 'hook_field_update_forbid($field, $prior_field, $has_data)','sample_code' => '  // A \'list\' field stores integer keys mapped to display values. If
  // the new field will have fewer values, and any data exists for the
  // abandoned keys, the field will have no way to display them. So,
  // forbid such an update.
  if ($has_data && count($field[\'settings\'][\'allowed_values\']) count($prior_field[\'settings\'][\'allowed_values\'])) {
    // Identify the keys that will be lost.
    $lost_keys = array_diff(array_keys($field[\'settings\'][\'allowed_values\']), array_keys($prior_field[\'settings\'][\'allowed_values\']));
    // If any data exist for those keys, forbid the update.
    $query = new EntityFieldQuery();
    $found = $query
      ->fieldCondition($prior_field[\'field_name\'], \'value\', $lost_keys)
      ->range(0, 1)
      ->execute();
    if ($found) {
      throw new FieldUpdateForbiddenException("Cannot update a list field not to include keys with existing data");
    }
  }'),
  array('id' => '219','drupal_version' => '7','name' => 'hook_field_update_instance','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_update_instance/7','short_description' => 'Act on a field instance being updated.','description' => 'Act on a field instance being updated. This hook is invoked from field_update_instance() after the instance record
is saved, so it cannot be used by a module to modify the instance itself.','documentation' => '
 * Act on a field instance being updated. This hook is invoked from
 * field_update_instance() after the instance record is saved, so it cannot be
 * used by a module to modify the instance itself.','params_docs' => '
 *
 * @param $instance
 *   The instance as it is post-update.
 * @param $prior_$instance
 *   The instance as it was pre-update.','signature' => 'hook_field_update_instance($instance, $prior_instance)','sample_code' => '  // @todo Needs function body.'),
  array('id' => '220','drupal_version' => '7','name' => 'hook_field_validate','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_validate/7','short_description' => 'Validate this module\'s field data.','description' => 'Validate this module\'s field data. If there are validation problems, add to the $errors array (passed by
reference). There is no return value.','documentation' => '
 * Validate this module\'s field data. If there are validation problems, add to
 * the $errors array (passed by reference). There is no return value.','params_docs' => '
 *
 * @param $entity_type
 *   The type of $entity.
 * @param $entity
 *   The entity for the operation.
 * @param $field
 *   The field structure for the operation.
 * @param $instance
 *   The instance structure for $field on $entity\'s bundle.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   $entity->{$field[\'field_name\']}[$langcode], or an empty array if unset.
 * @param $errors
 *   The array of errors (keyed by field name, language code, and delta) that
 *   have already been reported for the entity. The function should add its
 *   errors to this array. Each error is an associative array with the following
 *   keys and values: error: An error code (should be a string prefixed with the
 *   module name). message: The human readable message to be displayed.','signature' => 'hook_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors)','sample_code' => '  foreach ($items as $delta => $item) {
    if (!empty($item[\'value\'])) {
      if (!empty($field[\'settings\'][\'max_length\']) && drupal_strlen($item[\'value\']) > $field[\'settings\'][\'max_length\']) {
        $errors[$field[\'field_name\']][$langcode][$delta][] = array(
          \'error\' => \'text_max_length\',
          \'message\' => t(\'%name: the value may not be longer than %max characters.\', array(\'%name\' => $instance[\'label\'], \'%max\' => $field[\'settings\'][\'max_length\'])),
        );
      }
    }
  }'),
  array('id' => '221','drupal_version' => '7','name' => 'hook_field_widget_error','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_error/7','short_description' => 'Flag a field-level validation error.','description' => 'Flag a field-level validation error.','documentation' => '
 * Flag a field-level validation error.','params_docs' => '
 *
 * @param $element
 *   An array containing the form element for the widget. The error needs to be
 *   flagged on the right sub-element, according to the widget\'s internal
 *   structure.
 * @param $error
 *   An associative array with the following key-value pairs, as returned by
 *   error: the error code. Complex widgets might need to report different errors
 *   to different form elements inside the widget. message: the human readable
 *   message to be displayed.
 * @param $form
 *   The form structure where field elements are attached to. This might be a
 *   full form structure, or a sub-element of a larger form.
 * @param $form_state
 *   An associative array containing the current state of the form.','signature' => 'hook_field_widget_error($element, $error, $form, &$form_state)','sample_code' => '  form_error($element[\'value\'], $error[\'message\']);'),
  array('id' => '222','drupal_version' => '7','name' => 'hook_field_widget_form','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_form/7','short_description' => 'Return the form for a single field widget.','description' => 'Return the form for a single field widget. Field widget form elements should be based on the passed-in $element, which
contains the base form element properties derived from the field
configuration. Field API will set the weight, field name and delta values for each form
element. If there are multiple values for this field, the Field API will
invoke this hook as many times as needed. Note that, depending on the context in which the widget is being included
(regular entity form, field configuration form, advanced search form...),
the values for $field and $instance might be different from the "official"
definitions returned by field_info_field() and field_info_instance().
Examples: mono-value widget even if the field is multi-valued, non-required
widget even if the field is \'required\'... Therefore, the FAPI element callbacks (such as #process, #element_validate,
#value_callback...) used by the widget cannot use the field_info_field()
or field_info_instance() functions to retrieve the $field or $instance
definitions they should operate on. The field_widget_field() and
field_widget_instance() functions should be used instead to fetch the
current working definitions from $form_state, where Field API stores them. Alternatively, hook_field_widget_form() can extract the needed specific
properties from $field and $instance and set them as ad-hoc
$element[\'#custom\'] properties, for later use by its element callbacks. Other modules may alter the form element provided by this function using
hook_field_widget_form_alter().','documentation' => '
 * Return the form for a single field widget. Field widget form elements should
 * be based on the passed-in $element, which contains the base form element
 * properties derived from the field configuration. Field API will set the
 * weight, field name and delta values for each form element. If there are
 * multiple values for this field, the Field API will invoke this hook as many
 * times as needed. Note that, depending on the context in which the widget is
 * being included (regular entity form, field configuration form, advanced search
 * form...','params_docs' => '
 *
 * @param $form
 *   The form structure where widgets are being attached to. This might be a full
 *   form structure, or a sub-element of a larger form.
 * @param $form_state
 *   An associative array containing the current state of the form.
 * @param $field
 *   The field structure.
 * @param $instance
 *   The field instance.
 * @param $langcode
 *   The language associated with $items.
 * @param $items
 *   Array of default values for this field.
 * @param $delta
 *   The order of this item in the array of subelements (0, 1, 2, etc).
 * @param $element
 *   A form element array containing basic properties for the widget:
 *   #entity_type: The name of the entity the field is attached to. #bundle: The
 *   name of the field bundle the field is contained in. #field_name: The name of
 *   the field. #language: The language the field is being edited in.
 *   #field_parents: The \'parents\' space for the field in the form. Most widgets
 *   can simply overlook this property. This identifies the location where the
 *   field values are placed within $form_state[\'values\'], and is used to access
 *   processing information for the field through the field_form_get_state() and
 *   field_form_set_state() functions. #columns: A list of field storage columns
 *   of the field. #title: The sanitized element label for the field instance,
 *   ready for output.
 *
 * @return
 *   The form elements for a single widget for this field.','signature' => 'hook_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element)','sample_code' => '  $element += array(
    \'#type\' => $instance[\'widget\'][\'type\'],
    \'#default_value\' => isset($items[$delta]) ? $items[$delta] : \'\',
  );
  return $element;'),
  array('id' => '223','drupal_version' => '7','name' => 'hook_field_widget_form_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_form_alter/7','short_description' => 'Alter forms for field widgets provided by other modules.','description' => 'Alter forms for field widgets provided by other modules.','documentation' => '
 * Alter forms for field widgets provided by other modules.','params_docs' => '
 *
 * @param $element
 *   The field widget form element as constructed by.
 * @param $form_state
 *   An associative array containing the current state of the form.
 * @param $context
 *   An associative array containing the following key-value pairs, matching the
 *   arguments received by form: The form structure to which widgets are being
 *   attached. This may be a full form structure, or a sub-element of a larger
 *   form. field: The field structure. instance: The field instance structure.
 *   langcode: The language associated with $items. items: Array of default
 *   values for this field. delta: The order of this item in the array of
 *   subelements (0, 1, 2, etc).','signature' => 'hook_field_widget_form_alter(&$element, &$form_state, $context)','sample_code' => '  // Add a css class to widget form elements for all fields of type mytype.
  if ($context[\'field\'][\'type\'] == \'mytype\') {
    // Be sure not to overwrite existing attributes.
    $element[\'#attributes\'][\'class\'][] = \'myclass\';
  }'),
  array('id' => '224','drupal_version' => '7','name' => 'hook_field_widget_info','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_info/7','short_description' => 'Expose Field API widget types.','description' => 'Expose Field API widget types.','documentation' => '
 * Expose Field API widget types.','params_docs' => '
 *
 * @return
 *   An array describing the widget types implemented by the module. The keys are
 *   widget type names. To avoid name clashes, widget type names should be
 *   prefixed with the name of the module that exposes them. The values are
 *   arrays describing the widget type, with the following key/value pairs:
 *   label: The human-readable name of the widget type. description: A short
 *   description for the widget type. field types: An array of field types the
 *   widget supports. settings: An array whose keys are the names of the settings
 *   available for the widget type, and whose.','signature' => 'hook_field_widget_info()','sample_code' => '  return array(
    \'text_textfield\' => array(
      \'label\' => t(\'Text field\'),
      \'field types\' => array(\'text\'),
      \'settings\' => array(\'size\' => 60),
      \'behaviors\' => array(
        \'multiple values\' => FIELD_BEHAVIOR_DEFAULT,
        \'default value\' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    \'text_textarea\' => array(
      \'label\' => t(\'Text area (multiple rows)\'),
      \'field types\' => array(\'text_long\'),
      \'settings\' => array(\'rows\' => 5),
      \'behaviors\' => array(
        \'multiple values\' => FIELD_BEHAVIOR_DEFAULT,
        \'default value\' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    \'text_textarea_with_summary\' => array(
      \'label\' => t(\'Text area with a summary\'),
      \'field types\' => array(\'text_with_summary\'),
      \'settings\' => array(
        \'rows\' => 20,
        \'summary_rows\' => 5,
      ),
      \'behaviors\' => array(
        \'multiple values\' => FIELD_BEHAVIOR_DEFAULT,
        \'default value\' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );'),
  array('id' => '225','drupal_version' => '7','name' => 'hook_field_widget_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_info_alter/7','short_description' => 'Perform alterations on Field API widget types.','description' => 'Perform alterations on Field API widget types.','documentation' => '
 * Perform alterations on Field API widget types.','params_docs' => '
 *
 * @param $info
 *   Array of informations on widget types exposed by.','signature' => 'hook_field_widget_info_alter(&$info)','sample_code' => '  // Add a setting to a widget type.
  $info[\'text_textfield\'][\'settings\'] += array(
    \'mymodule_additional_setting\' => \'default value\',
  );

  // Let a new field type re-use an existing widget.
  $info[\'options_select\'][\'field types\'][] = \'my_field_type\';'),
  array('id' => '226','drupal_version' => '7','name' => 'hook_field_widget_properties_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_properties_alter/7','short_description' => 'Alters the widget properties of a field instance before it gets displayed.','description' => 'Alters the widget properties of a field instance before it gets displayed. Note that instead of hook_field_widget_properties_alter(), which is called
for all fields on all entity types,
hook_field_widget_properties_ENTITY_TYPE_alter() may be used to alter widget
properties for fields on a specific entity type only. This hook is called once per field per added or edit entity. If the result
of the hook involves reading from the database, it is highly recommended to
statically cache the information.','documentation' => '
 * Alters the widget properties of a field instance before it gets displayed.
 * Note that instead of hook_field_widget_properties_alter(), which is called for
 * all fields on all entity types,
 * hook_field_widget_properties_ENTITY_TYPE_alter() may be used to alter widget
 * properties for fields on a specific entity type only. This hook is called once
 * per field per added or edit entity. If the result of the hook involves reading
 * from the database, it is highly recommended to statically cache the
 * information.','params_docs' => '
 *
 * @param $widget
 *   The instance\'s widget properties.
 * @param $context
 *   An associative array containing: entity_type: The entity type; e.g., \'node\'
 *   or \'user\'. entity: The entity object. field: The field that the widget
 *   belongs to. instance: The instance of the field.','signature' => 'hook_field_widget_properties_alter(&$widget, $context)','sample_code' => '  // Change a widget\'s type according to the time of day.
  $field = $context[\'field\'];
  if ($context[\'entity_type\'] == \'node\' && $field[\'field_name\'] == \'field_foo\') {
    $time = date(\'H\');
    $widget[\'type\'] = $time 12 ? \'widget_am\' : \'widget_pm\';
  }'),
  array('id' => '227','drupal_version' => '7','name' => 'hook_field_widget_properties_ENTITY_TYPE_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_properties_ENTITY_TYPE_alter/7','short_description' => 'Alters the widget properties of a field instance on a given entity type before it gets displayed.','description' => 'Alters the widget properties of a field instance on a given entity type
before it gets displayed. Modules can implement hook_field_widget_properties_ENTITY_TYPE_alter() to
alter the widget properties for fields on a specific entity type, rather than
implementing hook_field_widget_properties_alter(). This hook is called once per field per displayed widget entity. If the result
of the hook involves reading from the database, it is highly recommended to
statically cache the information.','documentation' => '
 * Alters the widget properties of a field instance on a given entity type before
 * it gets displayed. Modules can implement
 * hook_field_widget_properties_ENTITY_TYPE_alter() to alter the widget
 * properties for fields on a specific entity type, rather than implementing
 * hook_field_widget_properties_alter(). This hook is called once per field per
 * displayed widget entity. If the result of the hook involves reading from the
 * database, it is highly recommended to statically cache the information.','params_docs' => '
 *
 * @param $widget
 *   The instance\'s widget properties.
 * @param $context
 *   An associative array containing: entity_type: The entity type; e.g., \'node\'
 *   or \'user\'. entity: The entity object. field: The field that the widget
 *   belongs to. instance: The instance of the field.','signature' => 'hook_field_widget_properties_ENTITY_TYPE_alter(&$widget, $context)','sample_code' => '  // Change a widget\'s type according to the time of day.
  $field = $context[\'field\'];
  if ($field[\'field_name\'] == \'field_foo\') {
    $time = date(\'H\');
    $widget[\'type\'] = $time 12 ? \'widget_am\' : \'widget_pm\';
  }'),
  array('id' => '228','drupal_version' => '7','name' => 'hook_field_widget_WIDGET_TYPE_form_alter','link' => 'http://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_widget_WIDGET_TYPE_form_alter/7','short_description' => 'Alter widget forms for a specific widget provided by another module.','description' => 'Alter widget forms for a specific widget provided by another module. Modules can implement hook_field_widget_WIDGET_TYPE_form_alter() to modify a
specific widget form, rather than using hook_field_widget_form_alter() and
checking the widget type.','documentation' => '
 * Alter widget forms for a specific widget provided by another module. Modules
 * can implement hook_field_widget_WIDGET_TYPE_form_alter() to modify a specific
 * widget form, rather than using hook_field_widget_form_alter() and checking the
 * widget type.','params_docs' => '
 *
 * @param $element
 *   The field widget form element as constructed by.
 * @param $form_state
 *   An associative array containing the current state of the form.
 * @param $context
 *   An associative array containing the following key-value pairs, matching the
 *   arguments received by "form": The form structure where widgets are being
 *   attached to. This might be a full form structure, or a sub-element of a
 *   larger form. "field": The field structure. "instance": The field instance
 *   structure. "langcode": The language associated with $items. "items": Array
 *   of default values for this field. "delta": The order of this item in the
 *   array of subelements (0, 1, 2, etc).','signature' => 'hook_field_widget_WIDGET_TYPE_form_alter(&$element, &$form_state, $context)','sample_code' => '  // Code here will only act on widgets of type WIDGET_TYPE.  For example,
  // hook_field_widget_mymodule_autocomplete_form_alter() will only act on
  // widgets of type \'mymodule_autocomplete\'.
  $element[\'#autocomplete_path\'] = \'mymodule/autocomplete_path\';'),
  array('id' => '229','drupal_version' => '7','name' => 'hook_filetransfer_info','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_filetransfer_info/7','short_description' => 'Register information about FileTransfer classes provided by a module.','description' => 'Register information about FileTransfer classes provided by a module. The FileTransfer class allows transferring files over a specific type of
connection. Core provides classes for FTP and SSH. Contributed modules are
free to extend the FileTransfer base class to add other connection types,
and if these classes are registered via hook_filetransfer_info(), those
connection types will be available to site administrators using the Update
manager when they are redirected to the authorize.php script to authorize
the file operations.','documentation' => '
 * Register information about FileTransfer classes provided by a module. The
 * FileTransfer class allows transferring files over a specific type of
 * connection. Core provides classes for FTP and SSH. Contributed modules are
 * free to extend the FileTransfer base class to add other connection types, and
 * if these classes are registered via hook_filetransfer_info(), those connection
 * types will be available to site administrators using the Update manager when
 * they are redirected to the authorize.php script to authorize the file
 * operations.','params_docs' => '
 *
 * @return
 *   array Nested array of information about FileTransfer classes. Each key is a
 *   FileTransfer type (not human readable, used for form elements and variable
 *   names, etc), and the values are subarrays that define properties of that
 *   type. The keys in each subarray are: \'title\': Required. The human-readable
 *   name of the connection type. \'class\': Required. The name of the FileTransfer
 *   class. The constructor will always be passed the full path to the root of
 *   the site that should be used to restrict where file transfer operations can
 *   occur (the $jail) and an array.','signature' => 'hook_filetransfer_info()','sample_code' => '  $info[\'sftp\'] = array(
    \'title\' => t(\'SFTP (Secure FTP)\'),
    \'file\' => \'sftp.filetransfer.inc\',
    \'class\' => \'FileTransferSFTP\',
    \'weight\' => 10,
  );
  return $info;'),
  array('id' => '230','drupal_version' => '7','name' => 'hook_filetransfer_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_filetransfer_info_alter/7','short_description' => 'Alter the FileTransfer class registry.','description' => 'Alter the FileTransfer class registry.','documentation' => '
 * Alter the FileTransfer class registry.','params_docs' => '
 *
 * @param array $filetransfer_info
 *   Reference to a nested array containing information about the.','signature' => 'hook_filetransfer_info_alter(&$filetransfer_info)','sample_code' => '  if (variable_get(\'paranoia\', FALSE)) {
    // Remove the FTP option entirely.
    unset($filetransfer_info[\'ftp\']);
    // Make sure the SSH option is listed first.
    $filetransfer_info[\'ssh\'][\'weight\'] = -10;
  }'),
  array('id' => '231','drupal_version' => '7','name' => 'hook_file_copy','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_copy/7','short_description' => 'Respond to a file that has been copied.','description' => 'Respond to a file that has been copied.','documentation' => '
 * Respond to a file that has been copied.','params_docs' => '
 *
 * @param $file
 *   The newly copied file object.
 * @param $source
 *   The original file before the copy.','signature' => 'hook_file_copy($file, $source)','sample_code' => ''),
  array('id' => '232','drupal_version' => '7','name' => 'hook_file_delete','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_delete/7','short_description' => 'Respond to a file being deleted.','description' => 'Respond to a file being deleted.','documentation' => '
 * Respond to a file being deleted.','params_docs' => '
 *
 * @param $file
 *   The file that has just been deleted.','signature' => 'hook_file_delete($file)','sample_code' => '  // Delete all information associated with the file.
  db_delete(\'upload\')->condition(\'fid\', $file->fid)->execute();'),
  array('id' => '233','drupal_version' => '7','name' => 'hook_file_download','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_download/7','short_description' => 'Control access to private file downloads and specify HTTP headers.','description' => 'Control access to private file downloads and specify HTTP headers. This hook allows modules enforce permissions on file downloads when the
private file download method is selected. Modules can also provide headers
to specify information like the file\'s name or MIME type.','documentation' => '
 * Control access to private file downloads and specify HTTP headers. This hook
 * allows modules enforce permissions on file downloads when the private file
 * download method is selected. Modules can also provide headers to specify
 * information like the file\'s name or MIME type.','params_docs' => '
 *
 * @param $uri
 *   The URI of the file.
 *
 * @return
 *   If the user does not have permission to access the file, return -1. If the
 *   user has permission, return an array with the appropriate headers. If the
 *   file is not controlled by the current module, the return value should be
 *   NULL.','signature' => 'hook_file_download($uri)','sample_code' => '  // Check if the file is controlled by the current module.
  if (!file_prepare_directory($uri)) {
    $uri = FALSE;
  }
  if (strpos(file_uri_target($uri), variable_get(\'user_picture_path\', \'pictures\') . \'/picture-\') === 0) {
    if (!user_access(\'access user profiles\')) {
      // Access to the file is denied.
      return -1;
    }
    else {
      $info = image_get_info($uri);
      return array(\'Content-Type\' => $info[\'mime_type\']);
    }
  }'),
  array('id' => '234','drupal_version' => '7','name' => 'hook_file_insert','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_insert/7','short_description' => 'Respond to a file being added.','description' => 'Respond to a file being added. This hook is called after a file has been added to the database. The hook
doesn\'t distinguish between files created as a result of a copy or those
created by an upload.','documentation' => '
 * Respond to a file being added. This hook is called after a file has been added
 * to the database. The hook doesn\'t distinguish between files created as a
 * result of a copy or those created by an upload.','params_docs' => '
 *
 * @param $file
 *   The file that has been added.','signature' => 'hook_file_insert($file)','sample_code' => '  // Add a message to the log, if the file is a jpg
  $validate = file_validate_extensions($file, \'jpg\');
  if (empty($validate)) {
    watchdog(\'file\', \'A jpg has been added.\');
  }'),
  array('id' => '235','drupal_version' => '7','name' => 'hook_file_load','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_load/7','short_description' => 'Load additional information into file objects.','description' => 'Load additional information into file objects. file_load_multiple() calls this hook to allow modules to load
additional information into each file.','documentation' => '
 * Load additional information into file objects. file_load_multiple() calls this
 * hook to allow modules to load additional information into each file.','params_docs' => '
 *
 * @param $files
 *   An array of file objects, indexed by fid.','signature' => 'hook_file_load($files)','sample_code' => '  // Add the upload specific data into the file object.
  $result = db_query(\'SELECT * FROM {upload} u WHERE u.fid IN (:fids)\', array(\':fids\' => array_keys($files)))->fetchAll(PDO::FETCH_ASSOC);
  foreach ($result as $record) {
    foreach ($record as $key => $value) {
      $files[$record[\'fid\']]->$key = $value;
    }
  }'),
  array('id' => '236','drupal_version' => '7','name' => 'hook_file_mimetype_mapping_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_mimetype_mapping_alter/7','short_description' => 'Alter MIME type mappings used to determine MIME type from a file extension.','description' => 'Alter MIME type mappings used to determine MIME type from a file extension. This hook is run when file_mimetype_mapping() is called. It is used to
allow modules to add to or modify the default mapping from
file_default_mimetype_mapping().','documentation' => '
 * Alter MIME type mappings used to determine MIME type from a file extension.
 * This hook is run when file_mimetype_mapping() is called. It is used to allow
 * modules to add to or modify the default mapping from
 * file_default_mimetype_mapping().','params_docs' => '
 *
 * @param $mapping
 *   An array of mimetypes correlated to the extensions that relate to them. The
 *   array has \'mimetypes\' and \'extensions\' elements, each of which is an array.','signature' => 'hook_file_mimetype_mapping_alter(&$mapping)','sample_code' => '  // Add new MIME type \'drupal/info\'.
  $mapping[\'mimetypes\'][\'example_info\'] = \'drupal/info\';
  // Add new extension \'.info\' and map it to the \'drupal/info\' MIME type.
  $mapping[\'extensions\'][\'info\'] = \'example_info\';
  // Override existing extension mapping for \'.ogg\' files.
  $mapping[\'extensions\'][\'ogg\'] = 189;'),
  array('id' => '237','drupal_version' => '7','name' => 'hook_file_move','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_move/7','short_description' => 'Respond to a file that has been moved.','description' => 'Respond to a file that has been moved.','documentation' => '
 * Respond to a file that has been moved.','params_docs' => '
 *
 * @param $file
 *   The updated file object after the move.
 * @param $source
 *   The original file object before the move.','signature' => 'hook_file_move($file, $source)','sample_code' => ''),
  array('id' => '238','drupal_version' => '7','name' => 'hook_file_presave','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_presave/7','short_description' => 'Act on a file being inserted or updated.','description' => 'Act on a file being inserted or updated. This hook is called when a file has been added to the database. The hook
doesn\'t distinguish between files created as a result of a copy or those
created by an upload.','documentation' => '
 * Act on a file being inserted or updated. This hook is called when a file has
 * been added to the database. The hook doesn\'t distinguish between files created
 * as a result of a copy or those created by an upload.','params_docs' => '
 *
 * @param $file
 *   The file that has just been created.','signature' => 'hook_file_presave($file)','sample_code' => '  // Change the file timestamp to an hour prior.
  $file->timestamp -= 3600;'),
  array('id' => '239','drupal_version' => '7','name' => 'hook_file_update','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_update/7','short_description' => 'Respond to a file being updated.','description' => 'Respond to a file being updated. This hook is called when file_save() is called on an existing file.','documentation' => '
 * Respond to a file being updated. This hook is called when file_save() is
 * called on an existing file.','params_docs' => '
 *
 * @param $file
 *   The file that has just been updated.','signature' => 'hook_file_update($file)','sample_code' => ''),
  array('id' => '240','drupal_version' => '7','name' => 'hook_file_url_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_url_alter/7','short_description' => 'Alter the URL to a file.','description' => 'Alter the URL to a file. This hook is called from file_create_url(), and  is called fairly
frequently (10+ times per page), depending on how many files there are in a
given page.
If CSS and JS aggregation are disabled, this can become very frequently
(50+ times per page) so performance is critical. This function should alter the URI, if it wants to rewrite the file URL.','documentation' => '
 * Alter the URL to a file. This hook is called from file_create_url(), and is
 * called fairly frequently (10+ times per page), depending on how many files
 * there are in a given page. If CSS and JS aggregation are disabled, this can
 * become very frequently (50+ times per page) so performance is critical. This
 * function should alter the URI, if it wants to rewrite the file URL.','params_docs' => '
 *
 * @param $uri
 *   The URI to a file for which we need an external URL, or the path to a
 *   shipped file.','signature' => 'hook_file_url_alter(&$uri)','sample_code' => '  global $user;

  // User 1 will always see the local file in this example.
  if ($user->uid == 1) {
    return;
  }

  $cdn1 = \'http://cdn1.example.com\';
  $cdn2 = \'http://cdn2.example.com\';
  $cdn_extensions = array(\'css\', \'js\', \'gif\', \'jpg\', \'jpeg\', \'png\');

  // Most CDNs don\'t support private file transfers without a lot of hassle,
  // so don\'t support this in the common case.
  $schemes = array(\'public\');

  $scheme = file_uri_scheme($uri);

  // Only serve shipped files and public created files from the CDN.
  if (!$scheme || in_array($scheme, $schemes)) {
    // Shipped files.
    if (!$scheme) {
      $path = $uri;
    }
    // Public created files.
    else {
      $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
      $path = $wrapper->getDirectoryPath() . \'/\' . file_uri_target($uri);
    }

    // Clean up Windows paths.
    $path = str_replace(\'\\\\\', \'/\', $path);

    // Serve files with one of the CDN extensions from CDN 1, all others from
    // CDN 2.
    $pathinfo = pathinfo($path);
    if (isset($pathinfo[\'extension\']) && in_array($pathinfo[\'extension\'], $cdn_extensions)) {
      $uri = $cdn1 . \'/\' . $path;
    }
    else {
      $uri = $cdn2 . \'/\' . $path;
    }
  }'),
  array('id' => '241','drupal_version' => '7','name' => 'hook_file_validate','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_file_validate/7','short_description' => 'Check that files meet a given criteria.','description' => 'Check that files meet a given criteria. This hook lets modules perform additional validation on files. They\'re able
to report a failure by returning one or more error messages.','documentation' => '
 * Check that files meet a given criteria. This hook lets modules perform
 * additional validation on files. They\'re able to report a failure by returning
 * one or more error messages.','params_docs' => '
 *
 * @param $file
 *   The file object being validated.
 *
 * @return
 *   An array of error messages. If there are no problems with the file return an
 *   empty array.','signature' => 'hook_file_validate($file)','sample_code' => '  $errors = array();

  if (empty($file->filename)) {
    $errors[] = t("The file\'s name is empty. Please give a name to the file.");
  }
  if (strlen($file->filename) > 255) {
    $errors[] = t("The file\'s name exceeds the 255 characters limit. Please rename the file and try again.");
  }

  return $errors;'),
  array('id' => '242','drupal_version' => '7','name' => 'hook_filter_format_disable','link' => 'http://api.drupal.org/api/drupal/modules!filter!filter.api.php/function/hook_filter_format_disable/7','short_description' => 'Perform actions when a text format has been disabled.','description' => 'Perform actions when a text format has been disabled.','documentation' => '
 * Perform actions when a text format has been disabled.','params_docs' => '
 *
 * @param $format
 *   The format object of the format being disabled.','signature' => 'hook_filter_format_disable($format)','sample_code' => '  mymodule_cache_rebuild();'),
  array('id' => '243','drupal_version' => '7','name' => 'hook_filter_format_insert','link' => 'http://api.drupal.org/api/drupal/modules!filter!filter.api.php/function/hook_filter_format_insert/7','short_description' => 'Perform actions when a new text format has been created.','description' => 'Perform actions when a new text format has been created.','documentation' => '
 * Perform actions when a new text format has been created.','params_docs' => '
 *
 * @param $format
 *   The format object of the format being updated.','signature' => 'hook_filter_format_insert($format)','sample_code' => '  mymodule_cache_rebuild();'),
  array('id' => '244','drupal_version' => '7','name' => 'hook_filter_format_update','link' => 'http://api.drupal.org/api/drupal/modules!filter!filter.api.php/function/hook_filter_format_update/7','short_description' => 'Perform actions when a text format has been updated.','description' => 'Perform actions when a text format has been updated. This hook allows modules to act when a text format has been updated in any
way. For example, when filters have been reconfigured, disabled, or
re-arranged in the text format.','documentation' => '
 * Perform actions when a text format has been updated. This hook allows modules
 * to act when a text format has been updated in any way. For example, when
 * filters have been reconfigured, disabled, or re-arranged in the text format.','params_docs' => '
 *
 * @param $format
 *   The format object of the format being updated.','signature' => 'hook_filter_format_update($format)','sample_code' => '  mymodule_cache_rebuild();'),
  array('id' => '245','drupal_version' => '7','name' => 'hook_filter_info','link' => 'http://api.drupal.org/api/drupal/modules!filter!filter.api.php/function/hook_filter_info/7','short_description' => 'Define content filters.','description' => 'Define content filters. User submitted content is passed through a group of filters before it is
output in HTML, in order to remove insecure or unwanted parts, correct or
enhance the formatting, transform special keywords, etc. A group of filters
is referred to as a "text format". Administrators can create as many text
formats as needed. Individual filters can be enabled and configured
differently for each text format. This hook is invoked by filter_get_filters() and allows modules to register
input filters they provide. Filtering is a two-step process. First, the content is \'prepared\' by calling
the \'prepare callback\' function for every filter. The purpose of the \'prepare
callback\' is to escape HTML-like structures. For example, imagine a filter
which allows the user to paste entire chunks of programming code without
requiring manual escaping of special HTML characters like < or &. If the
programming code were left untouched, then other filters could think it was
HTML and change it. For many filters, the prepare step is not necessary. The second step is the actual processing step. The result from passing the
text through all the filters\' prepare steps gets passed to all the filters
again, this time with the \'process callback\' function. The process callbacks
should then actually change the content: transform URLs into hyperlinks,
convert smileys into images, etc. For performance reasons content is only filtered once; the result is stored
in the cache table and retrieved from the cache the next time the same piece
of content is displayed. If a filter\'s output is dynamic, it can override the
cache mechanism, but obviously this should be used with caution: having one
filter that does not support caching in a particular text format disables
caching for the entire format, not just for one filter. Beware of the filter cache when developing your module: it is advised to set
your filter to \'cache\' => FALSE while developing, but be sure to remove that
setting if it\'s not needed, when you are no longer in development mode.','documentation' => '
 * Define content filters. User submitted content is passed through a group of
 * filters before it is output in HTML, in order to remove insecure or unwanted
 * parts, correct or enhance the formatting, transform special keywords, etc. A
 * group of filters is referred to as a "text format". Administrators can create
 * as many text formats as needed. Individual filters can be enabled and
 * configured differently for each text format. This hook is invoked by
 * filter_get_filters() and allows modules to register input filters they
 * provide. Filtering is a two-step process.','params_docs' => '
 *
 * @return
 *   An associative array of filters, whose keys are internal filter names, which
 *   should be unique and therefore prefixed with the name of the module. Each
 *   value is an associative array describing the filter, with the following
 *   elements (all are optional except as noted): title: (required) An
 *   administrative summary of what the filter does. description: Additional
 *   administrative information about the filter\'s behavior, if needed for
 *   clarification. settings callback: The name of a function that returns
 *   configuration form elements for the filter.','signature' => 'hook_filter_info()','sample_code' => '  $filters[\'filter_html\'] = array(
    \'title\' => t(\'Limit allowed HTML tags\'),
    \'description\' => t(\'Allows you to restrict the HTML tags the user can use. It will also remove harmful content such as JavaScript events, JavaScript URLs and CSS styles from those tags that are not removed.\'),
    \'process callback\' => \'_filter_html\',
    \'settings callback\' => \'_filter_html_settings\',
    \'default settings\' => array(
      \'allowed_html\' => \'<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd>\',
      \'filter_html_help\' => 1,
      \'filter_html_nofollow\' => 0,
    ),
    \'tips callback\' => \'_filter_html_tips\',
  );
  $filters[\'filter_autop\'] = array(
    \'title\' => t(\'Convert line breaks\'),
    \'description\' => t(\'Converts line breaks into HTML (i.e. &lt;br&gt; and &lt;p&gt;) tags.\'),
    \'process callback\' => \'_filter_autop\',
    \'tips callback\' => \'_filter_autop_tips\',
  );
  return $filters;'),
  array('id' => '246','drupal_version' => '7','name' => 'hook_filter_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!filter!filter.api.php/function/hook_filter_info_alter/7','short_description' => 'Perform alterations on filter definitions.','description' => 'Perform alterations on filter definitions.','documentation' => '
 * Perform alterations on filter definitions.','params_docs' => '
 *
 * @param $info
 *   Array of information on filters exposed by.','signature' => 'hook_filter_info_alter(&$info)','sample_code' => '  // Replace the PHP evaluator process callback with an improved
  // PHP evaluator provided by a module.
  $info[\'php_code\'][\'process callback\'] = \'my_module_php_evaluator\';

  // Alter the default settings of the URL filter provided by core.
  $info[\'filter_url\'][\'default settings\'] = array(
    \'filter_url_length\' => 100,
  );'),
  array('id' => '247','drupal_version' => '7','name' => 'hook_flush_caches','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_flush_caches/7','short_description' => 'Add a list of cache tables to be cleared.','description' => 'Add a list of cache tables to be cleared. This hook allows your module to add cache table names to the list of cache
tables that will be cleared by the Clear button on the Performance page or
whenever drupal_flush_all_caches is invoked.','documentation' => '
 * Add a list of cache tables to be cleared. This hook allows your module to add
 * cache table names to the list of cache tables that will be cleared by the
 * Clear button on the Performance page or whenever drupal_flush_all_caches is
 * invoked.','params_docs' => '
 *
 * @return
 *   An array of cache table names.','signature' => 'hook_flush_caches()','sample_code' => '  return array(\'cache_example\');'),
  array('id' => '248','drupal_version' => '7','name' => 'hook_form','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_form/7','short_description' => 'Display a node editing form.','description' => 'Display a node editing form. This hook, implemented by node modules, is called to retrieve the form
that is displayed to create or edit a node. This form is displayed at path
node/add/[node type] or node/[node ID]/edit. The submit and preview buttons, administrative and display controls, and
sections added by other modules (such as path settings, menu settings,
comment settings, and fields managed by the Field UI module) are
displayed automatically by the node module. This hook just needs to
return the node title and form editing fields specific to the node type.','documentation' => '
 * Display a node editing form. This hook, implemented by node modules, is called
 * to retrieve the form that is displayed to create or edit a node. This form is
 * displayed at path node/add/[node type] or node/[node ID]/edit. The submit and
 * preview buttons, administrative and display controls, and sections added by
 * other modules (such as path settings, menu settings, comment settings, and
 * fields managed by the Field UI module) are displayed automatically by the node
 * module.','params_docs' => '
 *
 * @param $node
 *   The node being added or edited.
 * @param $form_state
 *   The form state array.
 *
 * @return
 *   An array containing the title and any custom form elements to be displayed
 *   in the node editing form.','signature' => 'hook_form($node, &$form_state)','sample_code' => '  $type = node_type_get_type($node);

  $form[\'title\'] = array(
    \'#type\' => \'textfield\',
    \'#title\' => check_plain($type->title_label),
    \'#default_value\' => !empty($node->title) ? $node->title : \'\',
    \'#required\' => TRUE,
    \'#weight\' => -5,
  );

  $form[\'field1\'] = array(
    \'#type\' => \'textfield\',
    \'#title\' => t(\'Custom field\'),
    \'#default_value\' => $node->field1,
    \'#maxlength\' => 127,
  );
  $form[\'selectbox\'] = array(
    \'#type\' => \'select\',
    \'#title\' => t(\'Select box\'),
    \'#default_value\' => $node->selectbox,
    \'#options\' => array(
      1 => \'Option A\',
      2 => \'Option B\',
      3 => \'Option C\',
    ),
    \'#description\' => t(\'Choose an option.\'),
  );

  return $form;'),
  array('id' => '249','drupal_version' => '7','name' => 'hook_forms','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_forms/7','short_description' => 'Map form_ids to form builder functions.','description' => 'Map form_ids to form builder functions. By default, when drupal_get_form() is called, the system will look for a
function with the same name as the form ID, and use that function to build
the form. If no such function is found, Drupal calls this hook. Modules
implementing this hook can then provide their own instructions for mapping
form IDs to constructor functions. As a result, you can easily map multiple
form IDs to a single form constructor (referred to as a \'base\' form). Using a base form can help to avoid code duplication, by allowing many
similar forms to use the same code base. Another benefit is that it becomes
much easier for other modules to apply a general change to the group of
forms; hook_form_BASE_FORM_ID_alter() can be used to easily alter multiple
forms at once by directly targeting the shared base form. Two example use cases where base forms may be useful are given below. First, you can use this hook to tell the form system to use a different
function to build certain forms in your module; this is often used to define
a form "factory" function that is used to build several similar forms. In
this case, your hook implementation will likely ignore all of the input
arguments. See node_forms() for an example of this. Note, node_forms() is the
hook_forms() implementation; the base form itself is defined in node_form(). Second, you could use this hook to define how to build a form with a
dynamically-generated form ID. In this case, you would need to verify that
the $form_id input matched your module\'s format for dynamically-generated
form IDs, and if so, act appropriately.','documentation' => '
 * Map form_ids to form builder functions. By default, when drupal_get_form() is
 * called, the system will look for a function with the same name as the form ID,
 * and use that function to build the form. If no such function is found, Drupal
 * calls this hook. Modules implementing this hook can then provide their own
 * instructions for mapping form IDs to constructor functions. As a result, you
 * can easily map multiple form IDs to a single form constructor (referred to as
 * a \'base\' form).','params_docs' => '
 *
 * @param $form_id
 *   The unique string identifying the desired form.
 * @param $args
 *   An array containing the original arguments provided to.
 *
 * @return
 *   An associative array whose keys define form_ids and whose values are an
 *   associative array defining the following keys: callback: The name of the
 *   form builder function to invoke. This will be used for the base form ID, for
 *   example, to target a base form using hook_form_BASE_FORM_ID_alter().
 *   callback arguments: (optional) Additional arguments to pass to the function
 *   defined in \'callback\', which are prepended to $args. wrapper_callback:
 *   (optional) The name of a form builder function to invoke before the form
 *   builder defined in \'callback\' is invoked.','signature' => 'hook_forms($form_id, $args)','sample_code' => '  // Simply reroute the (non-existing) $form_id \'mymodule_first_form\' to
  // \'mymodule_main_form\'.
  $forms[\'mymodule_first_form\'] = array(
    \'callback\' => \'mymodule_main_form\',
  );

  // Reroute the $form_id and prepend an additional argument that gets passed to
  // the \'mymodule_main_form\' form builder function.
  $forms[\'mymodule_second_form\'] = array(
    \'callback\' => \'mymodule_main_form\',
    \'callback arguments\' => array(\'some parameter\'),
  );

  // Reroute the $form_id, but invoke the form builder function
  // \'mymodule_main_form_wrapper\' first, so we can prepopulate the $form array
  // that is passed to the actual form builder \'mymodule_main_form\'.
  $forms[\'mymodule_wrapped_form\'] = array(
    \'callback\' => \'mymodule_main_form\',
    \'wrapper_callback\' => \'mymodule_main_form_wrapper\',
  );

  return $forms;'),
  array('id' => '250','drupal_version' => '7','name' => 'hook_form_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_form_alter/7','short_description' => 'Perform alterations before a form is rendered.','description' => 'Perform alterations before a form is rendered. One popular use of this hook is to add form elements to the node form. When
altering a node form, the node object can be accessed at $form[\'#node\']. In addition to hook_form_alter(), which is called for all forms, there are
two more specific form hooks available. The first,
hook_form_BASE_FORM_ID_alter(), allows targeting of a form/forms via a base
form (if one exists). The second, hook_form_FORM_ID_alter(), can be used to
target a specific form directly. The call order is as follows: all existing form alter functions are called
for module A, then all for module B, etc., followed by all for any base
theme(s), and finally for the theme itself. The module order is determined
by system weight, then by module name. Within each module, form alter hooks are called in the following order:
first, hook_form_alter(); second, hook_form_BASE_FORM_ID_alter(); third,
hook_form_FORM_ID_alter(). So, for each module, the more general hooks are
called first followed by the more specific.','documentation' => '
 * Perform alterations before a form is rendered. One popular use of this hook is
 * to add form elements to the node form. When altering a node form, the node
 * object can be accessed at $form[\'#node\']. In addition to hook_form_alter(),
 * which is called for all forms, there are two more specific form hooks
 * available. The first, hook_form_BASE_FORM_ID_alter(), allows targeting of a
 * form/forms via a base form (if one exists). The second,
 * hook_form_FORM_ID_alter(), can be used to target a specific form directly.','params_docs' => '
 *
 * @param $form
 *   Nested array of form elements that comprise the form.
 * @param $form_state
 *   A keyed array containing the current state of the form. The arguments that.
 * @param $form_id
 *   String representing the name of the form itself. Typically this is the name
 *   of the function that generated the form.','signature' => 'hook_form_alter(&$form, &$form_state, $form_id)','sample_code' => '  if (isset($form[\'type\']) && $form[\'type\'][\'#value\'] . \'_node_settings\' == $form_id) {
    $form[\'workflow\'][\'upload_\' . $form[\'type\'][\'#value\']] = array(
      \'#type\' => \'radios\',
      \'#title\' => t(\'Attachments\'),
      \'#default_value\' => variable_get(\'upload_\' . $form[\'type\'][\'#value\'], 1),
      \'#options\' => array(t(\'Disabled\'), t(\'Enabled\')),
    );
  }'),
  array('id' => '251','drupal_version' => '7','name' => 'hook_form_BASE_FORM_ID_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_form_BASE_FORM_ID_alter/7','short_description' => 'Provide a form-specific alteration for shared (\'base\') forms.','description' => 'Provide a form-specific alteration for shared (\'base\') forms. By default, when drupal_get_form() is called, Drupal looks for a function
with the same name as the form ID, and uses that function to build the form.
In contrast, base forms allow multiple form IDs to be mapped to a single base
(also called \'factory\') form function. Modules can implement hook_form_BASE_FORM_ID_alter() to modify a specific
base form, rather than implementing hook_form_alter() and checking for
conditions that would identify the shared form constructor. To identify the base form ID for a particular form (or to determine whether
one exists) check the $form_state. The base form ID is stored under
$form_state[\'build_info\'][\'base_form_id\']. See hook_forms() for more information on how to implement base forms in
Drupal. Form alter hooks are called in the following order: hook_form_alter(),
hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See
hook_form_alter() for more details.','documentation' => '
 * Provide a form-specific alteration for shared (\'base\') forms. By default, when
 * drupal_get_form() is called, Drupal looks for a function with the same name as
 * the form ID, and uses that function to build the form. In contrast, base forms
 * allow multiple form IDs to be mapped to a single base (also called \'factory\')
 * form function. Modules can implement hook_form_BASE_FORM_ID_alter() to modify
 * a specific base form, rather than implementing hook_form_alter() and checking
 * for conditions that would identify the shared form constructor.','params_docs' => '
 *
 * @param $form
 *   Nested array of form elements that comprise the form.
 * @param $form_state
 *   A keyed array containing the current state of the form.
 * @param $form_id
 *   String representing the name of the form itself. Typically this is the name
 *   of the function that generated the form.','signature' => 'hook_form_BASE_FORM_ID_alter(&$form, &$form_state, $form_id)','sample_code' => '  // Modification for the form with the given BASE_FORM_ID goes here. For
  // example, if BASE_FORM_ID is "node_form", this code would run on every
  // node form, regardless of node type.

  // Add a checkbox to the node form about agreeing to terms of use.
  $form[\'terms_of_use\'] = array(
    \'#type\' => \'checkbox\',
    \'#title\' => t("I agree with the website\'s terms and conditions."),
    \'#required\' => TRUE,
  );'),
  array('id' => '252','drupal_version' => '7','name' => 'hook_form_FORM_ID_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_form_FORM_ID_alter/7','short_description' => 'Provide a form-specific alteration instead of the global hook_form_alter().','description' => 'Provide a form-specific alteration instead of the global hook_form_alter(). Modules can implement hook_form_FORM_ID_alter() to modify a specific form,
rather than implementing hook_form_alter() and checking the form ID, or
using long switch statements to alter multiple forms. Form alter hooks are called in the following order: hook_form_alter(),
hook_form_BASE_FORM_ID_alter(), hook_form_FORM_ID_alter(). See
hook_form_alter() for more details.','documentation' => '
 * Provide a form-specific alteration instead of the global hook_form_alter().
 * Modules can implement hook_form_FORM_ID_alter() to modify a specific form,
 * rather than implementing hook_form_alter() and checking the form ID, or using
 * long switch statements to alter multiple forms. Form alter hooks are called in
 * the following order: hook_form_alter(), hook_form_BASE_FORM_ID_alter(),
 * hook_form_FORM_ID_alter(). See hook_form_alter() for more details.','params_docs' => '
 *
 * @param $form
 *   Nested array of form elements that comprise the form.
 * @param $form_state
 *   A keyed array containing the current state of the form. The arguments that.
 * @param $form_id
 *   String representing the name of the form itself. Typically this is the name
 *   of the function that generated the form.','signature' => 'hook_form_FORM_ID_alter(&$form, &$form_state, $form_id)','sample_code' => '  // Modification for the form with the given form ID goes here. For example, if
  // FORM_ID is "user_register_form" this code would run only on the user
  // registration form.

  // Add a checkbox to registration form about agreeing to terms of use.
  $form[\'terms_of_use\'] = array(
    \'#type\' => \'checkbox\',
    \'#title\' => t("I agree with the website\'s terms and conditions."),
    \'#required\' => TRUE,
  );'),
  array('id' => '253','drupal_version' => '7','name' => 'hook_help','link' => 'http://api.drupal.org/api/drupal/modules!help!help.api.php/function/hook_help/7','short_description' => 'Provide online user help.','description' => 'Provide online user help. By implementing hook_help(), a module can make documentation available to
the user for the module as a whole, or for specific paths.  Help for
developers should usually be provided via function header comments in the
code, or in special API example files. For a detailed usage example, see page_example.module.','documentation' => '
 * Provide online user help. By implementing hook_help(), a module can make
 * documentation available to the user for the module as a whole, or for specific
 * paths. Help for developers should usually be provided via function header
 * comments in the code, or in special API example files. For a detailed usage
 * example, see page_example.module.','params_docs' => '
 *
 * @param $path
 *   The router menu path, as defined in.
 * @param $arg
 *   An array that corresponds to the return value of the.
 *
 * @return
 *   A localized string containing the help text.','signature' => 'hook_help($path, $arg)','sample_code' => '  switch ($path) {
    // Main module help for the block module
    case \'admin/help#block\':
      return \'<p>\' . t(\'Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.\', array(\'@blocks\' => url(\'admin/structure/block\'))) . \'</p>\';

      // Help for another path in the block module
    case \'admin/structure/block\':
      return \'<p>\' . t(\'This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the <em>Save blocks</em> button at the bottom of the page.\') . \'</p>\';
  }'),
  array('id' => '254','drupal_version' => '7','name' => 'hook_hook_info','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_hook_info/7','short_description' => 'Defines one or more hooks that are exposed by a module.','description' => 'Defines one or more hooks that are exposed by a module. Normally hooks do not need to be explicitly defined. However, by declaring a
hook explicitly, a module may define a "group" for it. Modules that implement
a hook may then place their implementation in either $module.module or in
$module.$group.inc. If the hook is located in $module.$group.inc, then that
file will be automatically loaded when needed.
In general, hooks that are rarely invoked and/or are very large should be
placed in a separate include file, while hooks that are very short or very
frequently called should be left in the main module file so that they are
always available.','documentation' => '
 * Defines one or more hooks that are exposed by a module. Normally hooks do not
 * need to be explicitly defined. However, by declaring a hook explicitly, a
 * module may define a "group" for it. Modules that implement a hook may then
 * place their implementation in either $module.module or in $module.$group.inc.
 * If the hook is located in $module.$group.inc, then that file will be
 * automatically loaded when needed. In general, hooks that are rarely invoked
 * and/or are very large should be placed in a separate include file, while hooks
 * that are very short or.','params_docs' => '
 *
 * @return
 *   An associative array whose keys are hook names and whose values are an
 *   associative array containing: group: A string defining the group to which
 *   the hook belongs. The module system will determine whether a file with the
 *   name $module.$group.inc exists, and automatically load it when required. See
 *   system_hook_info() for all hook groups defined by Drupal core.','signature' => 'hook_hook_info()','sample_code' => '  $hooks[\'token_info\'] = array(
    \'group\' => \'tokens\',
  );
  $hooks[\'tokens\'] = array(
    \'group\' => \'tokens\',
  );
  return $hooks;'),
  array('id' => '255','drupal_version' => '7','name' => 'hook_hook_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_hook_info_alter/7','short_description' => 'Alter information from hook_hook_info().','description' => 'Alter information from hook_hook_info().','documentation' => '
 * Alter information from hook_hook_info().','params_docs' => '
 *
 * @param $hooks
 *   Information gathered by.','signature' => 'hook_hook_info_alter(&$hooks)','sample_code' => '  // Our module wants to completely override the core tokens, so make
  // sure the core token hooks are not found.
  $hooks[\'token_info\'][\'group\'] = \'mytokens\';
  $hooks[\'tokens\'][\'group\'] = \'mytokens\';'),
  array('id' => '256','drupal_version' => '7','name' => 'hook_html_head_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_html_head_alter/7','short_description' => 'Alter XHTML HEAD tags before they are rendered by drupal_get_html_head().','description' => 'Alter XHTML HEAD tags before they are rendered by drupal_get_html_head(). Elements available to be altered are only those added using
drupal_add_html_head_link() or drupal_add_html_head(). CSS and JS files
are handled using drupal_add_css() and drupal_add_js(), so the head links
for those files will not appear in the $head_elements array.','documentation' => '
 * Alter XHTML HEAD tags before they are rendered by drupal_get_html_head().
 * Elements available to be altered are only those added using
 * drupal_add_html_head_link() or drupal_add_html_head(). CSS and JS files are
 * handled using drupal_add_css() and drupal_add_js(), so the head links for
 * those files will not appear in the $head_elements array.','params_docs' => '
 *
 * @param $head_elements
 *   An array of renderable elements. Generally the values of the #attributes
 *   array will be the most likely target for changes.','signature' => 'hook_html_head_alter(&$head_elements)','sample_code' => '  foreach ($head_elements as $key => $element) {
    if (isset($element[\'#attributes\'][\'rel\']) && $element[\'#attributes\'][\'rel\'] == \'canonical\') {
      // I want a custom canonical url.
      $head_elements[$key][\'#attributes\'][\'href\'] = mymodule_canonical_url();
    }
  }'),
  array('id' => '257','drupal_version' => '7','name' => 'hook_image_default_styles','link' => 'http://api.drupal.org/api/drupal/modules!image!image.api.php/function/hook_image_default_styles/7','short_description' => 'Provide module-based image styles for reuse throughout Drupal.','description' => 'Provide module-based image styles for reuse throughout Drupal. This hook allows your module to provide image styles. This may be useful if
you require images to fit within exact dimensions. Note that you should
attempt to re-use the default styles provided by Image module whenever
possible, rather than creating image styles that are specific to your module.
Image provides the styles "thumbnail", "medium", and "large". You may use this hook to more easily manage your site\'s changes by moving
existing image styles from the database to a custom module. Note however that
moving image styles to code instead storing them in the database has a
negligible effect on performance, since custom image styles are loaded
from the database all at once. Even if all styles are pulled from modules,
Image module will still perform the same queries to check the database for
any custom styles.','documentation' => '
 * Provide module-based image styles for reuse throughout Drupal. This hook
 * allows your module to provide image styles. This may be useful if you require
 * images to fit within exact dimensions. Note that you should attempt to re-use
 * the default styles provided by Image module whenever possible, rather than
 * creating image styles that are specific to your module. Image provides the
 * styles "thumbnail", "medium", and "large". You may use this hook to more
 * easily manage your site\'s changes by moving existing image styles from the
 * database to a custom module.','params_docs' => '
 *
 * @return
 *   An array of image styles, keyed by the style name.','signature' => 'hook_image_default_styles()','sample_code' => '  $styles = array();

  $styles[\'mymodule_preview\'] = array(
    \'effects\' => array(
      array(
        \'name\' => \'image_scale\',
        \'data\' => array(
          \'width\' => 400,
          \'height\' => 400,
          \'upscale\' => 1,
        ),
        \'weight\' => 0,
      ),
      array(
        \'name\' => \'image_desaturate\',
        \'data\' => array(),
        \'weight\' => 1,
      ),
    ),
  );

  return $styles;'),
  array('id' => '258','drupal_version' => '7','name' => 'hook_image_effect_info','link' => 'http://api.drupal.org/api/drupal/modules!image!image.api.php/function/hook_image_effect_info/7','short_description' => 'Define information about image effects provided by a module.','description' => 'Define information about image effects provided by a module. This hook enables modules to define image manipulation effects for use with
an image style.','documentation' => '
 * Define information about image effects provided by a module. This hook enables
 * modules to define image manipulation effects for use with an image style.','params_docs' => '
 *
 * @return
 *   An array of image effects. This array is keyed on the machine-readable
 *   effect name. Each effect is defined as an associative array containing the
 *   following items: "label": The human-readable name of the effect. "effect
 *   callback": The function to call to perform this image effect. "dimensions
 *   passthrough": (optional) Set this item if the effect doesn\'t change the
 *   dimensions of the image. "dimensions callback": (optional) The function to
 *   call to transform dimensions for this effect.','signature' => 'hook_image_effect_info()','sample_code' => '  $effects = array();

  $effects[\'mymodule_resize\'] = array(
    \'label\' => t(\'Resize\'),
    \'help\' => t(\'Resize an image to an exact set of dimensions, ignoring aspect ratio.\'),
    \'effect callback\' => \'mymodule_resize_effect\',
    \'dimensions callback\' => \'mymodule_resize_dimensions\',
    \'form callback\' => \'mymodule_resize_form\',
    \'summary theme\' => \'mymodule_resize_summary\',
  );

  return $effects;'),
  array('id' => '259','drupal_version' => '7','name' => 'hook_image_effect_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!image!image.api.php/function/hook_image_effect_info_alter/7','short_description' => 'Alter the information provided in hook_image_effect_info().','description' => 'Alter the information provided in hook_image_effect_info().','documentation' => '
 * Alter the information provided in hook_image_effect_info().','params_docs' => '
 *
 * @param $effects
 *   The array of image effects, keyed on the machine-readable effect name.','signature' => 'hook_image_effect_info_alter(&$effects)','sample_code' => '  // Override the Image module\'s crop effect with more options.
  $effects[\'image_crop\'][\'effect callback\'] = \'mymodule_crop_effect\';
  $effects[\'image_crop\'][\'dimensions callback\'] = \'mymodule_crop_dimensions\';
  $effects[\'image_crop\'][\'form callback\'] = \'mymodule_crop_form\';'),
  array('id' => '260','drupal_version' => '7','name' => 'hook_image_styles_alter','link' => 'http://api.drupal.org/api/drupal/modules!image!image.api.php/function/hook_image_styles_alter/7','short_description' => 'Modify any image styles provided by other modules or the user.','description' => 'Modify any image styles provided by other modules or the user. This hook allows modules to modify, add, or remove image styles. This may
be useful to modify default styles provided by other modules or enforce
that a specific effect is always enabled on a style. Note that modifications
to these styles may negatively affect the user experience, such as if an
effect is added to a style through this hook, the user may attempt to remove
the effect but it will be immediately be re-added. The best use of this hook is usually to modify default styles, which are not
editable by the user until they are overridden, so such interface
contradictions will not occur. This hook can target default (or user) styles
by checking the $style[\'storage\'] property. If your module needs to provide a new style (rather than modify an existing
one) use hook_image_default_styles() instead.','documentation' => '
 * Modify any image styles provided by other modules or the user. This hook
 * allows modules to modify, add, or remove image styles. This may be useful to
 * modify default styles provided by other modules or enforce that a specific
 * effect is always enabled on a style. Note that modifications to these styles
 * may negatively affect the user experience, such as if an effect is added to a
 * style through this hook, the user may attempt to remove the effect but it will
 * be immediately be re-added.','params_docs' => '','signature' => 'hook_image_styles_alter(&$styles)','sample_code' => '  // Check that we only affect a default style.
  if ($styles[\'thumbnail\'][\'storage\'] == IMAGE_STORAGE_DEFAULT) {
    // Add an additional effect to the thumbnail style.
    $styles[\'thumbnail\'][\'effects\'][] = array(
      \'name\' => \'image_desaturate\',
      \'data\' => array(),
      \'weight\' => 1,
      \'effect callback\' => \'image_desaturate_effect\',
    );
  }'),
  array('id' => '261','drupal_version' => '7','name' => 'hook_image_style_delete','link' => 'http://api.drupal.org/api/drupal/modules!image!image.api.php/function/hook_image_style_delete/7','short_description' => 'Respond to image style deletion.','description' => 'Respond to image style deletion. This hook enables modules to update settings when a image style is being
deleted. If a style is deleted, a replacement name may be specified in
$style[\'name\'] and the style being deleted will be specified in
$style[\'old_name\'].','documentation' => '
 * Respond to image style deletion. This hook enables modules to update settings
 * when a image style is being deleted. If a style is deleted, a replacement name
 * may be specified in $style[\'name\'] and the style being deleted will be
 * specified in $style[\'old_name\'].','params_docs' => '
 *
 * @param $style
 *   The image style array that being deleted.','signature' => 'hook_image_style_delete($style)','sample_code' => '  // Administrators can choose an optional replacement style when deleting.
  // Update the modules style variable accordingly.
  if (isset($style[\'old_name\']) && $style[\'old_name\'] == variable_get(\'mymodule_image_style\', \'\')) {
    variable_set(\'mymodule_image_style\', $style[\'name\']);
  }'),
  array('id' => '262','drupal_version' => '7','name' => 'hook_image_style_flush','link' => 'http://api.drupal.org/api/drupal/modules!image!image.api.php/function/hook_image_style_flush/7','short_description' => 'Respond to image style flushing.','description' => 'Respond to image style flushing. This hook enables modules to take effect when a style is being flushed (all
images are being deleted from the server and regenerated). Any
module-specific caches that contain information related to the style should
be cleared using this hook. This hook is called whenever a style is updated,
deleted, or any effect associated with the style is update or deleted.','documentation' => '
 * Respond to image style flushing. This hook enables modules to take effect when
 * a style is being flushed (all images are being deleted from the server and
 * regenerated). Any module-specific caches that contain information related to
 * the style should be cleared using this hook. This hook is called whenever a
 * style is updated, deleted, or any effect associated with the style is update
 * or deleted.','params_docs' => '
 *
 * @param $style
 *   The image style array that is being flushed.','signature' => 'hook_image_style_flush($style)','sample_code' => '  // Empty cached data that contains information about the style.
  cache_clear_all(\'*\', \'cache_mymodule\', TRUE);'),
  array('id' => '263','drupal_version' => '7','name' => 'hook_image_style_save','link' => 'http://api.drupal.org/api/drupal/modules!image!image.api.php/function/hook_image_style_save/7','short_description' => 'Respond to image style updating.','description' => 'Respond to image style updating. This hook enables modules to update settings that might be affected by
changes to an image. For example, updating a module specific variable to
reflect a change in the image style\'s name.','documentation' => '
 * Respond to image style updating. This hook enables modules to update settings
 * that might be affected by changes to an image. For example, updating a module
 * specific variable to reflect a change in the image style\'s name.','params_docs' => '
 *
 * @param $style
 *   The image style array that is being updated.','signature' => 'hook_image_style_save($style)','sample_code' => '  // If a module defines an image style and that style is renamed by the user
  // the module should update any references to that style.
  if (isset($style[\'old_name\']) && $style[\'old_name\'] == variable_get(\'mymodule_image_style\', \'\')) {
    variable_set(\'mymodule_image_style\', $style[\'name\']);
  }'),
  array('id' => '264','drupal_version' => '7','name' => 'hook_image_toolkits','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_image_toolkits/7','short_description' => 'Define image toolkits provided by this module.','description' => 'Define image toolkits provided by this module. The file which includes each toolkit\'s functions must be declared as part of
the files array in the module .info file so that the registry will find and
parse it. The toolkit\'s functions must be named image_toolkitname_operation().
where the operation may be: \'load\': Required. See image_gd_load() for usage.
\'save\': Required. See image_gd_save() for usage.
\'settings\': Optional. See image_gd_settings() for usage.
\'resize\': Optional. See image_gd_resize() for usage.
\'rotate\': Optional. See image_gd_rotate() for usage.
\'crop\': Optional. See image_gd_crop() for usage.
\'desaturate\': Optional. See image_gd_desaturate() for usage.','documentation' => '
 * Define image toolkits provided by this module. The file which includes each
 * toolkit\'s functions must be declared as part of the files array in the module
 * .info file so that the registry will find and parse it. The toolkit\'s
 * functions must be named image_toolkitname_operation(). where the operation may
 * be: \'load\': Required. See image_gd_load() for usage. \'save\': Required. See
 * image_gd_save() for usage. \'settings\': Optional. See image_gd_settings() for
 * usage. \'resize\': Optional. See image_gd_resize() for usage. \'rotate\':
 * Optional.','params_docs' => '
 *
 * @return
 *   An array with the toolkit name as keys and sub-arrays with these keys:
 *   \'title\': A string with the toolkit\'s title. \'available\': A Boolean value to
 *   indicate that the toolkit is operating properly, e.g. all required libraries
 *   exist.','signature' => 'hook_image_toolkits()','sample_code' => '  return array(
    \'working\' => array(
      \'title\' => t(\'A toolkit that works.\'),
      \'available\' => TRUE,
    ),
    \'broken\' => array(
      \'title\' => t(\'A toolkit that is "broken" and will not be listed.\'),
      \'available\' => FALSE,
    ),
  );'),
  array('id' => '265','drupal_version' => '7','name' => 'hook_init','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_init/7','short_description' => 'Perform setup tasks for non-cached page requests.','description' => 'Perform setup tasks for non-cached page requests. This hook is run at the beginning of the page request. It is typically
used to set up global parameters that are needed later in the request.
When this hook is called, the theme and all modules are already loaded in
memory. This hook is not run on cached pages. To add CSS or JS that should be present on all pages, modules should not
implement this hook, but declare these files in their .info file.','documentation' => '
 * Perform setup tasks for non-cached page requests. This hook is run at the
 * beginning of the page request. It is typically used to set up global
 * parameters that are needed later in the request. When this hook is called, the
 * theme and all modules are already loaded in memory. This hook is not run on
 * cached pages. To add CSS or JS that should be present on all pages, modules
 * should not implement this hook, but declare these files in their .info file.','params_docs' => '','signature' => 'hook_init()','sample_code' => '  // Since this file should only be loaded on the front page, it cannot be
  // declared in the info file.
  if (drupal_is_front_page()) {
    drupal_add_css(drupal_get_path(\'module\', \'foo\') . \'/foo.css\');
  }'),
  array('id' => '266','drupal_version' => '7','name' => 'hook_insert','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_insert/7','short_description' => 'Respond to creation of a new node.','description' => 'Respond to creation of a new node. This hook is invoked only on the module that defines the node\'s content type
(use hook_node_insert() to act on all node insertions). This hook is invoked from node_save() after the node is inserted into the
node table in the database, before field_attach_insert() is called, and
before hook_node_insert() is invoked.','documentation' => '
 * Respond to creation of a new node. This hook is invoked only on the module
 * that defines the node\'s content type (use hook_node_insert() to act on all
 * node insertions). This hook is invoked from node_save() after the node is
 * inserted into the node table in the database, before field_attach_insert() is
 * called, and before hook_node_insert() is invoked.','params_docs' => '
 *
 * @param $node
 *   The node that is being created.','signature' => 'hook_insert($node)','sample_code' => '  db_insert(\'mytable\')
    ->fields(array(
    \'nid\' => $node->nid,
    \'extra\' => $node->extra,
  ))
    ->execute();'),
  array('id' => '267','drupal_version' => '7','name' => 'hook_install','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_install/7','short_description' => 'Perform setup tasks when the module is installed.','description' => 'Perform setup tasks when the module is installed. If the module implements hook_schema(), the database tables will
be created before this hook is fired. Implementations of this hook are by convention declared in the module\'s
.install file. The implementation can rely on the .module file being loaded.
The hook will only be called the first time a module is enabled or after it
is re-enabled after being uninstalled. The module\'s schema version will be
set to the module\'s greatest numbered update hook. Because of this, any time
a hook_update_N() is added to the module, this function needs to be updated
to reflect the current version of the database schema. See the Schema API documentation at
http://drupal.org/node/146843
for details on hook_schema and how database tables are defined. Note that since this function is called from a full bootstrap, all functions
(including those in modules enabled by the current page request) are
available when this hook is called. Use cases could be displaying a user
message, or calling a module function necessary for initial setup, etc. Please be sure that anything added or modified in this function that can
be removed during uninstall should be removed with hook_uninstall().','documentation' => '
 * Perform setup tasks when the module is installed. If the module implements
 * hook_schema(), the database tables will be created before this hook is fired.
 * Implementations of this hook are by convention declared in the module\'s
 * .install file. The implementation can rely on the .module file being loaded.
 * The hook will only be called the first time a module is enabled or after it is
 * re-enabled after being uninstalled. The module\'s schema version will be set to
 * the module\'s greatest numbered update hook.','params_docs' => '','signature' => 'hook_install()','sample_code' => '  // Populate the default {node_access} record.
  db_insert(\'node_access\')
    ->fields(array(
    \'nid\' => 0,
    \'gid\' => 0,
    \'realm\' => \'all\',
    \'grant_view\' => 1,
    \'grant_update\' => 0,
    \'grant_delete\' => 0,
  ))
    ->execute();'),
  array('id' => '268','drupal_version' => '7','name' => 'hook_install_tasks','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_install_tasks/7','short_description' => 'Return an array of tasks to be performed by an installation profile.','description' => 'Return an array of tasks to be performed by an installation profile. Any tasks you define here will be run, in order, after the installer has
finished the site configuration step but before it has moved on to the
final import of languages and the end of the installation. You can have any
number of custom tasks to perform during this phase. Each task you define here corresponds to a callback function which you must
separately define and which is called when your task is run. This function
will receive the global installation state variable, $install_state, as
input, and has the opportunity to access or modify any of its settings. See
the install_state_defaults() function in the installer for the list of
$install_state settings used by Drupal core. At the end of your task function, you can indicate that you want the
installer to pause and display a page to the user by returning any themed
output that should be displayed on that page (but see below for tasks that
use the form API or batch API; the return values of these task functions are
handled differently). You should also use drupal_set_title() within the task
callback function to set a custom page title. For some tasks, however, you
may want to simply do some processing and pass control to the next task
without ending the page request; to indicate this, simply do not send back
a return value from your task function at all. This can be used, for
example, by installation profiles that need to configure certain site
settings in the database without obtaining any input from the user. The task function is treated specially if it defines a form or requires
batch processing; in that case, you should return either the form API
definition or batch API array, as appropriate. See below for more
information on the \'type\' key that you must define in the task definition
to inform the installer that your task falls into one of those two
categories. It is important to use these APIs directly, since the installer
may be run non-interactively (for example, via a command line script), all
in one page request; in that case, the installer will automatically take
care of submitting forms and processing batches correctly for both types of
installations. You can inspect the $install_state[\'interactive\'] boolean to
see whether or not the current installation is interactive, if you need
access to this information. Remember that a user installing Drupal interactively will be able to reload
an installation page multiple times, so you should use variable_set() and
variable_get() if you are collecting any data that you need to store and
inspect later. It is important to remove any temporary variables using
variable_del() before your last task has completed and control is handed
back to the installer.','documentation' => '
 * Return an array of tasks to be performed by an installation profile. Any tasks
 * you define here will be run, in order, after the installer has finished the
 * site configuration step but before it has moved on to the final import of
 * languages and the end of the installation. You can have any number of custom
 * tasks to perform during this phase. Each task you define here corresponds to a
 * callback function which you must separately define and which is called when
 * your task is run.','params_docs' => '
 *
 * @return
 *   A keyed array of tasks the profile will perform during the final stage of
 *   the installation. Each key represents the name of a function (usually a
 *   function defined by this profile, although that is not strictly required)
 *   that is called when that task is run. The values are associative arrays
 *   containing the following key-value pairs (all of which are optional):
 *   \'display_name\' The human-readable name of the task. This will be displayed
 *   to the user while the installer is running, along with a list of other tasks
 *   that are being run.','signature' => 'hook_install_tasks()','sample_code' => '  // Here, we define a variable to allow tasks to indicate that a particular,
  // processor-intensive batch process needs to be triggered later on in the
  // installation.
  $myprofile_needs_batch_processing = variable_get(\'myprofile_needs_batch_processing\', FALSE);
  $tasks = array(
    // This is an example of a task that defines a form which the user who is
    // installing the site will be asked to fill out. To implement this task,
    // your profile would define a function named myprofile_data_import_form()
    // as a normal form API callback function, with associated validation and
    // submit handlers. In the submit handler, in addition to saving whatever
    // other data you have collected from the user, you might also call
    // variable_set(\'myprofile_needs_batch_processing\', TRUE) if the user has
    // entered data which requires that batch processing will need to occur
    // later on.
    \'myprofile_data_import_form\' => array(
      \'display_name\' => st(\'Data import options\'),
      \'type\' => \'form\',
    ),
    // Similarly, to implement this task, your profile would define a function
    // named myprofile_settings_form() with associated validation and submit
    // handlers. This form might be used to collect and save additional
    // information from the user that your profile needs. There are no extra
    // steps required for your profile to act as an "installation wizard"; you
    // can simply define as many tasks of type \'form\' as you wish to execute,
    // and the forms will be presented to the user, one after another.
    \'myprofile_settings_form\' => array(
      \'display_name\' => st(\'Additional options\'),
      \'type\' => \'form\',
    ),
    // This is an example of a task that performs batch operations. To
    // implement this task, your profile would define a function named
    // myprofile_batch_processing() which returns a batch API array definition
    // that the installer will use to execute your batch operations. Due to the
    // \'myprofile_needs_batch_processing\' variable used here, this task will be
    // hidden and skipped unless your profile set it to TRUE in one of the
    // previous tasks.
    \'myprofile_batch_processing\' => array(
      \'display_name\' => st(\'Import additional data\'),
      \'display\' => $myprofile_needs_batch_processing,
      \'type\' => \'batch\',
      \'run\' => $myprofile_needs_batch_processing ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    ),
    // This is an example of a task that will not be displayed in the list that
    // the user sees. To implement this task, your profile would define a
    // function named myprofile_final_site_setup(), in which additional,
    // automated site setup operations would be performed. Since this is the
    // last task defined by your profile, you should also use this function to
    // call variable_del(\'myprofile_needs_batch_processing\') and clean up the
    // variable that was used above. If you want the user to pass to the final
    // Drupal installation tasks uninterrupted, return no output from this
    // function. Otherwise, return themed output that the user will see (for
    // example, a confirmation page explaining that your profile\'s tasks are
    // complete, with a link to reload the current page and therefore pass on
    // to the final Drupal installation tasks when the user is ready to do so).
    \'myprofile_final_site_setup\' => array(
    ),
  );
  return $tasks;'),
  array('id' => '269','drupal_version' => '7','name' => 'hook_install_tasks_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_install_tasks_alter/7','short_description' => 'Alter the full list of installation tasks.','description' => 'Alter the full list of installation tasks.','documentation' => '
 * Alter the full list of installation tasks.','params_docs' => '
 *
 * @param $tasks
 *   An array of all available installation tasks, including those provided by
 *   Drupal core. You can modify this array to change or replace any part of the
 *   Drupal installation process that occurs after the installation profile is
 *   selected.
 * @param $install_state
 *   An array of information about the current installation state.','signature' => 'hook_install_tasks_alter(&$tasks, $install_state)','sample_code' => '  // Replace the "Choose language" installation task provided by Drupal core
  // with a custom callback function defined by this installation profile.
  $tasks[\'install_select_locale\'][\'function\'] = \'myprofile_locale_selection\';'),
  array('id' => '270','drupal_version' => '7','name' => 'hook_js_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_js_alter/7','short_description' => 'Perform necessary alterations to the JavaScript before it is presented on the page.','description' => 'Perform necessary alterations to the JavaScript before it is presented on
the page.','documentation' => '
 * Perform necessary alterations to the JavaScript before it is presented on the
 * page.','params_docs' => '
 *
 * @param $javascript
 *   An array of all JavaScript being presented on the page.','signature' => 'hook_js_alter(&$javascript)','sample_code' => '  // Swap out jQuery to use an updated version of the library.
  $javascript[\'misc/jquery.js\'][\'data\'] = drupal_get_path(\'module\', \'jquery_update\') . \'/jquery.js\';'),
  array('id' => '271','drupal_version' => '7','name' => 'hook_language_fallback_candidates_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!language.api.php/function/hook_language_fallback_candidates_alter/7','short_description' => 'Perform alterations on the language fallback candidates.','description' => 'Perform alterations on the language fallback candidates.','documentation' => '
 * Perform alterations on the language fallback candidates.','params_docs' => '
 *
 * @param $fallback_candidates
 *   An array of language codes whose order will determine the language fallback
 *   order.','signature' => 'hook_language_fallback_candidates_alter(array &$fallback_candidates)','sample_code' => '  $fallback_candidates = array_reverse($fallback_candidates);'),
  array('id' => '272','drupal_version' => '7','name' => 'hook_language_init','link' => 'http://api.drupal.org/api/drupal/modules!system!language.api.php/function/hook_language_init/7','short_description' => 'Allows modules to act after language initialization has been performed.','description' => 'Allows modules to act after language initialization has been performed. This is primarily needed to provide translation for configuration variables
in the proper bootstrap phase. Variables are user-defined strings and
therefore should not be translated via t(), since the source string can
change without notice and any previous translation would be lost. Moreover,
since variables can be used in the bootstrap phase, we need a bootstrap hook
to provide a translation early enough to avoid misalignments between code
using the original values and code using the translated values. However
modules implementing hook_boot() should be aware that language initialization
did not happen yet and thus they cannot rely on translated variables.','documentation' => '
 * Allows modules to act after language initialization has been performed. This
 * is primarily needed to provide translation for configuration variables in the
 * proper bootstrap phase. Variables are user-defined strings and therefore
 * should not be translated via t(), since the source string can change without
 * notice and any previous translation would be lost. Moreover, since variables
 * can be used in the bootstrap phase, we need a bootstrap hook to provide a
 * translation early enough to avoid misalignments between code using the
 * original values and code using.','params_docs' => '','signature' => 'hook_language_init()','sample_code' => '  global $language, $conf;

  switch ($language->language) {
    case \'it\':
      $conf[\'site_name\'] = \'Il mio sito Drupal\';
      break;

    case \'fr\':
      $conf[\'site_name\'] = \'Mon site Drupal\';
      break;
  }'),
  array('id' => '273','drupal_version' => '7','name' => 'hook_language_negotiation_info','link' => 'http://api.drupal.org/api/drupal/modules!system!language.api.php/function/hook_language_negotiation_info/7','short_description' => 'Allow modules to define their own language providers.','description' => 'Allow modules to define their own language providers.','documentation' => '
 * Allow modules to define their own language providers.','params_docs' => '
 *
 * @return
 *   An array of language provider definitions. Each language provider has an
 *   identifier key. The language provider definition is an associative array
 *   that may contain the following key-value pairs: "types": An array of allowed
 *   language types. If a language provider does not specify which language types
 *   it should be used with, it will be available for all the configurable
 *   language types. "callbacks": An array of functions that will be called to
 *   perform various tasks. Possible key-value pairs are: "language": Required.','signature' => 'hook_language_negotiation_info()','sample_code' => '  return array(
    \'custom_language_provider\' => array(
      \'callbacks\' => array(
        \'language\' => \'custom_language_provider_callback\',
        \'switcher\' => \'custom_language_switcher_callback\',
        \'url_rewrite\' => \'custom_language_url_rewrite_callback\',
      ),
      \'file\' => drupal_get_path(\'module\', \'custom\') . \'/custom.module\',
      \'weight\' => -4,
      \'types\' => array(\'custom_language_type\'),
      \'name\' => t(\'Custom language provider\'),
      \'description\' => t(\'This is a custom language provider.\'),
      \'cache\' => 0,
    ),
  );'),
  array('id' => '274','drupal_version' => '7','name' => 'hook_language_negotiation_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!language.api.php/function/hook_language_negotiation_info_alter/7','short_description' => 'Perform alterations on language providers.','description' => 'Perform alterations on language providers.','documentation' => '
 * Perform alterations on language providers.','params_docs' => '
 *
 * @param $language_providers
 *   Array of language provider definitions.','signature' => 'hook_language_negotiation_info_alter(array &$language_providers)','sample_code' => '  if (isset($language_providers[\'custom_language_provider\'])) {
    $language_providers[\'custom_language_provider\'][\'config\'] = \'admin/config/regional/language/configure/custom-language-provider\';
  }'),
  array('id' => '275','drupal_version' => '7','name' => 'hook_language_switch_links_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!language.api.php/function/hook_language_switch_links_alter/7','short_description' => 'Perform alterations on language switcher links.','description' => 'Perform alterations on language switcher links. A language switcher link may need to point to a different path or use a
translated link text before going through l(), which will just handle the
path aliases.','documentation' => '
 * Perform alterations on language switcher links. A language switcher link may
 * need to point to a different path or use a translated link text before going
 * through l(), which will just handle the path aliases.','params_docs' => '
 *
 * @param $links
 *   Nested array of links keyed by language code.
 * @param $type
 *   The language type the links will switch.
 * @param $path
 *   The current path.','signature' => 'hook_language_switch_links_alter(array &$links, $type, $path)','sample_code' => '  global $language;

  if ($type == LANGUAGE_TYPE_CONTENT && isset($links[$language->language])) {
    foreach ($links[$language->language] as $link) {
      $link[\'attributes\'][\'class\'][] = \'active-language\';
    }
  }'),
  array('id' => '276','drupal_version' => '7','name' => 'hook_language_types_info','link' => 'http://api.drupal.org/api/drupal/modules!system!language.api.php/function/hook_language_types_info/7','short_description' => 'Allow modules to define their own language types.','description' => 'Allow modules to define their own language types.','documentation' => '
 * Allow modules to define their own language types.','params_docs' => '
 *
 * @return
 *   An array of language type definitions. Each language type has an identifier
 *   key. The language type definition is an associative array that may contain
 *   the following key-value pairs: "name": The human-readable language type
 *   identifier. "description": A description of the language type. "fixed": An
 *   array of language provider identifiers. Defining this key makes the language
 *   type non-configurable.','signature' => 'hook_language_types_info()','sample_code' => '  return array(
    \'custom_language_type\' => array(
      \'name\' => t(\'Custom language\'),
      \'description\' => t(\'A custom language type.\'),
    ),
    \'fixed_custom_language_type\' => array(
      \'fixed\' => array(\'custom_language_provider\'),
    ),
  );'),
  array('id' => '277','drupal_version' => '7','name' => 'hook_language_types_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!language.api.php/function/hook_language_types_info_alter/7','short_description' => 'Perform alterations on language types.','description' => 'Perform alterations on language types.','documentation' => '
 * Perform alterations on language types.','params_docs' => '
 *
 * @param $language_types
 *   Array of language type definitions.','signature' => 'hook_language_types_info_alter(array &$language_types)','sample_code' => '  if (isset($language_types[\'custom_language_type\'])) {
    $language_types[\'custom_language_type_custom\'][\'description\'] = t(\'A far better description.\');
  }'),
  array('id' => '278','drupal_version' => '7','name' => 'hook_library','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_library/7','short_description' => 'Registers JavaScript/CSS libraries associated with a module.','description' => 'Registers JavaScript/CSS libraries associated with a module. Modules implementing this return an array of arrays. The key to each
sub-array is the machine readable name of the library. Each library may
contain the following items: \'title\': The human readable name of the library.
\'website\': The URL of the library\'s web site.
\'version\': A string specifying the version of the library; intentionally
not a float because a version like "1.2.3" is not a valid float. Use PHP\'s
version_compare() to compare different versions.
\'js\': An array of JavaScript elements; each element\'s key is used as $data
argument, each element\'s value is used as $options array for
drupal_add_js(). To add library-specific (not module-specific) JavaScript
settings, the key may be skipped, the value must specify
\'type\' => \'setting\', and the actual settings must be contained in a \'data\'
element of the value.
\'css\': Like \'js\', an array of CSS elements passed to drupal_add_css().
\'dependencies\': An array of libraries that are required for a library. Each
element is an array listing the module and name of another library. Note
that all dependencies for each dependent library will also be added when
this library is added. Registered information for a library should contain re-usable data only.
Module- or implementation-specific data and integration logic should be added
separately.','documentation' => '
 * Registers JavaScript/CSS libraries associated with a module. Modules
 * implementing this return an array of arrays. The key to each sub-array is the
 * machine readable name of the library. Each library may contain the following
 * items: \'title\': The human readable name of the library. \'website\': The URL of
 * the library\'s web site. \'version\': A string specifying the version of the
 * library; intentionally not a float because a version like "1.2.3" is not a
 * valid float. Use PHP\'s version_compare() to compare different versions.','params_docs' => '
 *
 * @return
 *   An array defining libraries associated with a module.','signature' => 'hook_library()','sample_code' => '  // Library One.
  $libraries[\'library-1\'] = array(
    \'title\' => \'Library One\',
    \'website\' => \'http://example.com/library-1\',
    \'version\' => \'1.2\',
    \'js\' => array(
      drupal_get_path(\'module\', \'my_module\') . \'/library-1.js\' => array(),
    ),
    \'css\' => array(
      drupal_get_path(\'module\', \'my_module\') . \'/library-2.css\' => array(
        \'type\' => \'file\',
        \'media\' => \'screen\',
      ),
    ),
  );
  // Library Two.
  $libraries[\'library-2\'] = array(
    \'title\' => \'Library Two\',
    \'website\' => \'http://example.com/library-2\',
    \'version\' => \'3.1-beta1\',
    \'js\' => array(
      // JavaScript settings may use the \'data\' key.
      array(
        \'type\' => \'setting\',
        \'data\' => array(\'library2\' => TRUE),
      ),
    ),
    \'dependencies\' => array(
      // Require jQuery UI core by System module.
      array(\'system\', \'ui\'),
      // Require our other library.
      array(\'my_module\', \'library-1\'),
      // Require another library.
      array(\'other_module\', \'library-3\'),
    ),
  );
  return $libraries;'),
  array('id' => '279','drupal_version' => '7','name' => 'hook_library_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_library_alter/7','short_description' => 'Alters the JavaScript/CSS library registry.','description' => 'Alters the JavaScript/CSS library registry. Allows certain, contributed modules to update libraries to newer versions
while ensuring backwards compatibility. In general, such manipulations should
only be done by designated modules, since most modules that integrate with a
certain library also depend on the API of a certain library version.','documentation' => '
 * Alters the JavaScript/CSS library registry. Allows certain, contributed
 * modules to update libraries to newer versions while ensuring backwards
 * compatibility. In general, such manipulations should only be done by
 * designated modules, since most modules that integrate with a certain library
 * also depend on the API of a certain library version.','params_docs' => '
 *
 * @param $libraries
 *   The JavaScript/CSS libraries provided by $module. Keyed by internal library
 *   name and passed by reference.
 * @param $module
 *   The name of the module that registered the libraries.','signature' => 'hook_library_alter(&$libraries, $module)','sample_code' => '  // Update Farbtastic to version 2.0.
  if ($module == \'system\' && isset($libraries[\'farbtastic\'])) {
    // Verify existing version is older than the one we are updating to.
    if (version_compare($libraries[\'farbtastic\'][\'version\'], \'2.0\', \'<\')) {
      // Update the existing Farbtastic to version 2.0.
      $libraries[\'farbtastic\'][\'version\'] = \'2.0\';
      $libraries[\'farbtastic\'][\'js\'] = array(
        drupal_get_path(\'module\', \'farbtastic_update\') . \'/farbtastic-2.0.js\' => array(),
      );
    }
  }'),
  array('id' => '280','drupal_version' => '7','name' => 'hook_load','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_load/7','short_description' => 'Act on nodes being loaded from the database.','description' => 'Act on nodes being loaded from the database. This hook is invoked only on the module that defines the node\'s content type
(use hook_node_load() to respond to all node loads). This hook is invoked during node loading, which is handled by entity_load(),
via classes NodeController and DrupalDefaultEntityController. After the node
information is read from the database or the entity cache, hook_load() is
invoked on the node\'s content type module, then field_attach_node_revision()
or field_attach_load() is called, then hook_entity_load() is invoked on all
implementing modules, and finally hook_node_load() is invoked on all
implementing modules. This hook should only be used to add information that is not in the node or
node revisions table, not to replace information that is in these tables
(which could interfere with the entity cache). For performance reasons,
information for all available nodes should be loaded in a single query where
possible.','documentation' => '
 * Act on nodes being loaded from the database. This hook is invoked only on the
 * module that defines the node\'s content type (use hook_node_load() to respond
 * to all node loads). This hook is invoked during node loading, which is handled
 * by entity_load(), via classes NodeController and
 * DrupalDefaultEntityController. After the node information is read from the
 * database or the entity cache, hook_load() is invoked on the node\'s content
 * type module, then field_attach_node_revision() or field_attach_load() is
 * called, then hook_entity_load() is invoked on.','params_docs' => '
 *
 * @param $nodes
 *   An array of the nodes being loaded, keyed by nid.','signature' => 'hook_load($nodes)','sample_code' => '  $result = db_query(\'SELECT nid, foo FROM {mytable} WHERE nid IN (:nids)\', array(\':nids\' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->foo = $record->foo;
  }'),
  array('id' => '281','drupal_version' => '7','name' => 'hook_locale','link' => 'http://api.drupal.org/api/drupal/modules!locale!locale.api.php/function/hook_locale/7','short_description' => 'Allows modules to define their own text groups that can be translated.','description' => 'Allows modules to define their own text groups that can be translated.','documentation' => '
 * Allows modules to define their own text groups that can be translated.','params_docs' => '
 *
 * @param $op
 *   Type of operation. Currently, only supports \'groups\'.','signature' => 'hook_locale($op = \'groups\')','sample_code' => '  switch ($op) {
    case \'groups\':
      return array(\'custom\' => t(\'Custom\'));
  }'),
  array('id' => '282','drupal_version' => '7','name' => 'hook_mail','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_mail/7','short_description' => 'Prepare a message based on parameters; called from drupal_mail().','description' => 'Prepare a message based on parameters; called from drupal_mail(). Note that hook_mail(), unlike hook_mail_alter(), is only called on the
$module argument to drupal_mail(), not all modules.','documentation' => '
 * Prepare a message based on parameters; called from drupal_mail(). Note that
 * hook_mail(), unlike hook_mail_alter(), is only called on the $module argument
 * to drupal_mail(), not all modules.','params_docs' => '
 *
 * @param $key
 *   An identifier of the mail.
 * @param $message
 *   An array to be filled in. Elements in this array include: id: An ID to
 *   identify the mail sent. Look at module source code or drupal_mail() for
 *   possible id values. to: The address or addresses the message will be sent
 *   to. The formatting of this string must comply with RFC 2822. subject:
 *   Subject of the e-mail to be sent. This must not contain any newline
 *   characters, or the mail may not be sent properly. drupal_mail() sets this to
 *   an empty string when the hook is invoked. body: An array of lines containing
 *   the message to be sent. Drupal will format the correct line endings for you.
 *   drupal_mail() sets this to an empty array when the hook is invoked. from:
 *   The address the message will be marked as being from, which is set by
 *   drupal_mail() to either a custom address or the site-wide default.
 * @param $params
 *   An array of parameters supplied by the caller of.','signature' => 'hook_mail($key, &$message, $params)','sample_code' => '  $account = $params[\'account\'];
  $context = $params[\'context\'];
  $variables = array(
    \'%site_name\' => variable_get(\'site_name\', \'Drupal\'),
    \'%username\' => format_username($account),
  );
  if ($context[\'hook\'] == \'taxonomy\') {
    $entity = $params[\'entity\'];
    $vocabulary = taxonomy_vocabulary_load($entity->vid);
    $variables += array(
      \'%term_name\' => $entity->name,
      \'%term_description\' => $entity->description,
      \'%term_id\' => $entity->tid,
      \'%vocabulary_name\' => $vocabulary->name,
      \'%vocabulary_description\' => $vocabulary->description,
      \'%vocabulary_id\' => $vocabulary->vid,
    );
  }

  // Node-based variable translation is only available if we have a node.
  if (isset($params[\'node\'])) {
    $node = $params[\'node\'];
    $variables += array(
      \'%uid\' => $node->uid,
      \'%node_url\' => url(\'node/\' . $node->nid, array(\'absolute\' => TRUE)),
      \'%node_type\' => node_type_get_name($node),
      \'%title\' => $node->title,
      \'%teaser\' => $node->teaser,
      \'%body\' => $node->body,
    );
  }
  $subject = strtr($context[\'subject\'], $variables);
  $body = strtr($context[\'message\'], $variables);
  $message[\'subject\'] .= str_replace(array("\\r", "\\n"), \'\', $subject);
  $message[\'body\'][] = drupal_html_to_text($body);'),
  array('id' => '283','drupal_version' => '7','name' => 'hook_mail_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_mail_alter/7','short_description' => 'Alter an email message created with the drupal_mail() function.','description' => 'Alter an email message created with the drupal_mail() function. hook_mail_alter() allows modification of email messages created and sent
with drupal_mail(). Usage examples include adding and/or changing message
text, message fields, and message headers. Email messages sent using functions other than drupal_mail() will not
invoke hook_mail_alter(). For example, a contributed module directly
calling the drupal_mail_system()->mail() or PHP mail() function
will not invoke this hook. All core modules use drupal_mail() for
messaging, it is best practice but not mandatory in contributed modules.','documentation' => '
 * Alter an email message created with the drupal_mail() function.
 * hook_mail_alter() allows modification of email messages created and sent with
 * drupal_mail(). Usage examples include adding and/or changing message text,
 * message fields, and message headers. Email messages sent using functions other
 * than drupal_mail() will not invoke hook_mail_alter(). For example, a
 * contributed module directly calling the drupal_mail_system()->mail() or PHP
 * mail() function will not invoke this hook.','params_docs' => '
 *
 * @param $message
 *   An array containing the message data. Keys in this array include: \'id\': The
 *   drupal_mail() id of the message. Look at module source code or drupal_mail()
 *   for possible id values. \'to\': The address or addresses the message will be
 *   sent to. The formatting of this string must comply with RFC 2822. \'from\':
 *   The address the message will be marked as being from, which is either a
 *   custom address or the site-wide default email address. \'subject\': Subject of
 *   the email to be sent. This must not contain any newline characters, or the
 *   email may not be sent properly. \'body\': An array of strings containing the
 *   message text. The message body is created by concatenating the individual
 *   array strings into a single text string using "\\n\\n" as a separator.','signature' => 'hook_mail_alter(&$message)','sample_code' => '  if ($message[\'id\'] == \'modulename_messagekey\') {
    if (!example_notifications_optin($message[\'to\'], $message[\'id\'])) {
      // If the recipient has opted to not receive such messages, cancel
      // sending.
      $message[\'send\'] = FALSE;
      return;
    }
    $message[\'body\'][] = "--\\nMail sent out from " . variable_get(\'site_name\', t(\'Drupal\'));
  }'),
  array('id' => '284','drupal_version' => '7','name' => 'hook_menu','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu/7','short_description' => 'Define menu items and page callbacks.','description' => 'Define menu items and page callbacks. This hook enables modules to register paths in order to define how URL
requests are handled. Paths may be registered for URL handling only, or they
can register a link to be placed in a menu (usually the Navigation menu). A
path and its associated information is commonly called a "menu router item".
This hook is rarely called (for example, when modules are enabled), and
its results are cached in the database. hook_menu() implementations return an associative array whose keys define
paths and whose values are an associative array of properties for each
path. (The complete list of properties is in the return value section below.) The definition for each path may include a page callback function, which is
invoked when the registered path is requested. If there is no other
registered path that fits the requested path better, any further path
components are passed to the callback function. For example, your module
could register path \'abc/def\': function mymodule_menu() {
    $items[\'abc/def\'] = array(
      \'page callback\' => \'mymodule_abc_view\',
    );
    return $items;
  }

  function mymodule_abc_view($ghi = 0, $jkl = \'\') {
    // ...
  } When path \'abc/def\' is requested, no further path components are in the
request, and no additional arguments are passed to the callback function (so
$ghi and $jkl would take the default values as defined in the function
signature). When \'abc/def/123/foo\' is requested, $ghi will be \'123\' and
$jkl will be \'foo\'. Note that this automatic passing of optional path
arguments applies only to page and theme callback functions. In addition to optional path arguments, the page callback and other callback
functions may specify argument lists as arrays. These argument lists may
contain both fixed/hard-coded argument values and integers that correspond
to path components. When integers are used and the callback function is
called, the corresponding path components will be substituted for the
integers. That is, the integer 0 in an argument list will be replaced with
the first path component, integer 1 with the second, and so on (path
components are numbered starting from zero). To pass an integer without it
being replaced with its respective path component, use the string value of
the integer (e.g., \'1\') as the argument value. This substitution feature
allows you to re-use a callback function for several different paths. For
example: function mymodule_menu() {
    $items[\'abc/def\'] = array(
      \'page callback\' => \'mymodule_abc_view\',
      \'page arguments\' => array(1, \'foo\'),
    );
    return $items;
  } When path \'abc/def\' is requested, the page callback function will get \'def\'
as the first argument and (always) \'foo\' as the second argument. If a page callback function uses an argument list array, and its path is
requested with optional path arguments, then the list array\'s arguments are
passed to the callback function first, followed by the optional path
arguments. Using the above example, when path \'abc/def/bar/baz\' is requested,
mymodule_abc_view() will be called with \'def\', \'foo\', \'bar\' and \'baz\' as
arguments, in that order. Special care should be taken for the page callback drupal_get_form(), because
your specific form callback function will always receive $form and
&$form_state as the first function arguments: function mymodule_abc_form($form, &$form_state) {
    // ...
    return $form;
  } See Form API documentation for details. Wildcards within paths also work with integer substitution. For example,
your module could register path \'my-module/%/edit\': $items[\'my-module/%/edit\'] = array(
    \'page callback\' => \'mymodule_abc_edit\',
    \'page arguments\' => array(1),
  ); When path \'my-module/foo/edit\' is requested, integer 1 will be replaced
with \'foo\' and passed to the callback function. Note that wildcards may not
be used as the first component. Registered paths may also contain special "auto-loader" wildcard components
in the form of \'%mymodule_abc\', where the \'%\' part means that this path
component is a wildcard, and the \'mymodule_abc\' part defines the prefix for a
load function, which here would be named mymodule_abc_load(). When a matching
path is requested, your load function will receive as its first argument the
path component in the position of the wildcard; load functions may also be
passed additional arguments (see "load arguments" in the return value
section below). For example, your module could register path
\'my-module/%mymodule_abc/edit\': $items[\'my-module/%mymodule_abc/edit\'] = array(
    \'page callback\' => \'mymodule_abc_edit\',
    \'page arguments\' => array(1),
  ); When path \'my-module/123/edit\' is requested, your load function
mymodule_abc_load() will be invoked with the argument \'123\', and should
load and return an "abc" object with internal id 123: function mymodule_abc_load($abc_id) {
    return db_query("SELECT * FROM {mymodule_abc} WHERE abc_id = :abc_id", array(\':abc_id\' => $abc_id))->fetchObject();
  } This \'abc\' object will then be passed into the callback functions defined
for the menu item, such as the page callback function mymodule_abc_edit()
to replace the integer 1 in the argument array. Note that a load function
should return FALSE when it is unable to provide a loadable object. For
example, the node_load() function for the \'node/%node/edit\' menu item will
return FALSE for the path \'node/999/edit\' if a node with a node ID of 999
does not exist. The menu routing system will return a 404 error in this case. You can also define a %wildcard_to_arg() function (for the example menu
entry above this would be \'mymodule_abc_to_arg()\'). The _to_arg() function
is invoked to retrieve a value that is used in the path in place of the
wildcard. A good example is user.module, which defines
user_uid_optional_to_arg() (corresponding to the menu entry
\'user/%user_uid_optional\'). This function returns the user ID of the
current user. The _to_arg() function will get called with three arguments: $arg: A string representing whatever argument may have been supplied by
the caller (this is particularly useful if you want the _to_arg()
function only supply a (default) value if no other value is specified,
as in the case of user_uid_optional_to_arg().
$map: An array of all path fragments (e.g. array(\'node\',\'123\',\'edit\') for
\'node/123/edit\').
$index: An integer indicating which element of $map corresponds to $arg. _load() and _to_arg() functions may seem similar at first glance, but they
have different purposes and are called at different times. _load()
functions are called when the menu system is collecting arguments to pass
to the callback functions defined for the menu item. _to_arg() functions
are called when the menu system is generating links to related paths, such
as the tabs for a set of MENU_LOCAL_TASK items. You can also make groups of menu items to be rendered (by default) as tabs
on a page. To do that, first create one menu item of type MENU_NORMAL_ITEM,
with your chosen path, such as \'foo\'. Then duplicate that menu item, using a
subdirectory path, such as \'foo/tab1\', and changing the type to
MENU_DEFAULT_LOCAL_TASK to make it the default tab for the group. Then add
the additional tab items, with paths such as "foo/tab2" etc., with type
MENU_LOCAL_TASK. Example: // Make "Foo settings" appear on the admin Config page
$items[\'admin/config/system/foo\'] = array(
  \'title\' => \'Foo settings\',
  \'type\' => MENU_NORMAL_ITEM,
  // Page callback, etc. need to be added here.
);
// Make "Tab 1" the main tab on the "Foo settings" page
$items[\'admin/config/system/foo/tab1\'] = array(
  \'title\' => \'Tab 1\',
  \'type\' => MENU_DEFAULT_LOCAL_TASK,
  // Access callback, page callback, and theme callback will be inherited
  // from \'admin/config/system/foo\', if not specified here to override.
);
// Make an additional tab called "Tab 2" on "Foo settings"
$items[\'admin/config/system/foo/tab2\'] = array(
  \'title\' => \'Tab 2\',
  \'type\' => MENU_LOCAL_TASK,
  // Page callback and theme callback will be inherited from
  // \'admin/config/system/foo\', if not specified here to override.
  // Need to add access callback or access arguments.
);','documentation' => '
 * Define menu items and page callbacks. This hook enables modules to register
 * paths in order to define how URL requests are handled. Paths may be registered
 * for URL handling only, or they can register a link to be placed in a menu
 * (usually the Navigation menu). A path and its associated information is
 * commonly called a "menu router item". This hook is rarely called (for example,
 * when modules are enabled), and its results are cached in the database.
 * hook_menu() implementations return an associative array whose keys define
 * paths and whose values are an.','params_docs' => '
 *
 * @return
 *   An array of menu items. Each menu item has a key corresponding to the Drupal
 *   path being registered. The corresponding array value is an associative array
 *   that may contain the following key-value pairs: "title": Required. The
 *   untranslated title of the menu item. "title callback": Function to generate
 *   the title; defaults to t(). If you require only the raw string to be output,
 *   set this to FALSE. "title arguments": Arguments to send to t() or your
 *   custom callback, with path component substitution as described above.','signature' => 'hook_menu()','sample_code' => '  $items[\'example\'] = array(
    \'title\' => \'Example Page\',
    \'page callback\' => \'example_page\',
    \'access arguments\' => array(\'access content\'),
    \'type\' => MENU_SUGGESTED_ITEM,
  );
  $items[\'example/feed\'] = array(
    \'title\' => \'Example RSS feed\',
    \'page callback\' => \'example_feed\',
    \'access arguments\' => array(\'access content\'),
    \'type\' => MENU_CALLBACK,
  );

  return $items;'),
  array('id' => '285','drupal_version' => '7','name' => 'hook_menu_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_alter/7','short_description' => 'Alter the data being saved to the {menu_router} table after hook_menu is invoked.','description' => 'Alter the data being saved to the {menu_router} table after hook_menu is invoked. This hook is invoked by menu_router_build(). The menu definitions are passed
in by reference. Each element of the $items array is one item returned
by a module from hook_menu. Additional items may be added, or existing items
altered.','documentation' => '
 * Alter the data being saved to the {menu_router} table after hook_menu is
 * invoked. This hook is invoked by menu_router_build(). The menu definitions are
 * passed in by reference. Each element of the $items array is one item returned
 * by a module from hook_menu. Additional items may be added, or existing items
 * altered.','params_docs' => '
 *
 * @param $items
 *   Associative array of menu router definitions returned from.','signature' => 'hook_menu_alter(&$items)','sample_code' => '  // Example - disable the page at node/add
  $items[\'node/add\'][\'access callback\'] = FALSE;'),
  array('id' => '286','drupal_version' => '7','name' => 'hook_menu_breadcrumb_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_breadcrumb_alter/7','short_description' => 'Alter links in the active trail before it is rendered as the breadcrumb.','description' => 'Alter links in the active trail before it is rendered as the breadcrumb. This hook is invoked by menu_get_active_breadcrumb() and allows alteration
of the breadcrumb links for the current page, which may be preferred instead
of setting a custom breadcrumb via drupal_set_breadcrumb(). Implementations should take into account that menu_get_active_breadcrumb()
subsequently performs the following adjustments to the active trail *after*
this hook has been invoked: The last link in $active_trail is removed, if its \'href\' is identical to
the \'href\' of $item. This happens, because the breadcrumb normally does
not contain a link to the current page.
The (second to) last link in $active_trail is removed, if the current $item
is a MENU_DEFAULT_LOCAL_TASK. This happens in order to do not show a link
to the current page, when being on the path for the default local task;
e.g. when being on the path node/%/view, the breadcrumb should not contain
a link to node/%. Each link in the active trail must contain: title: The localized title of the link.
href: The system path to link to.
localized_options: An array of options to pass to url().','documentation' => '
 * Alter links in the active trail before it is rendered as the breadcrumb. This
 * hook is invoked by menu_get_active_breadcrumb() and allows alteration of the
 * breadcrumb links for the current page, which may be preferred instead of
 * setting a custom breadcrumb via drupal_set_breadcrumb(). Implementations
 * should take into account that menu_get_active_breadcrumb() subsequently
 * performs the following adjustments to the active trail *after* this hook has
 * been invoked: The last link in $active_trail is removed, if its \'href\' is
 * identical to the \'href\' of $item.','params_docs' => '
 *
 * @param $active_trail
 *   An array containing breadcrumb links for the current page.
 * @param $item
 *   The menu router item of the current page.','signature' => 'hook_menu_breadcrumb_alter(&$active_trail, $item)','sample_code' => '  // Always display a link to the current page by duplicating the last link in
  // the active trail. This means that menu_get_active_breadcrumb() will remove
  // the last link (for the current page), but since it is added once more here,
  // it will appear.
  if (!drupal_is_front_page()) {
    $end = end($active_trail);
    if ($item[\'href\'] == $end[\'href\']) {
      $active_trail[] = $end;
    }
  }'),
  array('id' => '287','drupal_version' => '7','name' => 'hook_menu_contextual_links_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_contextual_links_alter/7','short_description' => 'Alter contextual links before they are rendered.','description' => 'Alter contextual links before they are rendered. This hook is invoked by menu_contextual_links(). The system-determined
contextual links are passed in by reference. Additional links may be added
or existing links can be altered. Each contextual link must at least contain: title: The localized title of the link.
href: The system path to link to.
localized_options: An array of options to pass to url().','documentation' => '
 * Alter contextual links before they are rendered. This hook is invoked by
 * menu_contextual_links(). The system-determined contextual links are passed in
 * by reference. Additional links may be added or existing links can be altered.
 * Each contextual link must at least contain: title: The localized title of the
 * link. href: The system path to link to. localized_options: An array of options
 * to pass to url().','params_docs' => '
 *
 * @param $links
 *   An associative array containing contextual links for the given $root_path,
 *   as described above. The array keys are used to build CSS class names for
 *   contextual links and must therefore be unique for each set of contextual
 *   links.
 * @param $router_item
 *   The menu router item belonging to the $root_path being requested.
 * @param $root_path
 *   The (parent) path that has been requested to build contextual links for.
 *   This is a normalized path, which means that an originally passed path of
 *   \'node/123\' became \'node/%\'.','signature' => 'hook_menu_contextual_links_alter(&$links, $router_item, $root_path)','sample_code' => '  // Add a link to all contextual links for nodes.
  if ($root_path == \'node/%\') {
    $links[\'foo\'] = array(
      \'title\' => t(\'Do fu\'),
      \'href\' => \'foo/do\',
      \'localized_options\' => array(
        \'query\' => array(
          \'foo\' => \'bar\',
        ),
      ),
    );
  }'),
  array('id' => '288','drupal_version' => '7','name' => 'hook_menu_delete','link' => 'http://api.drupal.org/api/drupal/modules!menu!menu.api.php/function/hook_menu_delete/7','short_description' => 'Informs modules that a custom menu was deleted.','description' => 'Informs modules that a custom menu was deleted. This hook is used to notify modules that a custom menu along with all links
contained in it (if any) has been deleted. Contributed modules may use the
information to perform actions based on the information entered into the menu
system.','documentation' => '
 * Informs modules that a custom menu was deleted. This hook is used to notify
 * modules that a custom menu along with all links contained in it (if any) has
 * been deleted. Contributed modules may use the information to perform actions
 * based on the information entered into the menu system.','params_docs' => '
 *
 * @param $link
 *   An array representing a custom menu: menu_name: The unique name of the
 *   custom menu. title: The human readable menu title. description: The custom
 *   menu description.','signature' => 'hook_menu_delete($menu)','sample_code' => '  // Delete the record from our variable.
  $my_menus = variable_get(\'my_module_menus\', array());
  unset($my_menus[$menu[\'menu_name\']]);
  variable_set(\'my_module_menus\', $my_menus);'),
  array('id' => '289','drupal_version' => '7','name' => 'hook_menu_get_item_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_get_item_alter/7','short_description' => 'Alter a menu router item right after it has been retrieved from the database or cache.','description' => 'Alter a menu router item right after it has been retrieved from the database or cache. This hook is invoked by menu_get_item() and allows for run-time alteration of router
information (page_callback, title, and so on) before it is translated and checked for
access. The passed-in $router_item is statically cached for the current request, so this
hook is only invoked once for any router item that is retrieved via menu_get_item(). Usually, modules will only want to inspect the router item and conditionally
perform other actions (such as preparing a state for the current request).
Note that this hook is invoked for any router item that is retrieved by
menu_get_item(), which may or may not be called on the path itself, so implementations
should check the $path parameter if the alteration should fire for the current request
only.','documentation' => '
 * Alter a menu router item right after it has been retrieved from the database
 * or cache. This hook is invoked by menu_get_item() and allows for run-time
 * alteration of router information (page_callback, title, and so on) before it
 * is translated and checked for access. The passed-in $router_item is statically
 * cached for the current request, so this hook is only invoked once for any
 * router item that is retrieved via menu_get_item(). Usually, modules will only
 * want to inspect the router item and conditionally perform other actions (such
 * as preparing a state.','params_docs' => '
 *
 * @param $router_item
 *   The menu router item for $path.
 * @param $path
 *   The originally passed path, for which $router_item is responsible.
 * @param $original_map
 *   The path argument map, as contained in $path.','signature' => 'hook_menu_get_item_alter(&$router_item, $path, $original_map)','sample_code' => '  // When retrieving the router item for the current path...
  if ($path == $_GET[\'q\']) {
    // ...call a function that prepares something for this request.
    mymodule_prepare_something();
  }'),
  array('id' => '290','drupal_version' => '7','name' => 'hook_menu_insert','link' => 'http://api.drupal.org/api/drupal/modules!menu!menu.api.php/function/hook_menu_insert/7','short_description' => 'Informs modules that a custom menu was created.','description' => 'Informs modules that a custom menu was created. This hook is used to notify modules that a custom menu has been created.
Contributed modules may use the information to perform actions based on the
information entered into the menu system.','documentation' => '
 * Informs modules that a custom menu was created. This hook is used to notify
 * modules that a custom menu has been created. Contributed modules may use the
 * information to perform actions based on the information entered into the menu
 * system.','params_docs' => '
 *
 * @param $menu
 *   An array representing a custom menu: menu_name: The unique name of the
 *   custom menu. title: The human readable menu title. description: The custom
 *   menu description.','signature' => 'hook_menu_insert($menu)','sample_code' => '  // For example, we track available menus in a variable.
  $my_menus = variable_get(\'my_module_menus\', array());
  $my_menus[$menu[\'menu_name\']] = $menu[\'menu_name\'];
  variable_set(\'my_module_menus\', $my_menus);'),
  array('id' => '291','drupal_version' => '7','name' => 'hook_menu_link_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_link_alter/7','short_description' => 'Alter the data being saved to the {menu_links} table by menu_link_save().','description' => 'Alter the data being saved to the {menu_links} table by menu_link_save().','documentation' => '
 * Alter the data being saved to the {menu_links} table by menu_link_save().','params_docs' => '
 *
 * @param $item
 *   Associative array defining a menu link as passed into.','signature' => 'hook_menu_link_alter(&$item)','sample_code' => '  // Make all new admin links hidden (a.k.a disabled).
  if (strpos($item[\'link_path\'], \'admin\') === 0 && empty($item[\'mlid\'])) {
    $item[\'hidden\'] = 1;
  }
  // Flag a link to be altered by hook_translated_menu_link_alter().
  if ($item[\'link_path\'] == \'devel/cache/clear\') {
    $item[\'options\'][\'alter\'] = TRUE;
  }
  // Flag a link to be altered by hook_translated_menu_link_alter(), but only
  // if it is derived from a menu router item; i.e., do not alter a custom
  // menu link pointing to the same path that has been created by a user.
  if ($item[\'link_path\'] == \'user\' && $item[\'module\'] == \'system\') {
    $item[\'options\'][\'alter\'] = TRUE;
  }'),
  array('id' => '292','drupal_version' => '7','name' => 'hook_menu_link_delete','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_link_delete/7','short_description' => 'Inform modules that a menu link has been deleted.','description' => 'Inform modules that a menu link has been deleted. This hook is used to notify modules that menu items have been
deleted. Contributed modules may use the information to perform
actions based on the information entered into the menu system.','documentation' => '
 * Inform modules that a menu link has been deleted. This hook is used to notify
 * modules that menu items have been deleted. Contributed modules may use the
 * information to perform actions based on the information entered into the menu
 * system.','params_docs' => '
 *
 * @param $link
 *   Associative array defining a menu link as passed into.','signature' => 'hook_menu_link_delete($link)','sample_code' => '  // Delete the record from our table.
  db_delete(\'menu_example\')
    ->condition(\'mlid\', $link[\'mlid\'])
    ->execute();'),
  array('id' => '293','drupal_version' => '7','name' => 'hook_menu_link_insert','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_link_insert/7','short_description' => 'Inform modules that a menu link has been created.','description' => 'Inform modules that a menu link has been created. This hook is used to notify modules that menu items have been
created. Contributed modules may use the information to perform
actions based on the information entered into the menu system.','documentation' => '
 * Inform modules that a menu link has been created. This hook is used to notify
 * modules that menu items have been created. Contributed modules may use the
 * information to perform actions based on the information entered into the menu
 * system.','params_docs' => '
 *
 * @param $link
 *   Associative array defining a menu link as passed into.','signature' => 'hook_menu_link_insert($link)','sample_code' => '  // In our sample case, we track menu items as editing sections
  // of the site. These are stored in our table as \'disabled\' items.
  $record[\'mlid\'] = $link[\'mlid\'];
  $record[\'menu_name\'] = $link[\'menu_name\'];
  $record[\'status\'] = 0;
  drupal_write_record(\'menu_example\', $record);'),
  array('id' => '294','drupal_version' => '7','name' => 'hook_menu_link_update','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_link_update/7','short_description' => 'Inform modules that a menu link has been updated.','description' => 'Inform modules that a menu link has been updated. This hook is used to notify modules that menu items have been
updated. Contributed modules may use the information to perform
actions based on the information entered into the menu system.','documentation' => '
 * Inform modules that a menu link has been updated. This hook is used to notify
 * modules that menu items have been updated. Contributed modules may use the
 * information to perform actions based on the information entered into the menu
 * system.','params_docs' => '
 *
 * @param $link
 *   Associative array defining a menu link as passed into.','signature' => 'hook_menu_link_update($link)','sample_code' => '  // If the parent menu has changed, update our record.
  $menu_name = db_query("SELECT menu_name FROM {menu_example} WHERE mlid = :mlid", array(\':mlid\' => $link[\'mlid\']))->fetchField();
  if ($menu_name != $link[\'menu_name\']) {
    db_update(\'menu_example\')
      ->fields(array(\'menu_name\' => $link[\'menu_name\']))
      ->condition(\'mlid\', $link[\'mlid\'])
      ->execute();
  }'),
  array('id' => '295','drupal_version' => '7','name' => 'hook_menu_local_tasks_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_local_tasks_alter/7','short_description' => 'Alter tabs and actions displayed on the page before they are rendered.','description' => 'Alter tabs and actions displayed on the page before they are rendered. This hook is invoked by menu_local_tasks(). The system-determined tabs and
actions are passed in by reference. Additional tabs or actions may be added,
or existing items altered. Each tab or action is an associative array containing: #theme: The theme function to use to render.
#link: An associative array containing:
title: The localized title of the link.
href: The system path to link to.
localized_options: An array of options to pass to url().

#active: Whether the link should be marked as \'active\'.','documentation' => '
 * Alter tabs and actions displayed on the page before they are rendered. This
 * hook is invoked by menu_local_tasks(). The system-determined tabs and actions
 * are passed in by reference. Additional tabs or actions may be added, or
 * existing items altered. Each tab or action is an associative array containing:
 * #theme: The theme function to use to render. #link: An associative array
 * containing: title: The localized title of the link. href: The system path to
 * link to. localized_options: An array of options to pass to url().','params_docs' => '
 *
 * @param $data
 *   An associative array containing: actions: An associative array containing:
 *   count: The amount of actions determined by the menu system, which can be
 *   ignored. output: A list of of actions, each one being an associative array
 *   as described above. tabs: An indexed array (list) of tab levels (up to 2
 *   levels), each containing an associative array: count: The amount of tabs
 *   determined by the menu system. This value does not need to be altered if
 *   there is more than one tab. output: A list of of tabs, each one being an
 *   associative array as described above.
 * @param $router_item
 *   The menu system router item of the page.
 * @param $root_path
 *   The path to the root item for this set of tabs.','signature' => 'hook_menu_local_tasks_alter(&$data, $router_item, $root_path)','sample_code' => '  // Add an action linking to node/add to all pages.
  $data[\'actions\'][\'output\'][] = array(
    \'#theme\' => \'menu_local_task\',
    \'#link\' => array(
      \'title\' => t(\'Add new content\'),
      \'href\' => \'node/add\',
      \'localized_options\' => array(
        \'attributes\' => array(
          \'title\' => t(\'Add new content\'),
        ),
      ),
    ),
  );

  // Add a tab linking to node/add to all pages.
  $data[\'tabs\'][0][\'output\'][] = array(
    \'#theme\' => \'menu_local_task\',
    \'#link\' => array(
      \'title\' => t(\'Example tab\'),
      \'href\' => \'node/add\',
      \'localized_options\' => array(
        \'attributes\' => array(
          \'title\' => t(\'Add new content\'),
        ),
      ),
    ),
    // Define whether this link is active. This can be omitted for
    // implementations that add links to pages outside of the current page
    // context.
    \'#active\' => ($router_item[\'path\'] == $root_path),
  );'),
  array('id' => '296','drupal_version' => '7','name' => 'hook_menu_site_status_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu_site_status_alter/7','short_description' => 'Control site status before menu dispatching.','description' => 'Control site status before menu dispatching. The hook is called after checking whether the site is offline but before
the current router item is retrieved and executed by
menu_execute_active_handler(). If the site is in offline mode,
$menu_site_status is set to MENU_SITE_OFFLINE.','documentation' => '
 * Control site status before menu dispatching. The hook is called after checking
 * whether the site is offline but before the current router item is retrieved
 * and executed by menu_execute_active_handler(). If the site is in offline mode,
 * $menu_site_status is set to MENU_SITE_OFFLINE.','params_docs' => '
 *
 * @param $menu_site_status
 *   Supported values are.
 * @param $path
 *   Contains the system path that is going to be loaded. This is read only, use.','signature' => 'hook_menu_site_status_alter(&$menu_site_status, $path)','sample_code' => '  // Allow access to my_module/authentication even if site is in offline mode.
  if ($menu_site_status == MENU_SITE_OFFLINE && user_is_anonymous() && $path == \'my_module/authentication\') {
    $menu_site_status = MENU_SITE_ONLINE;
  }'),
  array('id' => '297','drupal_version' => '7','name' => 'hook_menu_update','link' => 'http://api.drupal.org/api/drupal/modules!menu!menu.api.php/function/hook_menu_update/7','short_description' => 'Informs modules that a custom menu was updated.','description' => 'Informs modules that a custom menu was updated. This hook is used to notify modules that a custom menu has been updated.
Contributed modules may use the information to perform actions based on the
information entered into the menu system.','documentation' => '
 * Informs modules that a custom menu was updated. This hook is used to notify
 * modules that a custom menu has been updated. Contributed modules may use the
 * information to perform actions based on the information entered into the menu
 * system.','params_docs' => '
 *
 * @param $menu
 *   An array representing a custom menu: menu_name: The unique name of the
 *   custom menu. title: The human readable menu title. description: The custom
 *   menu description. old_name: The current \'menu_name\'. Note that internal menu
 *   names cannot be changed after initial creation.','signature' => 'hook_menu_update($menu)','sample_code' => '  // For example, we track available menus in a variable.
  $my_menus = variable_get(\'my_module_menus\', array());
  $my_menus[$menu[\'menu_name\']] = $menu[\'menu_name\'];
  variable_set(\'my_module_menus\', $my_menus);'),
  array('id' => '298','drupal_version' => '7','name' => 'hook_modules_disabled','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_modules_disabled/7','short_description' => 'Perform necessary actions after modules are disabled.','description' => 'Perform necessary actions after modules are disabled. This function differs from hook_disable() in that it gives all other modules
a chance to perform actions when modules are disabled, whereas hook_disable()
is only called on the module actually being disabled.','documentation' => '
 * Perform necessary actions after modules are disabled. This function differs
 * from hook_disable() in that it gives all other modules a chance to perform
 * actions when modules are disabled, whereas hook_disable() is only called on
 * the module actually being disabled.','params_docs' => '
 *
 * @param $modules
 *   An array of the modules that were disabled.','signature' => 'hook_modules_disabled($modules)','sample_code' => '  if (in_array(\'lousy_module\', $modules)) {
    mymodule_enable_functionality();
  }'),
  array('id' => '299','drupal_version' => '7','name' => 'hook_modules_enabled','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_modules_enabled/7','short_description' => 'Perform necessary actions after modules are enabled.','description' => 'Perform necessary actions after modules are enabled. This function differs from hook_enable() in that it gives all other modules a
chance to perform actions when modules are enabled, whereas hook_enable() is
only called on the module actually being enabled. See module_enable() for a
detailed description of the order in which install and enable hooks are
invoked.','documentation' => '
 * Perform necessary actions after modules are enabled. This function differs
 * from hook_enable() in that it gives all other modules a chance to perform
 * actions when modules are enabled, whereas hook_enable() is only called on the
 * module actually being enabled. See module_enable() for a detailed description
 * of the order in which install and enable hooks are invoked.','params_docs' => '
 *
 * @param $modules
 *   An array of the modules that were enabled.','signature' => 'hook_modules_enabled($modules)','sample_code' => '  if (in_array(\'lousy_module\', $modules)) {
    drupal_set_message(t(\'mymodule is not compatible with lousy_module\'), \'error\');
    mymodule_disable_functionality();
  }'),
  array('id' => '300','drupal_version' => '7','name' => 'hook_modules_installed','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_modules_installed/7','short_description' => 'Perform necessary actions after modules are installed.','description' => 'Perform necessary actions after modules are installed. This function differs from hook_install() in that it gives all other modules
a chance to perform actions when a module is installed, whereas
hook_install() is only called on the module actually being installed. See
module_enable() for a detailed description of the order in which install and
enable hooks are invoked.','documentation' => '
 * Perform necessary actions after modules are installed. This function differs
 * from hook_install() in that it gives all other modules a chance to perform
 * actions when a module is installed, whereas hook_install() is only called on
 * the module actually being installed. See module_enable() for a detailed
 * description of the order in which install and enable hooks are invoked.','params_docs' => '
 *
 * @param $modules
 *   An array of the modules that were installed.','signature' => 'hook_modules_installed($modules)','sample_code' => '  if (in_array(\'lousy_module\', $modules)) {
    variable_set(\'lousy_module_conflicting_variable\', FALSE);
  }'),
  array('id' => '301','drupal_version' => '7','name' => 'hook_modules_uninstalled','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_modules_uninstalled/7','short_description' => 'Perform necessary actions after modules are uninstalled.','description' => 'Perform necessary actions after modules are uninstalled. This function differs from hook_uninstall() in that it gives all other
modules a chance to perform actions when a module is uninstalled, whereas
hook_uninstall() is only called on the module actually being uninstalled. It is recommended that you implement this hook if your module stores
data that may have been set by other modules.','documentation' => '
 * Perform necessary actions after modules are uninstalled. This function differs
 * from hook_uninstall() in that it gives all other modules a chance to perform
 * actions when a module is uninstalled, whereas hook_uninstall() is only called
 * on the module actually being uninstalled. It is recommended that you implement
 * this hook if your module stores data that may have been set by other modules.','params_docs' => '
 *
 * @param $modules
 *   An array of the modules that were uninstalled.','signature' => 'hook_modules_uninstalled($modules)','sample_code' => '  foreach ($modules as $module) {
    db_delete(\'mymodule_table\')
      ->condition(\'module\', $module)
      ->execute();
  }
  mymodule_cache_rebuild();'),
  array('id' => '302','drupal_version' => '7','name' => 'hook_module_implements_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_module_implements_alter/7','short_description' => 'Alter the registry of modules implementing a hook.','description' => 'Alter the registry of modules implementing a hook. This hook is invoked during module_implements(). A module may implement this
hook in order to reorder the implementing modules, which are otherwise
ordered by the module\'s system weight. Note that hooks invoked using drupal_alter() can have multiple variations
(such as hook_form_alter() and hook_form_FORM_ID_alter()). drupal_alter()
will call all such variants defined by a single module in turn. For the
purposes of hook_module_implements_alter(), these variants are treated as
a single hook. Thus, to ensure that your implementation of
hook_form_FORM_ID_alter() is called at the right time, you will have to
have to change the order of hook_form_alter() implementation in
hook_module_implements_alter().','documentation' => '
 * Alter the registry of modules implementing a hook. This hook is invoked during
 * module_implements(). A module may implement this hook in order to reorder the
 * implementing modules, which are otherwise ordered by the module\'s system
 * weight. Note that hooks invoked using drupal_alter() can have multiple
 * variations (such as hook_form_alter() and hook_form_FORM_ID_alter()).
 * drupal_alter() will call all such variants defined by a single module in turn.
 * For the purposes of hook_module_implements_alter(), these variants are treated
 * as a single hook.','params_docs' => '
 *
 * @param $implementations
 *   An array keyed by the module\'s name. The value of each item corresponds to a
 *   $group, which is usually FALSE, unless the implementation is in a file named
 *   $module.$group.inc.
 * @param $hook
 *   The name of the module hook being implemented.','signature' => 'hook_module_implements_alter(&$implementations, $hook)','sample_code' => '  if ($hook == \'rdf_mapping\') {
    // Move my_module_rdf_mapping() to the end of the list. module_implements()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations[\'my_module\'];
    unset($implementations[\'my_module\']);
    $implementations[\'my_module\'] = $group;
  }'),
  array('id' => '303','drupal_version' => '7','name' => 'hook_multilingual_settings_changed','link' => 'http://api.drupal.org/api/drupal/modules!locale!locale.api.php/function/hook_multilingual_settings_changed/7','short_description' => 'Allow modules to react to language settings changes.','description' => 'Allow modules to react to language settings changes. Every module needing to act when the number of enabled languages changes
should implement this. This is an "internal" hook and should not be invoked
elsewhere. The typical implementation would trigger some kind of rebuilding,
this way system components could properly react to the change of the enabled
languages number.','documentation' => '
 * Allow modules to react to language settings changes. Every module needing to
 * act when the number of enabled languages changes should implement this. This
 * is an "internal" hook and should not be invoked elsewhere. The typical
 * implementation would trigger some kind of rebuilding, this way system
 * components could properly react to the change of the enabled languages number.','params_docs' => '','signature' => 'hook_multilingual_settings_changed()','sample_code' => '  field_info_cache_clear();'),
  array('id' => '304','drupal_version' => '7','name' => 'hook_node_access','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_access/7','short_description' => 'Control access to a node.','description' => 'Control access to a node. Modules may implement this hook if they want to have a say in whether or not
a given user has access to perform a given operation on a node. The administrative account (user ID #1) always passes any access check,
so this hook is not called in that case. Users with the "bypass node access"
permission may always view and edit content through the administrative
interface. Note that not all modules will want to influence access on all
node types. If your module does not want to actively grant or
block access, return NODE_ACCESS_IGNORE or simply return nothing.
Blindly returning FALSE will break other node access modules. Also note that this function isn\'t called for node listings (e.g., RSS feeds,
the default home page at path \'node\', a recent content block, etc.) See
Node access rights for a full explanation.','documentation' => '
 * Control access to a node. Modules may implement this hook if they want to have
 * a say in whether or not a given user has access to perform a given operation
 * on a node. The administrative account (user ID #1) always passes any access
 * check, so this hook is not called in that case. Users with the "bypass node
 * access" permission may always view and edit content through the administrative
 * interface. Note that not all modules will want to influence access on all node
 * types.','params_docs' => '
 *
 * @param $node
 *   Either a node object or the machine name of the content type on which to
 *   perform the access check.
 * @param $op
 *   The operation to be performed. Possible values: "create" "delete" "update"
 *   "view".
 * @param $account
 *   The user object to perform the access check operation on.
 *
 * @return
 *   NODE_ACCESS_ALLOW: if the operation is to be allowed. NODE_ACCESS_DENY: if
 *   the operation is to be denied. NODE_ACCESS_IGNORE: to not affect this
 *   operation at all.','signature' => 'hook_node_access($node, $op, $account)','sample_code' => '  $type = is_string($node) ? $node : $node->type;

  if (in_array($type, node_permissions_get_configured_types())) {
    if ($op == \'create\' && user_access(\'create \' . $type . \' content\', $account)) {
      return NODE_ACCESS_ALLOW;
    }

    if ($op == \'update\') {
      if (user_access(\'edit any \' . $type . \' content\', $account) || (user_access(\'edit own \' . $type . \' content\', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }

    if ($op == \'delete\') {
      if (user_access(\'delete any \' . $type . \' content\', $account) || (user_access(\'delete own \' . $type . \' content\', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;'),
  array('id' => '305','drupal_version' => '7','name' => 'hook_node_access_records','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_access_records/7','short_description' => 'Set permissions for a node to be written to the database.','description' => 'Set permissions for a node to be written to the database. When a node is saved, a module implementing hook_node_access_records() will
be asked if it is interested in the access permissions for a node. If it is
interested, it must respond with an array of permissions arrays for that
node. Node access grants apply regardless of the published or unpublished status
of the node. Implementations must make sure not to grant access to
unpublished nodes if they don\'t want to change the standard access control
behavior. Your module may need to create a separate access realm to handle
access to unpublished nodes. Note that the grant values in the return value from your hook must be
integers and not boolean TRUE and FALSE. Each permissions item in the array is an array with the following elements: \'realm\': The name of a realm that the module has defined in
hook_node_grants().
\'gid\': A \'grant ID\' from hook_node_grants().
\'grant_view\': If set to 1 a user that has been identified as a member
of this gid within this realm can view this node. This should usually be
set to $node->status. Failure to do so may expose unpublished content
to some users.
\'grant_update\': If set to 1 a user that has been identified as a member
of this gid within this realm can edit this node.
\'grant_delete\': If set to 1 a user that has been identified as a member
of this gid within this realm can delete this node.
\'priority\': If multiple modules seek to set permissions on a node, the
realms that have the highest priority will win out, and realms with a lower
priority will not be written. If there is any doubt, it is best to
leave this 0. When an implementation is interested in a node but want to deny access to
everyone, it may return a "deny all" grant: $grants[] = array(
  \'realm\' => \'all\',
  \'gid\' => 0,
  \'grant_view\' => 0,
  \'grant_update\' => 0,
  \'grant_delete\' => 0,
  \'priority\' => 1,
); Setting the priority should cancel out other grants. In the case of a
conflict between modules, it is safer to use hook_node_access_records_alter()
to return only the deny grant. Note: a deny all grant is not written to the database; denies are implicit.','documentation' => '
 * Set permissions for a node to be written to the database. When a node is
 * saved, a module implementing hook_node_access_records() will be asked if it is
 * interested in the access permissions for a node. If it is interested, it must
 * respond with an array of permissions arrays for that node. Node access grants
 * apply regardless of the published or unpublished status of the node.
 * Implementations must make sure not to grant access to unpublished nodes if
 * they don\'t want to change the standard access control behavior.','params_docs' => '
 *
 * @param $node
 *   The node that has just been saved.
 *
 * @return
 *   An array of grants as defined above.','signature' => 'hook_node_access_records($node)','sample_code' => '  // We only care about the node if it has been marked private. If not, it is
  // treated just like any other node and we completely ignore it.
  if ($node->private) {
    $grants = array();
    // Only published nodes should be viewable to all users. If we allow access
    // blindly here, then all users could view an unpublished node.
    if ($node->status) {
      $grants[] = array(
        \'realm\' => \'example\',
        \'gid\' => 1,
        \'grant_view\' => 1,
        \'grant_update\' => 0,
        \'grant_delete\' => 0,
        \'priority\' => 0,
      );
    }
    // For the example_author array, the GID is equivalent to a UID, which
    // means there are many groups of just 1 user.
    // Note that an author can always view his or her nodes, even if they
    // have status unpublished.
    $grants[] = array(
      \'realm\' => \'example_author\',
      \'gid\' => $node->uid,
      \'grant_view\' => 1,
      \'grant_update\' => 1,
      \'grant_delete\' => 1,
      \'priority\' => 0,
    );

    return $grants;
  }'),
  array('id' => '306','drupal_version' => '7','name' => 'hook_node_access_records_alter','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_access_records_alter/7','short_description' => 'Alter permissions for a node before it is written to the database.','description' => 'Alter permissions for a node before it is written to the database. Node access modules establish rules for user access to content. Node access
records are stored in the {node_access} table and define which permissions
are required to access a node. This hook is invoked after node access modules
returned their requirements via hook_node_access_records(); doing so allows
modules to modify the $grants array by reference before it is stored, so
custom or advanced business logic can be applied. Upon viewing, editing or deleting a node, hook_node_grants() builds a
permissions array that is compared against the stored access records. The
user must have one or more matching permissions in order to complete the
requested operation. A module may deny all access to a node by setting $grants to an empty array.','documentation' => '
 * Alter permissions for a node before it is written to the database. Node access
 * modules establish rules for user access to content. Node access records are
 * stored in the {node_access} table and define which permissions are required to
 * access a node. This hook is invoked after node access modules returned their
 * requirements via hook_node_access_records(); doing so allows modules to modify
 * the $grants array by reference before it is stored, so custom or advanced
 * business logic can be applied.','params_docs' => '
 *
 * @param $grants
 *   The $grants array returned by.
 * @param $node
 *   The node for which the grants were acquired.','signature' => 'hook_node_access_records_alter(&$grants, $node)','sample_code' => '  // Our module allows editors to mark specific articles with the \'is_preview\'
  // field. If the node being saved has a TRUE value for that field, then only
  // our grants are retained, and other grants are removed. Doing so ensures
  // that our rules are enforced no matter what priority other grants are given.
  if ($node->is_preview) {
    // Our module grants are set in $grants[\'example\'].
    $temp = $grants[\'example\'];
    // Now remove all module grants but our own.
    $grants = array(\'example\' => $temp);
  }'),
  array('id' => '307','drupal_version' => '7','name' => 'hook_node_delete','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_delete/7','short_description' => 'Respond to node deletion.','description' => 'Respond to node deletion. This hook is invoked from node_delete_multiple() after the type-specific
hook_delete() has been invoked, but before hook_entity_delete and
field_attach_delete() are called, and before the node is removed from the
node table in the database.','documentation' => '
 * Respond to node deletion. This hook is invoked from node_delete_multiple()
 * after the type-specific hook_delete() has been invoked, but before
 * hook_entity_delete and field_attach_delete() are called, and before the node
 * is removed from the node table in the database.','params_docs' => '
 *
 * @param $node
 *   The node that is being deleted.','signature' => 'hook_node_delete($node)','sample_code' => '  db_delete(\'mytable\')
    ->condition(\'nid\', $node->nid)
    ->execute();'),
  array('id' => '308','drupal_version' => '7','name' => 'hook_node_grants','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_grants/7','short_description' => 'Inform the node access system what permissions the user has.','description' => 'Inform the node access system what permissions the user has. This hook is for implementation by node access modules. In this hook,
the module grants a user different "grant IDs" within one or more
"realms". In hook_node_access_records(), the realms and grant IDs are
associated with permission to view, edit, and delete individual nodes. The realms and grant IDs can be arbitrarily defined by your node access
module; it is common to use role IDs as grant IDs, but that is not
required. Your module could instead maintain its own list of users, where
each list has an ID. In that case, the return value of this hook would be
an array of the list IDs that this user is a member of. A node access module may implement as many realms as necessary to
properly define the access privileges for the nodes. Note that the system
makes no distinction between published and unpublished nodes. It is the
module\'s responsibility to provide appropriate realms to limit access to
unpublished content. Node access records are stored in the {node_access} table and define which
grants are required to access a node. There is a special case for the view
operation -- a record with node ID 0 corresponds to a "view all" grant for
the realm and grant ID of that record. If there are no node access modules
enabled, the core node module adds a node ID 0 record for realm \'all\'. Node
access modules can also grant "view all" permission on their custom realms;
for example, a module could create a record in {node_access} with: $record = array(
  \'nid\' => 0,
  \'gid\' => 888,
  \'realm\' => \'example_realm\',
  \'grant_view\' => 1,
  \'grant_update\' => 0,
  \'grant_delete\' => 0,
);
drupal_write_record(\'node_access\', $record); And then in its hook_node_grants() implementation, it would need to return: if ($op == \'view\') {
  $grants[\'example_realm\'] = array(888);
} If you decide to do this, be aware that the node_access_rebuild() function
will erase any node ID 0 entry when it is called, so you will need to make
sure to restore your {node_access} record after node_access_rebuild() is
called.','documentation' => '
 * Inform the node access system what permissions the user has. This hook is for
 * implementation by node access modules. In this hook, the module grants a user
 * different "grant IDs" within one or more "realms". In
 * hook_node_access_records(), the realms and grant IDs are associated with
 * permission to view, edit, and delete individual nodes. The realms and grant
 * IDs can be arbitrarily defined by your node access module; it is common to use
 * role IDs as grant IDs, but that is not required.','params_docs' => '
 *
 * @param $account
 *   The user object whose grants are requested.
 * @param $op
 *   The node operation to be performed, such as "view", "update", or "delete".
 *
 * @return
 *   An array whose keys are "realms" of grants, and whose values are arrays of
 *   the grant IDs within this realm that this user is being granted. For a
 *   detailed example, see node_access_example.module.','signature' => 'hook_node_grants($account, $op)','sample_code' => '  if (user_access(\'access private content\', $account)) {
    $grants[\'example\'] = array(1);
  }
  $grants[\'example_owner\'] = array($account->uid);
  return $grants;'),
  array('id' => '309','drupal_version' => '7','name' => 'hook_node_grants_alter','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_grants_alter/7','short_description' => 'Alter user access rules when trying to view, edit or delete a node.','description' => 'Alter user access rules when trying to view, edit or delete a node. Node access modules establish rules for user access to content.
hook_node_grants() defines permissions for a user to view, edit or
delete nodes by building a $grants array that indicates the permissions
assigned to the user by each node access module. This hook is called to allow
modules to modify the $grants array by reference, so the interaction of
multiple node access modules can be altered or advanced business logic can be
applied. The resulting grants are then checked against the records stored in the
{node_access} table to determine if the operation may be completed. A module may deny all access to a user by setting $grants to an empty array.','documentation' => '
 * Alter user access rules when trying to view, edit or delete a node. Node
 * access modules establish rules for user access to content. hook_node_grants()
 * defines permissions for a user to view, edit or delete nodes by building a
 * $grants array that indicates the permissions assigned to the user by each node
 * access module. This hook is called to allow modules to modify the $grants
 * array by reference, so the interaction of multiple node access modules can be
 * altered or advanced business logic can be applied.','params_docs' => '
 *
 * @param $grants
 *   The $grants array returned by.
 * @param $account
 *   The user account requesting access to content.
 * @param $op
 *   The operation being performed, \'view\', \'update\' or \'delete\'.','signature' => 'hook_node_grants_alter(&$grants, $account, $op)','sample_code' => '  // Our sample module never allows certain roles to edit or delete
  // content. Since some other node access modules might allow this
  // permission, we expressly remove it by returning an empty $grants
  // array for roles specified in our variable setting.

  // Get our list of banned roles.
  $restricted = variable_get(\'example_restricted_roles\', array());

  if ($op != \'view\' && !empty($restricted)) {
    // Now check the roles for this account against the restrictions.
    foreach ($restricted as $role_id) {
      if (isset($account->roles[$role_id])) {
        $grants = array();
      }
    }
  }'),
  array('id' => '310','drupal_version' => '7','name' => 'hook_node_info','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_info/7','short_description' => 'Define module-provided node types.','description' => 'Define module-provided node types. This hook allows a module to define one or more of its own node types. For
example, the blog module uses it to define a blog node-type named "Blog
entry." The name and attributes of each desired node type are specified in
an array returned by the hook. Only module-provided node types should be defined through this hook. User-
provided (or \'custom\') node types should be defined only in the \'node_type\'
database table, and should be maintained by using the node_type_save() and
node_type_delete() functions.','documentation' => '
 * Define module-provided node types. This hook allows a module to define one or
 * more of its own node types. For example, the blog module uses it to define a
 * blog node-type named "Blog entry." The name and attributes of each desired
 * node type are specified in an array returned by the hook. Only module-provided
 * node types should be defined through this hook. User- provided (or \'custom\')
 * node types should be defined only in the \'node_type\' database table, and
 * should be maintained by using the node_type_save() and node_type_delete()
 * functions.','params_docs' => '
 *
 * @return
 *   An array of information defining the module\'s node types. The array contains
 *   a sub-array for each node type, with the machine-readable type name as the
 *   key. Each sub-array has up to 10 attributes. Possible attributes: "name":
 *   the human-readable name of the node type. Required. "base": the base string
 *   used to construct callbacks corresponding to this node type. (i.e. if base
 *   is defined as example_foo, then example_foo_insert will be called when
 *   inserting a node of that type). This string is usually the name of the
 *   module, but not always. Required.','signature' => 'hook_node_info()','sample_code' => '  return array(
    \'blog\' => array(
      \'name\' => t(\'Blog entry\'),
      \'base\' => \'blog\',
      \'description\' => t(\'Use for multi-user blogs. Every user gets a personal blog.\'),
    ),
  );'),
  array('id' => '311','drupal_version' => '7','name' => 'hook_node_insert','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_insert/7','short_description' => 'Respond to creation of a new node.','description' => 'Respond to creation of a new node. This hook is invoked from node_save() after the node is inserted into the
node table in the database, after the type-specific hook_insert() is invoked,
and after field_attach_insert() is called.','documentation' => '
 * Respond to creation of a new node. This hook is invoked from node_save() after
 * the node is inserted into the node table in the database, after the
 * type-specific hook_insert() is invoked, and after field_attach_insert() is
 * called.','params_docs' => '
 *
 * @param $node
 *   The node that is being created.','signature' => 'hook_node_insert($node)','sample_code' => '  db_insert(\'mytable\')
    ->fields(array(
    \'nid\' => $node->nid,
    \'extra\' => $node->extra,
  ))
    ->execute();'),
  array('id' => '312','drupal_version' => '7','name' => 'hook_node_load','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_load/7','short_description' => 'Act on nodes being loaded from the database.','description' => 'Act on nodes being loaded from the database. This hook is invoked during node loading, which is handled by entity_load(),
via classes NodeController and DrupalDefaultEntityController. After the node
information is read from the database or the entity cache, hook_load() is
invoked on the node\'s content type module, then field_attach_node_revision()
or field_attach_load() is called, then hook_entity_load() is invoked on all
implementing modules, and finally hook_node_load() is invoked on all
implementing modules. This hook should only be used to add information that is not in the node or
node revisions table, not to replace information that is in these tables
(which could interfere with the entity cache). For performance reasons,
information for all available nodes should be loaded in a single query where
possible. The $types parameter allows for your module to have an early return (for
efficiency) if your module only supports certain node types. However, if your
module defines a content type, you can use hook_load() to respond to loading
of just that content type.','documentation' => '
 * Act on nodes being loaded from the database. This hook is invoked during node
 * loading, which is handled by entity_load(), via classes NodeController and
 * DrupalDefaultEntityController. After the node information is read from the
 * database or the entity cache, hook_load() is invoked on the node\'s content
 * type module, then field_attach_node_revision() or field_attach_load() is
 * called, then hook_entity_load() is invoked on all implementing modules, and
 * finally hook_node_load() is invoked on all implementing modules.','params_docs' => '
 *
 * @param $nodes
 *   An array of the nodes being loaded, keyed by nid.
 * @param $types
 *   An array containing the types of the nodes.','signature' => 'hook_node_load($nodes, $types)','sample_code' => '  $result = db_query(\'SELECT nid, foo FROM {mytable} WHERE nid IN(:nids)\', array(\':nids\' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->foo = $record->foo;
  }'),
  array('id' => '313','drupal_version' => '7','name' => 'hook_node_operations','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_operations/7','short_description' => 'Add mass node operations.','description' => 'Add mass node operations. This hook enables modules to inject custom operations into the mass
operations dropdown found at admin/content, by associating a callback
function with the operation, which is called when the form is submitted. The
callback function receives one initial argument, which is an array of the
checked nodes.','documentation' => '
 * Add mass node operations. This hook enables modules to inject custom
 * operations into the mass operations dropdown found at admin/content, by
 * associating a callback function with the operation, which is called when the
 * form is submitted. The callback function receives one initial argument, which
 * is an array of the checked nodes.','params_docs' => '
 *
 * @return
 *   An array of operations. Each operation is an associative array that may
 *   contain the following key-value pairs: \'label\': Required. The label for the
 *   operation, displayed in the dropdown menu. \'callback\': Required. The
 *   function to call for the operation. \'callback arguments\': Optional. An array
 *   of additional arguments to pass to the callback function.','signature' => 'hook_node_operations()','sample_code' => '  $operations = array(
    \'publish\' => array(
      \'label\' => t(\'Publish selected content\'),
      \'callback\' => \'node_mass_update\',
      \'callback arguments\' => array(\'updates\' => array(\'status\' => NODE_PUBLISHED)),
    ),
    \'unpublish\' => array(
      \'label\' => t(\'Unpublish selected content\'),
      \'callback\' => \'node_mass_update\',
      \'callback arguments\' => array(\'updates\' => array(\'status\' => NODE_NOT_PUBLISHED)),
    ),
    \'promote\' => array(
      \'label\' => t(\'Promote selected content to front page\'),
      \'callback\' => \'node_mass_update\',
      \'callback arguments\' => array(\'updates\' => array(
          \'status\' => NODE_PUBLISHED,
          \'promote\' => NODE_PROMOTED,
        )),
    ),
    \'demote\' => array(
      \'label\' => t(\'Demote selected content from front page\'),
      \'callback\' => \'node_mass_update\',
      \'callback arguments\' => array(\'updates\' => array(\'promote\' => NODE_NOT_PROMOTED)),
    ),
    \'sticky\' => array(
      \'label\' => t(\'Make selected content sticky\'),
      \'callback\' => \'node_mass_update\',
      \'callback arguments\' => array(\'updates\' => array(
          \'status\' => NODE_PUBLISHED,
          \'sticky\' => NODE_STICKY,
        )),
    ),
    \'unsticky\' => array(
      \'label\' => t(\'Make selected content not sticky\'),
      \'callback\' => \'node_mass_update\',
      \'callback arguments\' => array(\'updates\' => array(\'sticky\' => NODE_NOT_STICKY)),
    ),
    \'delete\' => array(
      \'label\' => t(\'Delete selected content\'),
      \'callback\' => NULL,
    ),
  );
  return $operations;'),
  array('id' => '314','drupal_version' => '7','name' => 'hook_node_prepare','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_prepare/7','short_description' => 'Act on a node object about to be shown on the add/edit form.','description' => 'Act on a node object about to be shown on the add/edit form. This hook is invoked from node_object_prepare() after the type-specific
hook_prepare() is invoked.','documentation' => '
 * Act on a node object about to be shown on the add/edit form. This hook is
 * invoked from node_object_prepare() after the type-specific hook_prepare() is
 * invoked.','params_docs' => '
 *
 * @param $node
 *   The node that is about to be shown on the add/edit form.','signature' => 'hook_node_prepare($node)','sample_code' => '  if (!isset($node->comment)) {
    $node->comment = variable_get("comment_$node->type", COMMENT_NODE_OPEN);
  }'),
  array('id' => '315','drupal_version' => '7','name' => 'hook_node_presave','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_presave/7','short_description' => 'Act on a node being inserted or updated.','description' => 'Act on a node being inserted or updated. This hook is invoked from node_save() before the node is saved to the
database.','documentation' => '
 * Act on a node being inserted or updated. This hook is invoked from node_save()
 * before the node is saved to the database.','params_docs' => '
 *
 * @param $node
 *   The node that is being inserted or updated.','signature' => 'hook_node_presave($node)','sample_code' => '  if ($node->nid && $node->moderate) {
    // Reset votes when node is updated:
    $node->score = 0;
    $node->users = \'\';
    $node->votes = 0;
  }'),
  array('id' => '316','drupal_version' => '7','name' => 'hook_node_revision_delete','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_revision_delete/7','short_description' => 'Respond to deletion of a node revision.','description' => 'Respond to deletion of a node revision. This hook is invoked from node_revision_delete() after the revision has been
removed from the node_revision table, and before
field_attach_delete_revision() is called.','documentation' => '
 * Respond to deletion of a node revision. This hook is invoked from
 * node_revision_delete() after the revision has been removed from the
 * node_revision table, and before field_attach_delete_revision() is called.','params_docs' => '
 *
 * @param $node
 *   The node revision (node object) that is being deleted.','signature' => 'hook_node_revision_delete($node)','sample_code' => '  db_delete(\'mytable\')
    ->condition(\'vid\', $node->vid)
    ->execute();'),
  array('id' => '317','drupal_version' => '7','name' => 'hook_node_search_result','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_search_result/7','short_description' => 'Act on a node being displayed as a search result.','description' => 'Act on a node being displayed as a search result. This hook is invoked from node_search_execute(), after node_load()
and node_view() have been called.','documentation' => '
 * Act on a node being displayed as a search result. This hook is invoked from
 * node_search_execute(), after node_load() and node_view() have been called.','params_docs' => '
 *
 * @param $node
 *   The node being displayed in a search result.
 *
 * @return
 *   array Extra information to be displayed with search result. This information
 *   should be presented as an associative array. It will be concatenated with
 *   the post information (last updated, author) in the default search result
 *   theming.','signature' => 'hook_node_search_result($node)','sample_code' => '  $comments = db_query(\'SELECT comment_count FROM {node_comment_statistics} WHERE nid = :nid\', array(\'nid\' => $node->nid))->fetchField();
  return array(\'comment\' => format_plural($comments, \'1 comment\', \'@count comments\'));'),
  array('id' => '318','drupal_version' => '7','name' => 'hook_node_submit','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_submit/7','short_description' => 'Act on a node after validated form values have been copied to it.','description' => 'Act on a node after validated form values have been copied to it. This hook is invoked when a node form is submitted with either the "Save" or
"Preview" button, after form values have been copied to the form state\'s node
object, but before the node is saved or previewed. It is a chance for modules
to adjust the node\'s properties from what they are simply after a copy from
$form_state[\'values\']. This hook is intended for adjusting non-field-related
properties. See hook_field_attach_submit() for customizing field-related
properties.','documentation' => '
 * Act on a node after validated form values have been copied to it. This hook is
 * invoked when a node form is submitted with either the "Save" or "Preview"
 * button, after form values have been copied to the form state\'s node object,
 * but before the node is saved or previewed. It is a chance for modules to
 * adjust the node\'s properties from what they are simply after a copy from
 * $form_state[\'values\']. This hook is intended for adjusting non-field-related
 * properties. See hook_field_attach_submit() for customizing field-related
 * properties.','params_docs' => '
 *
 * @param $node
 *   The node object being updated in response to a form submission.
 * @param $form
 *   The form being used to edit the node.
 * @param $form_state
 *   The form state array.','signature' => 'hook_node_submit($node, $form, &$form_state)','sample_code' => '  // Decompose the selected menu parent option into \'menu_name\' and \'plid\', if
  // the form used the default parent selection widget.
  if (!empty($form_state[\'values\'][\'menu\'][\'parent\'])) {
    list($node->menu[\'menu_name\'], $node->menu[\'plid\']) = explode(\':\', $form_state[\'values\'][\'menu\'][\'parent\']);
  }'),
  array('id' => '319','drupal_version' => '7','name' => 'hook_node_type_delete','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_type_delete/7','short_description' => 'Respond to node type deletion.','description' => 'Respond to node type deletion. This hook is invoked from node_type_delete() after the node type is removed
from the database.','documentation' => '
 * Respond to node type deletion. This hook is invoked from node_type_delete()
 * after the node type is removed from the database.','params_docs' => '
 *
 * @param $info
 *   The node type object that is being deleted.','signature' => 'hook_node_type_delete($info)','sample_code' => '  variable_del(\'comment_\' . $info->type);'),
  array('id' => '320','drupal_version' => '7','name' => 'hook_node_type_insert','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_type_insert/7','short_description' => 'Respond to node type creation.','description' => 'Respond to node type creation. This hook is invoked from node_type_save() after the node type is added
to the database.','documentation' => '
 * Respond to node type creation. This hook is invoked from node_type_save()
 * after the node type is added to the database.','params_docs' => '
 *
 * @param $info
 *   The node type object that is being created.','signature' => 'hook_node_type_insert($info)','sample_code' => '  drupal_set_message(t(\'You have just created a content type with a machine name %type.\', array(\'%type\' => $info->type)));'),
  array('id' => '321','drupal_version' => '7','name' => 'hook_node_type_update','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_type_update/7','short_description' => 'Respond to node type updates.','description' => 'Respond to node type updates. This hook is invoked from node_type_save() after the node type is updated
in the database.','documentation' => '
 * Respond to node type updates. This hook is invoked from node_type_save() after
 * the node type is updated in the database.','params_docs' => '
 *
 * @param $info
 *   The node type object that is being updated.','signature' => 'hook_node_type_update($info)','sample_code' => '  if (!empty($info->old_type) && $info->old_type != $info->type) {
    $setting = variable_get(\'comment_\' . $info->old_type, COMMENT_NODE_OPEN);
    variable_del(\'comment_\' . $info->old_type);
    variable_set(\'comment_\' . $info->type, $setting);
  }'),
  array('id' => '322','drupal_version' => '7','name' => 'hook_node_update','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_update/7','short_description' => 'Respond to updates to a node.','description' => 'Respond to updates to a node. This hook is invoked from node_save() after the node is updated in the node
table in the database, after the type-specific hook_update() is invoked, and
after field_attach_update() is called.','documentation' => '
 * Respond to updates to a node. This hook is invoked from node_save() after the
 * node is updated in the node table in the database, after the type-specific
 * hook_update() is invoked, and after field_attach_update() is called.','params_docs' => '
 *
 * @param $node
 *   The node that is being updated.','signature' => 'hook_node_update($node)','sample_code' => '  db_update(\'mytable\')
    ->fields(array(\'extra\' => $node->extra))
    ->condition(\'nid\', $node->nid)
    ->execute();'),
  array('id' => '323','drupal_version' => '7','name' => 'hook_node_update_index','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_update_index/7','short_description' => 'Act on a node being indexed for searching.','description' => 'Act on a node being indexed for searching. This hook is invoked during search indexing, after node_load(), and after
the result of node_view() is added as $node->rendered to the node object.','documentation' => '
 * Act on a node being indexed for searching. This hook is invoked during search
 * indexing, after node_load(), and after the result of node_view() is added as
 * $node->rendered to the node object.','params_docs' => '
 *
 * @param $node
 *   The node being indexed.
 *
 * @return
 *   string Additional node information to be indexed.','signature' => 'hook_node_update_index($node)','sample_code' => '  $text = \'\';
  $comments = db_query(\'SELECT subject, comment, format FROM {comment} WHERE nid = :nid AND status = :status\', array(\':nid\' => $node->nid, \':status\' => COMMENT_PUBLISHED));
  foreach ($comments as $comment) {
    $text .= \'<h2>\' . check_plain($comment->subject) . \'</h2>\' . check_markup($comment->comment, $comment->format, \'\', TRUE);
  }
  return $text;'),
  array('id' => '324','drupal_version' => '7','name' => 'hook_node_validate','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_validate/7','short_description' => 'Perform node validation before a node is created or updated.','description' => 'Perform node validation before a node is created or updated. This hook is invoked from node_validate(), after a user has has finished
editing the node and is previewing or submitting it. It is invoked at the
end of all the standard validation steps, and after the type-specific
hook_validate() is invoked. To indicate a validation error, use form_set_error(). Note: Changes made to the $node object within your hook implementation will
have no effect.  The preferred method to change a node\'s content is to use
hook_node_presave() instead. If it is really necessary to change
the node at the validate stage, you can use form_set_value().','documentation' => '
 * Perform node validation before a node is created or updated. This hook is
 * invoked from node_validate(), after a user has has finished editing the node
 * and is previewing or submitting it. It is invoked at the end of all the
 * standard validation steps, and after the type-specific hook_validate() is
 * invoked. To indicate a validation error, use form_set_error(). Note: Changes
 * made to the $node object within your hook implementation will have no effect.
 * The preferred method to change a node\'s content is to use hook_node_presave()
 * instead.','params_docs' => '
 *
 * @param $node
 *   The node being validated.
 * @param $form
 *   The form being used to edit the node.
 * @param $form_state
 *   The form state array.','signature' => 'hook_node_validate($node, $form, &$form_state)','sample_code' => '  if (isset($node->end) && isset($node->start)) {
    if ($node->start > $node->end) {
      form_set_error(\'time\', t(\'An event may not end before it starts.\'));
    }
  }'),
  array('id' => '325','drupal_version' => '7','name' => 'hook_node_view','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_view/7','short_description' => 'Act on a node that is being assembled before rendering.','description' => 'Act on a node that is being assembled before rendering. The module may add elements to $node->content prior to rendering. This hook
will be called after hook_view(). The structure of $node->content is a
renderable array as expected by drupal_render(). When $view_mode is \'rss\', modules can also add extra RSS elements and
namespaces to $node->rss_elements and $node->rss_namespaces respectively for
the RSS item generated for this node.
For details on how this is used, see node_feed().','documentation' => '
 * Act on a node that is being assembled before rendering. The module may add
 * elements to $node->content prior to rendering. This hook will be called after
 * hook_view(). The structure of $node->content is a renderable array as expected
 * by drupal_render(). When $view_mode is \'rss\', modules can also add extra RSS
 * elements and namespaces to $node->rss_elements and $node->rss_namespaces
 * respectively for the RSS item generated for this node. For details on how this
 * is used, see node_feed().','params_docs' => '
 *
 * @param $node
 *   The node that is being assembled for rendering.
 * @param $view_mode
 *   The $view_mode parameter from.
 * @param $langcode
 *   The language code used for rendering.','signature' => 'hook_node_view($node, $view_mode, $langcode)','sample_code' => '  $node->content[\'my_additional_field\'] = array(
    \'#markup\' => $additional_field,
    \'#weight\' => 10,
    \'#theme\' => \'mymodule_my_additional_field\',
  );'),
  array('id' => '326','drupal_version' => '7','name' => 'hook_node_view_alter','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_view_alter/7','short_description' => 'Alter the results of node_view().','description' => 'Alter the results of node_view(). This hook is called after the content has been assembled in a structured
array and may be used for doing processing which requires that the complete
node content structure has been built. If the module wishes to act on the rendered HTML of the node rather than the
structured content array, it may use this hook to add a #post_render
callback.  Alternatively, it could also implement hook_preprocess_node(). See
drupal_render() and theme() documentation respectively for details.','documentation' => '
 * Alter the results of node_view(). This hook is called after the content has
 * been assembled in a structured array and may be used for doing processing
 * which requires that the complete node content structure has been built. If the
 * module wishes to act on the rendered HTML of the node rather than the
 * structured content array, it may use this hook to add a #post_render callback.
 * Alternatively, it could also implement hook_preprocess_node(). See
 * drupal_render() and theme() documentation respectively for details.','params_docs' => '
 *
 * @param $build
 *   A renderable array representing the node content.','signature' => 'hook_node_view_alter(&$build)','sample_code' => '  if ($build[\'#view_mode\'] == \'full\' && isset($build[\'an_additional_field\'])) {
    // Change its weight.
    $build[\'an_additional_field\'][\'#weight\'] = -10;
  }

  // Add a #post_render callback to act on the rendered HTML of the node.
  $build[\'#post_render\'][] = \'my_module_node_post_render\';'),
  array('id' => '327','drupal_version' => '7','name' => 'hook_openid','link' => 'http://api.drupal.org/api/drupal/modules!openid!openid.api.php/function/hook_openid/7','short_description' => 'Allow modules to modify the OpenID request parameters.','description' => 'Allow modules to modify the OpenID request parameters.','documentation' => '
 * Allow modules to modify the OpenID request parameters.','params_docs' => '
 *
 * @param $op
 *   The operation to be performed. Possible values: request: Modify parameters
 *   before they are sent to the OpenID provider.
 * @param $request
 *   An associative array of parameter defaults to which to modify or append.
 *
 * @return
 *   An associative array of parameters to be merged with the default list.','signature' => 'hook_openid($op, $request)','sample_code' => '  if ($op == \'request\') {
    $request[\'openid.identity\'] = \'http://myname.myopenid.com/\';
  }
  return $request;'),
  array('id' => '328','drupal_version' => '7','name' => 'hook_openid_discovery_method_info','link' => 'http://api.drupal.org/api/drupal/modules!openid!openid.api.php/function/hook_openid_discovery_method_info/7','short_description' => 'Allow modules to declare OpenID discovery methods.','description' => 'Allow modules to declare OpenID discovery methods. The discovery function callbacks will be called in turn with an unique
parameter, the claimed identifier. They have to return an associative array
with array of services and claimed identifier in the same form as returned by
openid_discover(). The resulting array must contain following keys: \'services\' (required) an array of discovered services (including OpenID version, endpoint URI, etc). \'claimed_id\' (optional) new claimed identifer, found by following HTTP redirects during the services discovery. The first discovery method that succeed (return at least one services) will
stop the discovery process.','documentation' => '
 * Allow modules to declare OpenID discovery methods. The discovery function
 * callbacks will be called in turn with an unique parameter, the claimed
 * identifier. They have to return an associative array with array of services
 * and claimed identifier in the same form as returned by openid_discover(). The
 * resulting array must contain following keys: \'services\' (required) an array of
 * discovered services (including OpenID version, endpoint URI, etc).
 * \'claimed_id\' (optional) new claimed identifer, found by following HTTP
 * redirects during the services discovery.','params_docs' => '
 *
 * @return
 *   An associative array which keys are the name of the discovery methods and
 *   values are function callbacks.','signature' => 'hook_openid_discovery_method_info()','sample_code' => '  return array(
    \'new_discovery_idea\' => \'_my_discovery_method\',
  );'),
  array('id' => '329','drupal_version' => '7','name' => 'hook_openid_discovery_method_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!openid!openid.api.php/function/hook_openid_discovery_method_info_alter/7','short_description' => 'Allow modules to alter discovery methods.','description' => 'Allow modules to alter discovery methods.','documentation' => '
 * Allow modules to alter discovery methods.','params_docs' => '','signature' => 'hook_openid_discovery_method_info_alter(&$methods)','sample_code' => '  // Remove XRI discovery scheme.
  unset($methods[\'xri\']);'),
  array('id' => '330','drupal_version' => '7','name' => 'hook_openid_normalization_method_info','link' => 'http://api.drupal.org/api/drupal/modules!openid!openid.api.php/function/hook_openid_normalization_method_info/7','short_description' => 'Allow modules to declare OpenID normalization methods.','description' => 'Allow modules to declare OpenID normalization methods. The discovery function callbacks will be called in turn with an unique
parameter, the identifier to normalize. They have to return a normalized
identifier, or NULL if the identifier is not in a form they can handle. The first normalization method that succeed (return a value that is not NULL)
will stop the normalization process.','documentation' => '
 * Allow modules to declare OpenID normalization methods. The discovery function
 * callbacks will be called in turn with an unique parameter, the identifier to
 * normalize. They have to return a normalized identifier, or NULL if the
 * identifier is not in a form they can handle. The first normalization method
 * that succeed (return a value that is not NULL) will stop the normalization
 * process.','params_docs' => '
 *
 * @return
 *   An array with a set of function callbacks, that will be called in turn when
 *   normalizing an OpenID identifier. The normalization functions have to return
 *   a normalized identifier, or NULL if the identifier is not in a form they can
 *   handle.','signature' => 'hook_openid_normalization_method_info()','sample_code' => '  return array(
    \'new_normalization_idea\' => \'_my_normalization_method\',
  );'),
  array('id' => '331','drupal_version' => '7','name' => 'hook_openid_normalization_method_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!openid!openid.api.php/function/hook_openid_normalization_method_info_alter/7','short_description' => 'Allow modules to alter normalization methods.','description' => 'Allow modules to alter normalization methods.','documentation' => '
 * Allow modules to alter normalization methods.','params_docs' => '','signature' => 'hook_openid_normalization_method_info_alter(&$methods)','sample_code' => '  // Remove Google IDP normalization.
  unset($methods[\'google_idp\']);'),
  array('id' => '332','drupal_version' => '7','name' => 'hook_openid_response','link' => 'http://api.drupal.org/api/drupal/modules!openid!openid.api.php/function/hook_openid_response/7','short_description' => 'Allow modules to act upon a successful OpenID login.','description' => 'Allow modules to act upon a successful OpenID login.','documentation' => '
 * Allow modules to act upon a successful OpenID login.','params_docs' => '
 *
 * @param $response
 *   Response values from the OpenID Provider.
 * @param $account
 *   The Drupal user account that logged in.','signature' => 'hook_openid_response($response, $account)','sample_code' => '  if (isset($response[\'openid.ns.ax\'])) {
    _mymodule_store_ax_fields($response, $account);
  }'),
  array('id' => '333','drupal_version' => '7','name' => 'hook_overlay_child_initialize','link' => 'http://api.drupal.org/api/drupal/modules!overlay!overlay.api.php/function/hook_overlay_child_initialize/7','short_description' => 'Allow modules to act when an overlay child window is initialized.','description' => 'Allow modules to act when an overlay child window is initialized. The child window is initialized when a page is displayed from within the
overlay, so modules can act here if they need to take action to work from
within the confines of the overlay.','documentation' => '
 * Allow modules to act when an overlay child window is initialized. The child
 * window is initialized when a page is displayed from within the overlay, so
 * modules can act here if they need to take action to work from within the
 * confines of the overlay.','params_docs' => '','signature' => 'hook_overlay_child_initialize()','sample_code' => '  // Add our custom JavaScript.
  drupal_add_js(drupal_get_path(\'module\', \'hook\') . \'/hook-overlay-child.js\');'),
  array('id' => '334','drupal_version' => '7','name' => 'hook_overlay_parent_initialize','link' => 'http://api.drupal.org/api/drupal/modules!overlay!overlay.api.php/function/hook_overlay_parent_initialize/7','short_description' => 'Allow modules to act when an overlay parent window is initialized.','description' => 'Allow modules to act when an overlay parent window is initialized. The parent window is initialized when a page is displayed in which the
overlay might be required to be displayed, so modules can act here if they
need to take action to accommodate the possibility of the overlay appearing
within a Drupal page.','documentation' => '
 * Allow modules to act when an overlay parent window is initialized. The parent
 * window is initialized when a page is displayed in which the overlay might be
 * required to be displayed, so modules can act here if they need to take action
 * to accommodate the possibility of the overlay appearing within a Drupal page.','params_docs' => '','signature' => 'hook_overlay_parent_initialize()','sample_code' => '  // Add our custom JavaScript.
  drupal_add_js(drupal_get_path(\'module\', \'hook\') . \'/hook-overlay.js\');'),
  array('id' => '335','drupal_version' => '7','name' => 'hook_page_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_page_alter/7','short_description' => 'Perform alterations before a page is rendered.','description' => 'Perform alterations before a page is rendered. Use this hook when you want to remove or alter elements at the page
level, or add elements at the page level that depend on an other module\'s
elements (this hook runs after hook_page_build(). If you are making changes to entities such as forms, menus, or user
profiles, use those objects\' native alter hooks instead (hook_form_alter(),
for example). The $page array contains top level elements for each block region: $page[\'page_top\']
  $page[\'header\']
  $page[\'sidebar_first\']
  $page[\'content\']
  $page[\'sidebar_second\']
  $page[\'page_bottom\'] The \'content\' element contains the main content of the current page, and its
structure will vary depending on what module is responsible for building the
page. Some legacy modules may not return structured content at all: their
pre-rendered markup will be located in $page[\'content\'][\'main\'][\'#markup\']. Pages built by Drupal\'s core Node and Blog modules use a standard structure: // Node body.
  $page[\'content\'][\'system_main\'][\'nodes\'][$nid][\'body\']
  // Array of links attached to the node (add comments, read more).
  $page[\'content\'][\'system_main\'][\'nodes\'][$nid][\'links\']
  // The node object itself.
  $page[\'content\'][\'system_main\'][\'nodes\'][$nid][\'#node\']
  // The results pager.
  $page[\'content\'][\'system_main\'][\'pager\'] Blocks may be referenced by their module/delta pair within a region: // The login block in the first sidebar region.
  $page[\'sidebar_first\'][\'user_login\'][\'#block\'];','documentation' => '
 * Perform alterations before a page is rendered. Use this hook when you want to
 * remove or alter elements at the page level, or add elements at the page level
 * that depend on an other module\'s elements (this hook runs after
 * hook_page_build(). If you are making changes to entities such as forms, menus,
 * or user profiles, use those objects\' native alter hooks instead
 * (hook_form_alter(), for example). The $page array contains top level elements
 * for each block region: $page[\'page_top\'] $page[\'header\']
 * $page[\'sidebar_first\'] $page[\'content\'].','params_docs' => '
 *
 * @param $page
 *   Nested array of renderable elements that make up the page.','signature' => 'hook_page_alter(&$page)','sample_code' => '  // Add help text to the user login block.
  $page[\'sidebar_first\'][\'user_login\'][\'help\'] = array(
    \'#weight\' => -10,
    \'#markup\' => t(\'To post comments or add new content, you first have to log in.\'),
  );'),
  array('id' => '336','drupal_version' => '7','name' => 'hook_page_build','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_page_build/7','short_description' => 'Add elements to a page before it is rendered.','description' => 'Add elements to a page before it is rendered. Use this hook when you want to add elements at the page level. For your
additions to be printed, they have to be placed below a top level array key
of the $page array that has the name of a region of the active theme. By default, valid region keys are \'page_top\', \'header\', \'sidebar_first\',
\'content\', \'sidebar_second\' and \'page_bottom\'. To get a list of all regions
of the active theme, use system_region_list($theme). Note that $theme is a
global variable. If you want to alter the elements added by other modules or if your module
depends on the elements of other modules, use hook_page_alter() instead which
runs after this hook.','documentation' => '
 * Add elements to a page before it is rendered. Use this hook when you want to
 * add elements at the page level. For your additions to be printed, they have to
 * be placed below a top level array key of the $page array that has the name of
 * a region of the active theme. By default, valid region keys are \'page_top\',
 * \'header\', \'sidebar_first\', \'content\', \'sidebar_second\' and \'page_bottom\'. To
 * get a list of all regions of the active theme, use system_region_list($theme).
 * Note that $theme is a global variable.','params_docs' => '
 *
 * @param $page
 *   Nested array of renderable elements that make up the page.','signature' => 'hook_page_build(&$page)','sample_code' => '  if (menu_get_object(\'node\', 1)) {
    // We are on a node detail page. Append a standard disclaimer to the
    // content region.
    $page[\'content\'][\'disclaimer\'] = array(
      \'#markup\' => t(\'Acme, Inc. is not responsible for the contents of this sample code.\'),
      \'#weight\' => 25,
    );
  }'),
  array('id' => '337','drupal_version' => '7','name' => 'hook_page_delivery_callback_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_page_delivery_callback_alter/7','short_description' => 'Alters the delivery callback used to send the result of the page callback to the browser.','description' => 'Alters the delivery callback used to send the result of the page callback to the browser. Called by drupal_deliver_page() to allow modules to alter how the
page is delivered to the browser. This hook is intended for altering the delivery callback based on
information unrelated to the path of the page accessed. For example,
it can be used to set the delivery callback based on a HTTP request
header (as shown in the code sample). To specify a delivery callback
based on path information, use hook_menu() or hook_menu_alter(). This hook can also be used as an API function that can be used to explicitly
set the delivery callback from some other function. For example, for a module
named MODULE: function MODULE_page_delivery_callback_alter(&$callback, $set = FALSE) {
  static $stored_callback;
  if ($set) {
    $stored_callback = $callback;
  }
  elseif (isset($stored_callback)) {
    $callback = $stored_callback;
  }
}
function SOMEWHERE_ELSE() {
  $desired_delivery_callback = \'foo\';
  MODULE_page_delivery_callback_alter($desired_delivery_callback, TRUE);
}','documentation' => '
 * Alters the delivery callback used to send the result of the page callback to
 * the browser. Called by drupal_deliver_page() to allow modules to alter how the
 * page is delivered to the browser. This hook is intended for altering the
 * delivery callback based on information unrelated to the path of the page
 * accessed. For example, it can be used to set the delivery callback based on a
 * HTTP request header (as shown in the code sample). To specify a delivery
 * callback based on path information, use hook_menu() or hook_menu_alter().','params_docs' => '
 *
 * @param $callback
 *   The name of a function.','signature' => 'hook_page_delivery_callback_alter(&$callback)','sample_code' => '  // jQuery sets a HTTP_X_REQUESTED_WITH header of \'XMLHttpRequest\'.
  // If a page would normally be delivered as an html page, and it is called
  // from jQuery, deliver it instead as an Ajax response.
  if (isset($_SERVER[\'HTTP_X_REQUESTED_WITH\']) && $_SERVER[\'HTTP_X_REQUESTED_WITH\'] == \'XMLHttpRequest\' && $callback == \'drupal_deliver_html_page\') {
    $callback = \'ajax_deliver\';
  }'),
  array('id' => '338','drupal_version' => '7','name' => 'hook_path_delete','link' => 'http://api.drupal.org/api/drupal/modules!path!path.api.php/function/hook_path_delete/7','short_description' => 'Respond to a path being deleted.','description' => 'Respond to a path being deleted.','documentation' => '
 * Respond to a path being deleted.','params_docs' => '
 *
 * @param $path
 *   An associative array containing the following keys: source: The internal
 *   system path. alias: The URL alias. pid: Unique path alias identifier.
 *   language: The language of the alias.','signature' => 'hook_path_delete($path)','sample_code' => '  db_delete(\'mytable\')
    ->condition(\'pid\', $path[\'pid\'])
    ->execute();'),
  array('id' => '339','drupal_version' => '7','name' => 'hook_path_insert','link' => 'http://api.drupal.org/api/drupal/modules!path!path.api.php/function/hook_path_insert/7','short_description' => 'Respond to a path being inserted.','description' => 'Respond to a path being inserted.','documentation' => '
 * Respond to a path being inserted.','params_docs' => '
 *
 * @param $path
 *   An associative array containing the following keys: source: The internal
 *   system path. alias: The URL alias. pid: Unique path alias identifier.
 *   language: The language of the alias.','signature' => 'hook_path_insert($path)','sample_code' => '  db_insert(\'mytable\')
    ->fields(array(
    \'alias\' => $path[\'alias\'],
    \'pid\' => $path[\'pid\'],
  ))
    ->execute();'),
  array('id' => '340','drupal_version' => '7','name' => 'hook_path_update','link' => 'http://api.drupal.org/api/drupal/modules!path!path.api.php/function/hook_path_update/7','short_description' => 'Respond to a path being updated.','description' => 'Respond to a path being updated.','documentation' => '
 * Respond to a path being updated.','params_docs' => '
 *
 * @param $path
 *   An associative array containing the following keys: source: The internal
 *   system path. alias: The URL alias. pid: Unique path alias identifier.
 *   language: The language of the alias.','signature' => 'hook_path_update($path)','sample_code' => '  db_update(\'mytable\')
    ->fields(array(\'alias\' => $path[\'alias\']))
    ->condition(\'pid\', $path[\'pid\'])
    ->execute();'),
  array('id' => '341','drupal_version' => '7','name' => 'hook_permission','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_permission/7','short_description' => 'Define user permissions.','description' => 'Define user permissions. This hook can supply permissions that the module defines, so that they
can be selected on the user permissions page and used to grant or restrict
access to actions the module performs. Permissions are checked using user_access(). For a detailed usage example, see page_example.module.','documentation' => '
 * Define user permissions. This hook can supply permissions that the module
 * defines, so that they can be selected on the user permissions page and used to
 * grant or restrict access to actions the module performs. Permissions are
 * checked using user_access(). For a detailed usage example, see
 * page_example.module.','params_docs' => '
 *
 * @return
 *   An array whose keys are permission names and whose corresponding values are
 *   arrays containing the following key-value pairs: title: The human-readable
 *   name of the permission, to be shown on the permission administration page.
 *   This should be wrapped in the t() function so it can be translated.
 *   description: (optional) A description of what the permission does. This
 *   should be wrapped in the t() function so it can be translated. restrict
 *   access: (optional) A boolean which can be set to TRUE to indicate that site
 *   administrators should restrict access to.','signature' => 'hook_permission()','sample_code' => '  return array(
    \'administer my module\' => array(
      \'title\' => t(\'Administer my module\'),
      \'description\' => t(\'Perform administration tasks for my module.\'),
    ),
  );'),
  array('id' => '342','drupal_version' => '7','name' => 'hook_prepare','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_prepare/7','short_description' => 'Act on a node object about to be shown on the add/edit form.','description' => 'Act on a node object about to be shown on the add/edit form. This hook is invoked only on the module that defines the node\'s content type
(use hook_node_prepare() to act on all node preparations). This hook is invoked from node_object_prepare() before the general
hook_node_prepare() is invoked.','documentation' => '
 * Act on a node object about to be shown on the add/edit form. This hook is
 * invoked only on the module that defines the node\'s content type (use
 * hook_node_prepare() to act on all node preparations). This hook is invoked
 * from node_object_prepare() before the general hook_node_prepare() is invoked.','params_docs' => '
 *
 * @param $node
 *   The node that is about to be shown on the add/edit form.','signature' => 'hook_prepare($node)','sample_code' => '  if ($file = file_check_upload($field_name)) {
    $file = file_save_upload($field_name, _image_filename($file->filename, NULL, TRUE));
    if ($file) {
      if (!image_get_info($file->uri)) {
        form_set_error($field_name, t(\'Uploaded file is not a valid image\'));
        return;
      }
    }
    else {
      return;
    }
    $node->images[\'_original\'] = $file->uri;
    _image_build_derivatives($node, TRUE);
    $node->new_file = TRUE;
  }'),
  array('id' => '343','drupal_version' => '7','name' => 'hook_query_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_query_alter/7','short_description' => 'Perform alterations to a structured query.','description' => 'Perform alterations to a structured query. Structured (aka dynamic) queries that have tags associated may be altered by any module
before the query is executed.','documentation' => '
 * Perform alterations to a structured query. Structured (aka dynamic) queries
 * that have tags associated may be altered by any module before the query is
 * executed.','params_docs' => '
 *
 * @param $query
 *   A.','signature' => 'hook_query_alter(QueryAlterableInterface $query)','sample_code' => '  if ($query->hasTag(\'micro_limit\')) {
    $query->range(0, 2);
  }'),
  array('id' => '344','drupal_version' => '7','name' => 'hook_query_TAG_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_query_TAG_alter/7','short_description' => 'Perform alterations to a structured query for a given tag.','description' => 'Perform alterations to a structured query for a given tag.','documentation' => '
 * Perform alterations to a structured query for a given tag.','params_docs' => '
 *
 * @param $query
 *   An.','signature' => 'hook_query_TAG_alter(QueryAlterableInterface $query)','sample_code' => '  // Skip the extra expensive alterations if site has no node access control modules.
  if (!node_access_view_all_nodes()) {
    // Prevent duplicates records.
    $query->distinct();
    // The recognized operations are \'view\', \'update\', \'delete\'.
    if (!$op = $query->getMetaData(\'op\')) {
      $op = \'view\';
    }
    // Skip the extra joins and conditions for node admins.
    if (!user_access(\'bypass node access\')) {
      // The node_access table has the access grants for any given node.
      $access_alias = $query->join(\'node_access\', \'na\', \'%alias.nid = n.nid\');
      $or = db_or();
      // If any grant exists for the specified user, then user has access to the node for the specified operation.
      foreach (node_access_grants($op, $query->getMetaData(\'account\')) as $realm => $gids) {
        foreach ($gids as $gid) {
          $or->condition(db_and()
            ->condition($access_alias . \'.gid\', $gid)
            ->condition($access_alias . \'.realm\', $realm)
          );
        }
      }

      if (count($or->conditions())) {
        $query->condition($or);
      }

      $query->condition($access_alias . \'grant_\' . $op, 1, \'>=\');
    }
  }'),
  array('id' => '345','drupal_version' => '7','name' => 'hook_ranking','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_ranking/7','short_description' => 'Provide additional methods of scoring for core search results for nodes.','description' => 'Provide additional methods of scoring for core search results for nodes. A node\'s search score is used to rank it among other nodes matched by the
search, with the highest-ranked nodes appearing first in the search listing. For example, a module allowing users to vote on content could expose an
option to allow search results\' rankings to be influenced by the average
voting score of a node. All scoring mechanisms are provided as options to site administrators, and
may be tweaked based on individual sites or disabled altogether if they do
not make sense. Individual scoring mechanisms, if enabled, are assigned a
weight from 1 to 10. The weight represents the factor of magnification of
the ranking mechanism, with higher-weighted ranking mechanisms having more
influence. In order for the weight system to work, each scoring mechanism
must return a value between 0 and 1 for every node. That value is then
multiplied by the administrator-assigned weight for the ranking mechanism,
and then the weighted scores from all ranking mechanisms are added, which
brings about the same result as a weighted average.','documentation' => '
 * Provide additional methods of scoring for core search results for nodes. A
 * node\'s search score is used to rank it among other nodes matched by the
 * search, with the highest-ranked nodes appearing first in the search listing.
 * For example, a module allowing users to vote on content could expose an option
 * to allow search results\' rankings to be influenced by the average voting score
 * of a node. All scoring mechanisms are provided as options to site
 * administrators, and may be tweaked based on individual sites or disabled
 * altogether if they do not make sense.','params_docs' => '
 *
 * @return
 *   An associative array of ranking data. The keys should be strings,
 *   corresponding to the internal name of the ranking mechanism, such as
 *   \'recent\', or \'comments\'. The values should be arrays themselves, with the
 *   following keys available: "title": the human readable name of the ranking
 *   mechanism. Required. "join": part of a query string to join to any
 *   additional necessary table. This is not necessary if the table required is
 *   already joined to by the base query, such as for the {node} table.','signature' => 'hook_ranking()','sample_code' => '  // If voting is disabled, we can avoid returning the array, no hard feelings.
  if (variable_get(\'vote_node_enabled\', TRUE)) {
    return array(
      \'vote_average\' => array(
        \'title\' => t(\'Average vote\'),
        // Note that we use i.sid, the search index\'s search item id, rather than
        // n.nid.
        \'join\' => \'LEFT JOIN {vote_node_data} vote_node_data ON vote_node_data.nid = i.sid\',
        // The highest possible score should be 1, and the lowest possible score,
        // always 0, should be 0.
        \'score\' => \'vote_node_data.average / CAST(%f AS DECIMAL)\',
        // Pass in the highest possible voting score as a decimal argument.
        \'arguments\' => array(variable_get(\'vote_score_max\', 5)),
      ),
    );
  }'),
  array('id' => '346','drupal_version' => '7','name' => 'hook_rdf_mapping','link' => 'http://api.drupal.org/api/drupal/modules!rdf!rdf.api.php/function/hook_rdf_mapping/7','short_description' => 'Allow modules to define RDF mappings for field bundles.','description' => 'Allow modules to define RDF mappings for field bundles. Modules defining their own field bundles can specify which RDF semantics
should be used to annotate these bundles. These mappings are then used for
automatic RDFa output in the HTML code.','documentation' => '
 * Allow modules to define RDF mappings for field bundles. Modules defining their
 * own field bundles can specify which RDF semantics should be used to annotate
 * these bundles. These mappings are then used for automatic RDFa output in the
 * HTML code.','params_docs' => '
 *
 * @return
 *   A list of mapping structures, where each mapping is an associative array:
 *   type: The name of an entity type (e.g., \'node\', \'comment\', and so on.)
 *   bundle: The name of the bundle (e.g., \'page\', \'blog\', or RDF_DEFAULT_BUNDLE
 *   for default mappings.) mapping: The mapping structure which applies to the
 *   entity type and bundle. A mapping structure is an array with keys
 *   corresponding to existing field instances in the bundle. Each field is then
 *   described in terms of the RDF mapping: predicates: An array of RDF
 *   predicates which describe the relation between the.','signature' => 'hook_rdf_mapping()','sample_code' => '  return array(
    array(
      \'type\' => \'node\',
      \'bundle\' => \'blog\',
      \'mapping\' => array(
        \'rdftype\' => array(\'sioct:Weblog\'),
        \'title\' => array(
          \'predicates\' => array(\'dc:title\'),
        ),
        \'created\' => array(
          \'predicates\' => array(\'dc:date\', \'dc:created\'),
          \'datatype\' => \'xsd:dateTime\',
          \'callback\' => \'date_iso8601\',
        ),
        \'body\' => array(
          \'predicates\' => array(\'content:encoded\'),
        ),
        \'uid\' => array(
          \'predicates\' => array(\'sioc:has_creator\'),
          \'type\' => \'rel\',
        ),
        \'name\' => array(
          \'predicates\' => array(\'foaf:name\'),
        ),
      ),
    ),
  );'),
  array('id' => '347','drupal_version' => '7','name' => 'hook_rdf_namespaces','link' => 'http://api.drupal.org/api/drupal/modules!rdf!rdf.api.php/function/hook_rdf_namespaces/7','short_description' => 'Allow modules to define namespaces for RDF mappings.','description' => 'Allow modules to define namespaces for RDF mappings. Many common namespace prefixes are defined in rdf_rdf_namespaces(). However,
if a module implements hook_rdf_mapping() and uses a prefix that is not
defined in rdf_rdf_namespaces(), this hook should be used to define the new
namespace prefix.','documentation' => '
 * Allow modules to define namespaces for RDF mappings. Many common namespace
 * prefixes are defined in rdf_rdf_namespaces(). However, if a module implements
 * hook_rdf_mapping() and uses a prefix that is not defined in
 * rdf_rdf_namespaces(), this hook should be used to define the new namespace
 * prefix.','params_docs' => '
 *
 * @return
 *   An associative array of namespaces where the key is the namespace prefix and
 *   the value is the namespace URI.','signature' => 'hook_rdf_namespaces()','sample_code' => '  return array(
    \'content\' => \'http://purl.org/rss/1.0/modules/content/\',
    \'dc\' => \'http://purl.org/dc/terms/\',
    \'foaf\' => \'http://xmlns.com/foaf/0.1/\',
    \'og\' => \'http://ogp.me/ns#\',
    \'rdfs\' => \'http://www.w3.org/2000/01/rdf-schema#\',
    \'sioc\' => \'http://rdfs.org/sioc/ns#\',
    \'sioct\' => \'http://rdfs.org/sioc/types#\',
    \'skos\' => \'http://www.w3.org/2004/02/skos/core#\',
    \'xsd\' => \'http://www.w3.org/2001/XMLSchema#\',
  );'),
  array('id' => '348','drupal_version' => '7','name' => 'hook_registry_files_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_registry_files_alter/7','short_description' => 'Perform necessary alterations to the list of files parsed by the registry.','description' => 'Perform necessary alterations to the list of files parsed by the registry. Modules can manually modify the list of files before the registry parses
them. The $modules array provides the .info file information, which includes
the list of files registered to each module. Any files in the list can then
be added to the list of files that the registry will parse, or modify
attributes of a file. A necessary alteration made by the core SimpleTest module is to force .test
files provided by disabled modules into the list of files parsed by the
registry.','documentation' => '
 * Perform necessary alterations to the list of files parsed by the registry.
 * Modules can manually modify the list of files before the registry parses them.
 * The $modules array provides the .info file information, which includes the
 * list of files registered to each module. Any files in the list can then be
 * added to the list of files that the registry will parse, or modify attributes
 * of a file. A necessary alteration made by the core SimpleTest module is to
 * force .test files provided by disabled modules into the list of files parsed
 * by the registry.','params_docs' => '
 *
 * @param $files
 *   List of files to be parsed by the registry. The list will contain files
 *   found in each enabled module\'s info file and the core includes directory.
 *   The array is keyed by the file path and contains an array of the related
 *   module\'s name and weight as used internally by
 *   $files["modules/system/system.module"] = array( \'module\' => \'system\',
 *   \'weight\' => 0, );.
 * @param $modules
 *   An array containing all module information stored in the {system} table.
 *   Each element of the array also contains the module\'s .info file information
 *   in the property \'info\'. An additional \'dir\' property has been added to the
 *   module information which provides the path to the directory in which the
 *   module resides. The example shows how to take advantage of both properties.','signature' => 'hook_registry_files_alter(&$files, $modules)','sample_code' => '  foreach ($modules as $module) {
    // Only add test files for disabled modules, as enabled modules should
    // already include any test files they provide.
    if (!$module->status) {
      $dir = $module->dir;
      foreach ($module->info[\'files\'] as $file) {
        if (substr($file, -5) == \'.test\') {
          $files["$dir/$file"] = array(
            \'module\' => $module->name,
            \'weight\' => $module->weight,
          );
        }
      }
    }
  }'),
  array('id' => '349','drupal_version' => '7','name' => 'hook_requirements','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_requirements/7','short_description' => 'Check installation requirements and do status reporting.','description' => 'Check installation requirements and do status reporting. This hook has three closely related uses, determined by the $phase argument: Checking installation requirements ($phase == \'install\').
Checking update requirements ($phase == \'update\').
Status reporting ($phase == \'runtime\'). Note that this hook, like all others dealing with installation and updates,
must reside in a module_name.install file, or it will not properly abort
the installation of the module if a critical requirement is missing. During the \'install\' phase, modules can for example assert that
library or server versions are available or sufficient.
Note that the installation of a module can happen during installation of
Drupal itself (by install.php) with an installation profile or later by hand.
As a consequence, install-time requirements must be checked without access
to the full Drupal API, because it is not available during install.php.
For localization you should for example use $t = get_t() to
retrieve the appropriate localization function name (t() or st()).
If a requirement has a severity of REQUIREMENT_ERROR, install.php will abort
or at least the module will not install.
Other severity levels have no effect on the installation.
Module dependencies do not belong to these installation requirements,
but should be defined in the module\'s .info file. The \'runtime\' phase is not limited to pure installation requirements
but can also be used for more general status information like maintenance
tasks and security issues.
The returned \'requirements\' will be listed on the status report in the
administration section, with indication of the severity level.
Moreover, any requirement with a severity of REQUIREMENT_ERROR severity will
result in a notice on the the administration overview page.','documentation' => '
 * Check installation requirements and do status reporting. This hook has three
 * closely related uses, determined by the $phase argument: Checking installation
 * requirements ($phase == \'install\'). Checking update requirements ($phase ==
 * \'update\'). Status reporting ($phase == \'runtime\'). Note that this hook, like
 * all others dealing with installation and updates, must reside in a
 * module_name.install file, or it will not properly abort the installation of
 * the module if a critical requirement is missing.','params_docs' => '
 *
 * @param $phase
 *   The phase in which requirements are checked: install: The module is being
 *   installed. update: The module is enabled and update.php is run. runtime: The
 *   runtime requirements are being checked and shown on the status report page.
 *
 * @return
 *   A keyed array of requirements. Each requirement is itself an array with the
 *   following items: title: The name of the requirement. value: The current
 *   value (e.g., version, time, level, etc). During install phase, this should
 *   only be used for version numbers, do not set it if not applicable.
 *   description: The description of the requirement/status. severity: The
 *   requirement\'s result/severity level, one of: REQUIREMENT_INFO: For info
 *   only. REQUIREMENT_OK: The requirement is satisfied. REQUIREMENT_WARNING: The
 *   requirement failed with a warning.','signature' => 'hook_requirements($phase)','sample_code' => '  $requirements = array();
  // Ensure translations don\'t break at install time
  $t = get_t();

  // Report Drupal version
  if ($phase == \'runtime\') {
    $requirements[\'drupal\'] = array(
      \'title\' => $t(\'Drupal\'),
      \'value\' => VERSION,
      \'severity\' => REQUIREMENT_INFO,
    );
  }

  // Test PHP version
  $requirements[\'php\'] = array(
    \'title\' => $t(\'PHP\'),
    \'value\' => ($phase == \'runtime\') ? l(phpversion(), \'admin/reports/status/php\') : phpversion(),
  );
  if (version_compare(phpversion(), DRUPAL_MINIMUM_PHP) 0) {
    $requirements[\'php\'][\'description\'] = $t(\'Your PHP installation is too old. Drupal requires at least PHP %version.\', array(\'%version\' => DRUPAL_MINIMUM_PHP));
    $requirements[\'php\'][\'severity\'] = REQUIREMENT_ERROR;
  }

  // Report cron status
  if ($phase == \'runtime\') {
    $cron_last = variable_get(\'cron_last\');

    if (is_numeric($cron_last)) {
      $requirements[\'cron\'][\'value\'] = $t(\'Last run !time ago\', array(\'!time\' => format_interval(REQUEST_TIME - $cron_last)));
    }
    else {
      $requirements[\'cron\'] = array(
        \'description\' => $t(\'Cron has not run. It appears cron jobs have not been setup on your system. Check the help pages for <a href="@url">configuring cron jobs</a>.\', array(\'@url\' => \'http://drupal.org/cron\')),
        \'severity\' => REQUIREMENT_ERROR,
        \'value\' => $t(\'Never run\'),
      );
    }

    $requirements[\'cron\'][\'description\'] .= \' \' . $t(\'You can <a href="@cron">run cron manually</a>.\', array(\'@cron\' => url(\'admin/reports/status/run-cron\')));

    $requirements[\'cron\'][\'title\'] = $t(\'Cron maintenance tasks\');
  }

  return $requirements;'),
  array('id' => '350','drupal_version' => '7','name' => 'hook_schema','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_schema/7','short_description' => 'Define the current version of the database schema.','description' => 'Define the current version of the database schema. A Drupal schema definition is an array structure representing one or
more tables and their related keys and indexes. A schema is defined by
hook_schema() which must live in your module\'s .install file. This hook is called at both install and uninstall time, and in the latter
case, it cannot rely on the .module file being loaded or hooks being known.
If the .module file is needed, it may be loaded with drupal_load(). The tables declared by this hook will be automatically created when
the module is first enabled, and removed when the module is uninstalled.
This happens before hook_install() is invoked, and after hook_uninstall()
is invoked, respectively. By declaring the tables used by your module via an implementation of
hook_schema(), these tables will be available on all supported database
engines. You don\'t have to deal with the different SQL dialects for table
creation and alteration of the supported database engines. See the Schema API Handbook at http://drupal.org/node/146843 for
details on schema definition structures.','documentation' => '
 * Define the current version of the database schema. A Drupal schema definition
 * is an array structure representing one or more tables and their related keys
 * and indexes. A schema is defined by hook_schema() which must live in your
 * module\'s .install file. This hook is called at both install and uninstall
 * time, and in the latter case, it cannot rely on the .module file being loaded
 * or hooks being known. If the .module file is needed, it may be loaded with
 * drupal_load().','params_docs' => '
 *
 * @return
 *   A schema definition structure array. For each element of the array, the key
 *   is a table name and the value is a table structure definition.','signature' => 'hook_schema()','sample_code' => '  $schema[\'node\'] = array(
    // example (partial) specification for table "node"
    \'description\' => \'The base table for nodes.\',
    \'fields\' => array(
      \'nid\' => array(
        \'description\' => \'The primary identifier for a node.\',
        \'type\' => \'serial\',
        \'unsigned\' => TRUE,
        \'not null\' => TRUE,
      ),
      \'vid\' => array(
        \'description\' => \'The current {node_revision}.vid version identifier.\',
        \'type\' => \'int\',
        \'unsigned\' => TRUE,
        \'not null\' => TRUE,
        \'default\' => 0,
      ),
      \'type\' => array(
        \'description\' => \'The {node_type} of this node.\',
        \'type\' => \'varchar\',
        \'length\' => 32,
        \'not null\' => TRUE,
        \'default\' => \'\',
      ),
      \'title\' => array(
        \'description\' => \'The title of this node, always treated as non-markup plain text.\',
        \'type\' => \'varchar\',
        \'length\' => 255,
        \'not null\' => TRUE,
        \'default\' => \'\',
      ),
    ),
    \'indexes\' => array(
      \'node_changed\' => array(\'changed\'),
      \'node_created\' => array(\'created\'),
    ),
    \'unique keys\' => array(
      \'nid_vid\' => array(\'nid\', \'vid\'),
      \'vid\' => array(\'vid\'),
    ),
    \'foreign keys\' => array(
      \'node_revision\' => array(
        \'table\' => \'node_revision\',
        \'columns\' => array(\'vid\' => \'vid\'),
      ),
      \'node_author\' => array(
        \'table\' => \'users\',
        \'columns\' => array(\'uid\' => \'uid\'),
      ),
    ),
    \'primary key\' => array(\'nid\'),
  );
  return $schema;'),
  array('id' => '351','drupal_version' => '7','name' => 'hook_schema_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_schema_alter/7','short_description' => 'Perform alterations to existing database schemas.','description' => 'Perform alterations to existing database schemas. When a module modifies the database structure of another module (by
changing, adding or removing fields, keys or indexes), it should
implement hook_schema_alter() to update the default $schema to take its
changes into account. See hook_schema() for details on the schema definition structure.','documentation' => '
 * Perform alterations to existing database schemas. When a module modifies the
 * database structure of another module (by changing, adding or removing fields,
 * keys or indexes), it should implement hook_schema_alter() to update the
 * default $schema to take its changes into account. See hook_schema() for
 * details on the schema definition structure.','params_docs' => '
 *
 * @param $schema
 *   Nested array describing the schemas for all modules.','signature' => 'hook_schema_alter(&$schema)','sample_code' => '  // Add field to existing schema.
  $schema[\'users\'][\'fields\'][\'timezone_id\'] = array(
    \'type\' => \'int\',
    \'not null\' => TRUE,
    \'default\' => 0,
    \'description\' => \'Per-user timezone configuration.\',
  );'),
  array('id' => '352','drupal_version' => '7','name' => 'hook_search_access','link' => 'http://api.drupal.org/api/drupal/modules!search!search.api.php/function/hook_search_access/7','short_description' => 'Define access to a custom search routine.','description' => 'Define access to a custom search routine. This hook allows a module to define permissions for a search tab.','documentation' => '
 * Define access to a custom search routine. This hook allows a module to define
 * permissions for a search tab.','params_docs' => '','signature' => 'hook_search_access()','sample_code' => '  return user_access(\'access content\');'),
  array('id' => '353','drupal_version' => '7','name' => 'hook_search_admin','link' => 'http://api.drupal.org/api/drupal/modules!search!search.api.php/function/hook_search_admin/7','short_description' => 'Add elements to the search settings form.','description' => 'Add elements to the search settings form.','documentation' => '
 * Add elements to the search settings form.','params_docs' => '
 *
 * @return
 *   Form array for the Search settings page at admin/config/search/settings.','signature' => 'hook_search_admin()','sample_code' => '  // Output form for defining rank factor weights.
  $form[\'content_ranking\'] = array(
    \'#type\' => \'fieldset\',
    \'#title\' => t(\'Content ranking\'),
  );
  $form[\'content_ranking\'][\'#theme\'] = \'node_search_admin\';
  $form[\'content_ranking\'][\'info\'] = array(
    \'#value\' => \'<em>\' . t(\'The following numbers control which properties the content search should favor when ordering the results. Higher numbers mean more influence, zero means the property is ignored. Changing these numbers does not require the search index to be rebuilt. Changes take effect immediately.\') . \'</em>\',
  );

  // Note: reversed to reflect that higher number = higher ranking.
  $options = drupal_map_assoc(range(0, 10));
  foreach (module_invoke_all(\'ranking\') as $var => $values) {
    $form[\'content_ranking\'][\'factors\'][\'node_rank_\' . $var] = array(
      \'#title\' => $values[\'title\'],
      \'#type\' => \'select\',
      \'#options\' => $options,
      \'#default_value\' => variable_get(\'node_rank_\' . $var, 0),
    );
  }
  return $form;'),
  array('id' => '354','drupal_version' => '7','name' => 'hook_search_execute','link' => 'http://api.drupal.org/api/drupal/modules!search!search.api.php/function/hook_search_execute/7','short_description' => 'Execute a search for a set of key words.','description' => 'Execute a search for a set of key words. Use database API with the \'PagerDefault\' query extension to perform your
search. If your module uses hook_update_index() and search_index() to index its
items, use table \'search_index\' aliased to \'i\' as the main table in your
query, with the \'SearchQuery\' extension. You can join to your module\'s table
using the \'i.sid\' field, which will contain the $sid values you provided to
search_index(). Add the main keywords to the query by using method
searchExpression(). The functions search_expression_extract() and
search_expression_insert() may also be helpful for adding custom search
parameters to the search expression. See node_search_execute() for an example of a module that uses the search
index, and user_search_execute() for an example that doesn\'t use the search
index.','documentation' => '
 * Execute a search for a set of key words. Use database API with the
 * \'PagerDefault\' query extension to perform your search. If your module uses
 * hook_update_index() and search_index() to index its items, use table
 * \'search_index\' aliased to \'i\' as the main table in your query, with the
 * \'SearchQuery\' extension. You can join to your module\'s table using the \'i.sid\'
 * field, which will contain the $sid values you provided to search_index(). Add
 * the main keywords to the query by using method searchExpression().','params_docs' => '
 *
 * @param $keys
 *   The search keywords as entered by the user.
 * @param $conditions
 *   An optional array of additional conditions, such as filters.
 *
 * @return
 *   An array of search results. To use the default search result display, each
 *   item should have the following keys\': \'link\': Required. The URL of the found
 *   item. \'type\': The type of item (such as the content type). \'title\':
 *   Required. The name of the item. \'user\': The author of the item. \'date\': A
 *   timestamp when the item was last modified. \'extra\': An array of optional
 *   extra information items. \'snippet\': An excerpt or preview to show with the
 *   result (can be generated with search_excerpt()). \'language\': Language code
 *   for the item (usually two characters).','signature' => 'hook_search_execute($keys = NULL, $conditions = NULL)','sample_code' => '  // Build matching conditions
  $query = db_select(\'search_index\', \'i\', array(\'target\' => \'slave\'))->extend(\'SearchQuery\')->extend(\'PagerDefault\');
  $query->join(\'node\', \'n\', \'n.nid = i.sid\');
  $query
    ->condition(\'n.status\', 1)
    ->addTag(\'node_access\')
    ->searchExpression($keys, \'node\');

  // Insert special keywords.
  $query->setOption(\'type\', \'n.type\');
  $query->setOption(\'language\', \'n.language\');
  if ($query->setOption(\'term\', \'ti.tid\')) {
    $query->join(\'taxonomy_index\', \'ti\', \'n.nid = ti.nid\');
  }
  // Only continue if the first pass query matches.
  if (!$query->executeFirstPass()) {
    return array();
  }

  // Add the ranking expressions.
  _node_rankings($query);

  // Load results.
  $find = $query
    ->limit(10)
    ->execute();
  $results = array();
  foreach ($find as $item) {
    // Build the node body.
    $node = node_load($item->sid);
    node_build_content($node, \'search_result\');
    $node->body = drupal_render($node->content);

    // Fetch comments for snippet.
    $node->rendered .= \' \' . module_invoke(\'comment\', \'node_update_index\', $node);
    // Fetch terms for snippet.
    $node->rendered .= \' \' . module_invoke(\'taxonomy\', \'node_update_index\', $node);

    $extra = module_invoke_all(\'node_search_result\', $node);

    $results[] = array(
      \'link\' => url(\'node/\' . $item->sid, array(\'absolute\' => TRUE)),
      \'type\' => check_plain(node_type_get_name($node)),
      \'title\' => $node->title,
      \'user\' => theme(\'username\', array(\'account\' => $node)),
      \'date\' => $node->changed,
      \'node\' => $node,
      \'extra\' => $extra,
      \'score\' => $item->calculated_score,
      \'snippet\' => search_excerpt($keys, $node->body),
    );
  }
  return $results;'),
  array('id' => '355','drupal_version' => '7','name' => 'hook_search_info','link' => 'http://api.drupal.org/api/drupal/modules!search!search.api.php/function/hook_search_info/7','short_description' => 'Define a custom search type.','description' => 'Define a custom search type. This hook allows a module to tell search.module that it wishes to perform
searches on content it defines (custom node types, users, or comments for
example) when a site search is performed. In order for the search to do anything, your module must also implement
hook_search_execute(), which is called when someone requests a search
on your module\'s type of content. If you want to have your content
indexed in the standard search index, your module should also implement
hook_update_index(). If your search type has settings, you can implement
hook_search_admin() to add them to the search settings page. You can use
hook_form_FORM_ID_alter(), with FORM_ID set to \'search_form\', to add fields
to the search form (see node_form_search_form_alter() for an example).
You can use hook_search_access() to limit access to searching,
and hook_search_page() to override how search results are displayed.','documentation' => '
 * Define a custom search type. This hook allows a module to tell search.module
 * that it wishes to perform searches on content it defines (custom node types,
 * users, or comments for example) when a site search is performed. In order for
 * the search to do anything, your module must also implement
 * hook_search_execute(), which is called when someone requests a search on your
 * module\'s type of content. If you want to have your content indexed in the
 * standard search index, your module should also implement hook_update_index().','params_docs' => '
 *
 * @return
 *   Array with optional keys: \'title\': Title for the tab on the search page for
 *   this module. Defaults to the module name if not given. \'path\': Path
 *   component after \'search/\' for searching with this module. Defaults to the
 *   module name if not given. \'conditions_callback\': Name of a callback function
 *   that is invoked by search_view() to get an array of additional search
 *   conditions to pass to search_data(). For example, a search module may get
 *   additional keywords, filters, or modifiers for the search from the query
 *   string.','signature' => 'hook_search_info()','sample_code' => '  return array(
    \'title\' => \'Content\',
    \'path\' => \'node\',
    \'conditions_callback\' => \'sample_search_conditions_callback\',
  );'),
  array('id' => '356','drupal_version' => '7','name' => 'hook_search_page','link' => 'http://api.drupal.org/api/drupal/modules!search!search.api.php/function/hook_search_page/7','short_description' => 'Override the rendering of search results.','description' => 'Override the rendering of search results. A module that implements hook_search_info() to define a type of search
may implement this hook in order to override the default theming of
its search results, which is otherwise themed using theme(\'search_results\'). Note that by default, theme(\'search_results\') and theme(\'search_result\')
work together to create an ordered list (OL). So your hook_search_page()
implementation should probably do this as well.','documentation' => '
 * Override the rendering of search results. A module that implements
 * hook_search_info() to define a type of search may implement this hook in order
 * to override the default theming of its search results, which is otherwise
 * themed using theme(\'search_results\'). Note that by default,
 * theme(\'search_results\') and theme(\'search_result\') work together to create an
 * ordered list (OL). So your hook_search_page() implementation should probably
 * do this as well.','params_docs' => '
 *
 * @param $results
 *   An array of search results.
 *
 * @return
 *   A renderable array, which will render the formatted search results with a
 *   pager included.','signature' => 'hook_search_page($results)','sample_code' => '  $output[\'prefix\'][\'#markup\'] = \'<ol class="search-results">\';

  foreach ($results as $entry) {
    $output[] = array(
      \'#theme\' => \'search_result\',
      \'#result\' => $entry,
      \'#module\' => \'my_module_name\',
    );
  }
  $output[\'suffix\'][\'#markup\'] = \'</ol>\' . theme(\'pager\');

  return $output;'),
  array('id' => '357','drupal_version' => '7','name' => 'hook_search_preprocess','link' => 'http://api.drupal.org/api/drupal/modules!search!search.api.php/function/hook_search_preprocess/7','short_description' => 'Preprocess text for search.','description' => 'Preprocess text for search. This hook is called to preprocess both the text added to the search index and
the keywords users have submitted for searching. Possible uses: Adding spaces between words of Chinese or Japanese text.
Stemming words down to their root words to allow matches between, for
instance, walk, walked, walking, and walks in searching.
Expanding abbreviations and acronymns that occur in text.','documentation' => '
 * Preprocess text for search. This hook is called to preprocess both the text
 * added to the search index and the keywords users have submitted for searching.
 * Possible uses: Adding spaces between words of Chinese or Japanese text.
 * Stemming words down to their root words to allow matches between, for
 * instance, walk, walked, walking, and walks in searching. Expanding
 * abbreviations and acronymns that occur in text.','params_docs' => '
 *
 * @param $text
 *   The text to preprocess. This is a single piece of plain text extracted from
 *   between two HTML tags or from the search query. It will not contain any HTML
 *   entities or HTML tags.
 *
 * @return
 *   The text after preprocessing. Note that if your module decides not to alter
 *   the text, it should return the original text. Also, after preprocessing,
 *   words in the text should be separated by a space.','signature' => 'hook_search_preprocess($text)','sample_code' => '  // Do processing on $text
  return $text;'),
  array('id' => '358','drupal_version' => '7','name' => 'hook_search_reset','link' => 'http://api.drupal.org/api/drupal/modules!search!search.api.php/function/hook_search_reset/7','short_description' => 'Take action when the search index is going to be rebuilt.','description' => 'Take action when the search index is going to be rebuilt. Modules that use hook_update_index() should update their indexing
bookkeeping so that it starts from scratch the next time
hook_update_index() is called.','documentation' => '
 * Take action when the search index is going to be rebuilt. Modules that use
 * hook_update_index() should update their indexing bookkeeping so that it starts
 * from scratch the next time hook_update_index() is called.','params_docs' => '','signature' => 'hook_search_reset()','sample_code' => '  db_update(\'search_dataset\')
    ->fields(array(\'reindex\' => REQUEST_TIME))
    ->condition(\'type\', \'node\')
    ->execute();'),
  array('id' => '359','drupal_version' => '7','name' => 'hook_search_status','link' => 'http://api.drupal.org/api/drupal/modules!search!search.api.php/function/hook_search_status/7','short_description' => 'Report the status of indexing.','description' => 'Report the status of indexing. The core search module only invokes this hook on active modules.
Implementing modules do not need to check whether they are active when
calculating their return values.','documentation' => '
 * Report the status of indexing. The core search module only invokes this hook
 * on active modules. Implementing modules do not need to check whether they are
 * active when calculating their return values.','params_docs' => '
 *
 * @return
 *   An associative array with the key-value pairs: \'remaining\': The number of
 *   items left to index. \'total\': The total number of items to index.','signature' => 'hook_search_status()','sample_code' => '  $total = db_query(\'SELECT COUNT(*) FROM {node} WHERE status = 1\')->fetchField();
  $remaining = db_query("SELECT COUNT(*) FROM {node} n LEFT JOIN {search_dataset} d ON d.type = \'node\' AND d.sid = n.nid WHERE n.status = 1 AND d.sid IS NULL OR d.reindex <> 0")->fetchField();
  return array(\'remaining\' => $remaining, \'total\' => $total);'),
  array('id' => '360','drupal_version' => '7','name' => 'hook_shortcut_default_set','link' => 'http://api.drupal.org/api/drupal/modules!shortcut!shortcut.api.php/function/hook_shortcut_default_set/7','short_description' => 'Return the name of a default shortcut set for the provided user account.','description' => 'Return the name of a default shortcut set for the provided user account. This hook allows modules to define default shortcut sets for a particular
user that differ from the site-wide default (for example, a module may want
to define default shortcuts on a per-role basis). The default shortcut set is used only when the user does not have any other
shortcut set explicitly assigned to them. Note that only one default shortcut set can exist per user, so when multiple
modules implement this hook, the last (i.e., highest weighted) module which
returns a valid shortcut set name will prevail.','documentation' => '
 * Return the name of a default shortcut set for the provided user account. This
 * hook allows modules to define default shortcut sets for a particular user that
 * differ from the site-wide default (for example, a module may want to define
 * default shortcuts on a per-role basis). The default shortcut set is used only
 * when the user does not have any other shortcut set explicitly assigned to
 * them. Note that only one default shortcut set can exist per user, so when
 * multiple modules implement this hook, the last (i.e.','params_docs' => '
 *
 * @param $account
 *   The user account whose default shortcut set is being requested.
 *
 * @return
 *   The name of the shortcut set that this module recommends for that user, if
 *   there is one.','signature' => 'hook_shortcut_default_set($account)','sample_code' => '  // Use a special set of default shortcuts for administrators only.
  if (in_array(variable_get(\'user_admin_role\', 0), $account->roles)) {
    return variable_get(\'mymodule_shortcut_admin_default_set\');
  }'),
  array('id' => '361','drupal_version' => '7','name' => 'hook_simpletest_alter','link' => 'http://api.drupal.org/api/drupal/modules!simpletest!simpletest.api.php/function/hook_simpletest_alter/7','short_description' => 'Alter the list of tests.','description' => 'Alter the list of tests.','documentation' => '
 * Alter the list of tests.','params_docs' => '
 *
 * @param $groups
 *   A two dimension array, the first key is the test group (as defined in
 *   getInfo) the second is the name of the class and the value is the return
 *   value of the getInfo method.','signature' => 'hook_simpletest_alter(&$groups)','sample_code' => '  // An alternative session handler module would not want to run the original
  // Session https handling test because it checks the sessions table in the
  // database.
  unset($groups[\'Session\'][\'testHttpsSession\']);'),
  array('id' => '362','drupal_version' => '7','name' => 'hook_stream_wrappers','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_stream_wrappers/7','short_description' => 'Registers PHP stream wrapper implementations associated with a module.','description' => 'Registers PHP stream wrapper implementations associated with a module. Provide a facility for managing and querying user-defined stream wrappers
in PHP. PHP\'s internal stream_get_wrappers() doesn\'t return the class
registered to handle a stream, which we need to be able to find the handler
for class instantiation. If a module registers a scheme that is already registered with PHP, it will
be unregistered and replaced with the specified class.','documentation' => '
 * Registers PHP stream wrapper implementations associated with a module. Provide
 * a facility for managing and querying user-defined stream wrappers in PHP.
 * PHP\'s internal stream_get_wrappers() doesn\'t return the class registered to
 * handle a stream, which we need to be able to find the handler for class
 * instantiation. If a module registers a scheme that is already registered with
 * PHP, it will be unregistered and replaced with the specified class.','params_docs' => '
 *
 * @return
 *   A nested array, keyed first by scheme name ("public" for "public://"), then
 *   keyed by the following values: \'name\' A short string to name the wrapper.
 *   \'class\' A string specifying the PHP class that implements the
 *   DrupalStreamWrapperInterface interface. \'description\' A string with a short
 *   description of what the wrapper does. \'type\' (Optional) A bitmask of flags
 *   indicating what type of streams this wrapper will access - local or remote,
 *   readable and/or writeable, etc. Many shortcut constants are defined in
 *   stream_wrappers.inc.','signature' => 'hook_stream_wrappers()','sample_code' => '  return array(
    \'public\' => array(
      \'name\' => t(\'Public files\'),
      \'class\' => \'DrupalPublicStreamWrapper\',
      \'description\' => t(\'Public local files served by the webserver.\'),
      \'type\' => STREAM_WRAPPERS_LOCAL_NORMAL,
    ),
    \'private\' => array(
      \'name\' => t(\'Private files\'),
      \'class\' => \'DrupalPrivateStreamWrapper\',
      \'description\' => t(\'Private local files served by Drupal.\'),
      \'type\' => STREAM_WRAPPERS_LOCAL_NORMAL,
    ),
    \'temp\' => array(
      \'name\' => t(\'Temporary files\'),
      \'class\' => \'DrupalTempStreamWrapper\',
      \'description\' => t(\'Temporary local files for upload and previews.\'),
      \'type\' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
    \'cdn\' => array(
      \'name\' => t(\'Content delivery network files\'),
      \'class\' => \'MyModuleCDNStreamWrapper\',
      \'description\' => t(\'Files served by a content delivery network.\'),
      // \'type\' can be omitted to use the default of STREAM_WRAPPERS_NORMAL
    ),
    \'youtube\' => array(
      \'name\' => t(\'YouTube video\'),
      \'class\' => \'MyModuleYouTubeStreamWrapper\',
      \'description\' => t(\'Video streamed from YouTube.\'),
      // A module implementing YouTube integration may decide to support using
      // the YouTube API for uploading video, but here, we assume that this
      // particular module only supports playing YouTube video.
      \'type\' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );'),
  array('id' => '363','drupal_version' => '7','name' => 'hook_stream_wrappers_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_stream_wrappers_alter/7','short_description' => 'Alters the list of PHP stream wrapper implementations.','description' => 'Alters the list of PHP stream wrapper implementations.','documentation' => '
 * Alters the list of PHP stream wrapper implementations.','params_docs' => '','signature' => 'hook_stream_wrappers_alter(&$wrappers)','sample_code' => '  // Change the name of private files to reflect the performance.
  $wrappers[\'private\'][\'name\'] = t(\'Slow files\');'),
  array('id' => '364','drupal_version' => '7','name' => 'hook_system_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_system_info_alter/7','short_description' => 'Alter the information parsed from module and theme .info files','description' => 'Alter the information parsed from module and theme .info files This hook is invoked in _system_rebuild_module_data() and in
_system_rebuild_theme_data(). A module may implement this hook in order to
add to or alter the data generated by reading the .info file with
drupal_parse_info_file().','documentation' => '
 * Alter the information parsed from module and theme .info files This hook is
 * invoked in _system_rebuild_module_data() and in _system_rebuild_theme_data().
 * A module may implement this hook in order to add to or alter the data
 * generated by reading the .info file with drupal_parse_info_file().','params_docs' => '
 *
 * @param $info
 *   The .info file contents, passed by reference so that it can be altered.
 * @param $file
 *   Full information about the module or theme, including $file->name, and
 *   $file->filename.
 * @param $type
 *   Either \'module\' or \'theme\', depending on the type of .info file that was
 *   passed.','signature' => 'hook_system_info_alter(&$info, $file, $type)','sample_code' => '  // Only fill this in if the .info file does not define a \'datestamp\'.
  if (empty($info[\'datestamp\'])) {
    $info[\'datestamp\'] = filemtime($file->filename);
  }'),
  array('id' => '365','drupal_version' => '7','name' => 'hook_system_themes_page_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_system_themes_page_alter/7','short_description' => 'Alters theme operation links.','description' => 'Alters theme operation links.','documentation' => '
 * Alters theme operation links.','params_docs' => '
 *
 * @param $theme_groups
 *   An associative array containing groups of themes.','signature' => 'hook_system_themes_page_alter(&$theme_groups)','sample_code' => '  foreach ($theme_groups as $state => &$group) {
    foreach ($theme_groups[$state] as &$theme) {
      // Add a foo link to each list of theme operations.
      $theme->operations[] = array(
        \'title\' => t(\'Foo\'),
        \'href\' => \'admin/appearance/foo\',
        \'query\' => array(\'theme\' => $theme->name),
      );
    }
  }'),
  array('id' => '366','drupal_version' => '7','name' => 'hook_system_theme_info','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_system_theme_info/7','short_description' => 'Return additional themes provided by modules.','description' => 'Return additional themes provided by modules. Only use this hook for testing purposes. Use a hidden MYMODULE_test.module
to implement this hook. Testing themes should be hidden, too. This hook is invoked from _system_rebuild_theme_data() and allows modules to
register additional themes outside of the regular \'themes\' directories of a
Drupal installation.','documentation' => '
 * Return additional themes provided by modules. Only use this hook for testing
 * purposes. Use a hidden MYMODULE_test.module to implement this hook. Testing
 * themes should be hidden, too. This hook is invoked from
 * _system_rebuild_theme_data() and allows modules to register additional themes
 * outside of the regular \'themes\' directories of a Drupal installation.','params_docs' => '
 *
 * @return
 *   An associative array. Each key is the system name of a theme and each value
 *   is the corresponding path to the theme\'s .info file.','signature' => 'hook_system_theme_info()','sample_code' => '  $themes[\'mymodule_test_theme\'] = drupal_get_path(\'module\', \'mymodule\') . \'/mymodule_test_theme/mymodule_test_theme.info\';
  return $themes;'),
  array('id' => '367','drupal_version' => '7','name' => 'hook_taxonomy_term_delete','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_term_delete/7','short_description' => 'Respond to the deletion of taxonomy terms.','description' => 'Respond to the deletion of taxonomy terms. Modules implementing this hook can respond to the deletion of taxonomy
terms from the database.','documentation' => '
 * Respond to the deletion of taxonomy terms. Modules implementing this hook can
 * respond to the deletion of taxonomy terms from the database.','params_docs' => '
 *
 * @param $term
 *   A taxonomy term object.','signature' => 'hook_taxonomy_term_delete($term)','sample_code' => '  db_delete(\'term_synoynm\')->condition(\'tid\', $term->tid)->execute();'),
  array('id' => '368','drupal_version' => '7','name' => 'hook_taxonomy_term_insert','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_term_insert/7','short_description' => 'Act on taxonomy terms when inserted.','description' => 'Act on taxonomy terms when inserted. Modules implementing this hook can act on the term object when saved to
the database.','documentation' => '
 * Act on taxonomy terms when inserted. Modules implementing this hook can act on
 * the term object when saved to the database.','params_docs' => '
 *
 * @param $term
 *   A taxonomy term object.','signature' => 'hook_taxonomy_term_insert($term)','sample_code' => '  if (!empty($term->synonyms)) {
    foreach (explode("\\n", str_replace("\\r", \'\', $term->synonyms)) as $synonym) {
      if ($synonym) {
        db_insert(\'taxonomy_term_synonym\')
        ->fields(array(
          \'tid\' => $term->tid,
          \'name\' => rtrim($synonym),
        ))
        ->execute();
      }
    }
  }'),
  array('id' => '369','drupal_version' => '7','name' => 'hook_taxonomy_term_load','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_term_load/7','short_description' => 'Act on taxonomy terms when loaded.','description' => 'Act on taxonomy terms when loaded. Modules implementing this hook can act on the term objects returned by
taxonomy_term_load_multiple(). For performance reasons, information to be added to term objects should be
loaded in a single query for all terms where possible. Since terms are stored and retrieved from cache during a page request, avoid
altering properties provided by the {taxonomy_term_data} table, since this
may affect the way results are loaded from cache in subsequent calls.','documentation' => '
 * Act on taxonomy terms when loaded. Modules implementing this hook can act on
 * the term objects returned by taxonomy_term_load_multiple(). For performance
 * reasons, information to be added to term objects should be loaded in a single
 * query for all terms where possible. Since terms are stored and retrieved from
 * cache during a page request, avoid altering properties provided by the
 * {taxonomy_term_data} table, since this may affect the way results are loaded
 * from cache in subsequent calls.','params_docs' => '
 *
 * @param $terms
 *   An array of term objects, indexed by tid.','signature' => 'hook_taxonomy_term_load($terms)','sample_code' => '  $result = db_query(\'SELECT tid, foo FROM {mytable} WHERE tid IN (:tids)\', array(\':tids\' => array_keys($terms)));
  foreach ($result as $record) {
    $terms[$record->tid]->foo = $record->foo;
  }'),
  array('id' => '370','drupal_version' => '7','name' => 'hook_taxonomy_term_presave','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_term_presave/7','short_description' => 'Act on taxonomy terms before they are saved.','description' => 'Act on taxonomy terms before they are saved. Modules implementing this hook can act on the term object before it is
inserted or updated.','documentation' => '
 * Act on taxonomy terms before they are saved. Modules implementing this hook
 * can act on the term object before it is inserted or updated.','params_docs' => '
 *
 * @param $term
 *   A term object.','signature' => 'hook_taxonomy_term_presave($term)','sample_code' => '  $term->foo = \'bar\';'),
  array('id' => '371','drupal_version' => '7','name' => 'hook_taxonomy_term_update','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_term_update/7','short_description' => 'Act on taxonomy terms when updated.','description' => 'Act on taxonomy terms when updated. Modules implementing this hook can act on the term object when updated.','documentation' => '
 * Act on taxonomy terms when updated. Modules implementing this hook can act on
 * the term object when updated.','params_docs' => '
 *
 * @param $term
 *   A taxonomy term object.','signature' => 'hook_taxonomy_term_update($term)','sample_code' => '  hook_taxonomy_term_delete($term);
  if (!empty($term->synonyms)) {
    foreach (explode("\\n", str_replace("\\r", \'\', $term->synonyms)) as $synonym) {
      if ($synonym) {
        db_insert(\'taxonomy_term_synonym\')
        ->fields(array(
          \'tid\' => $term->tid,
          \'name\' => rtrim($synonym),
        ))
        ->execute();
      }
    }
  }'),
  array('id' => '372','drupal_version' => '7','name' => 'hook_taxonomy_term_view_alter','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_term_view_alter/7','short_description' => 'Alter the results of taxonomy_term_view().','description' => 'Alter the results of taxonomy_term_view(). This hook is called after the content has been assembled in a structured
array and may be used for doing processing which requires that the complete
taxonomy term content structure has been built. If the module wishes to act on the rendered HTML of the term rather than the
structured content array, it may use this hook to add a #post_render
callback. Alternatively, it could also implement
hook_preprocess_taxonomy_term(). See drupal_render() and theme()
documentation respectively for details.','documentation' => '
 * Alter the results of taxonomy_term_view(). This hook is called after the
 * content has been assembled in a structured array and may be used for doing
 * processing which requires that the complete taxonomy term content structure
 * has been built. If the module wishes to act on the rendered HTML of the term
 * rather than the structured content array, it may use this hook to add a
 * #post_render callback. Alternatively, it could also implement
 * hook_preprocess_taxonomy_term(). See drupal_render() and theme() documentation
 * respectively for details.','params_docs' => '
 *
 * @param $build
 *   A renderable array representing the node content.','signature' => 'hook_taxonomy_term_view_alter(&$build)','sample_code' => '  if ($build[\'#view_mode\'] == \'full\' && isset($build[\'an_additional_field\'])) {
    // Change its weight.
    $build[\'an_additional_field\'][\'#weight\'] = -10;
  }

  // Add a #post_render callback to act on the rendered HTML of the term.
  $build[\'#post_render\'][] = \'my_module_node_post_render\';'),
  array('id' => '373','drupal_version' => '7','name' => 'hook_taxonomy_vocabulary_delete','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_vocabulary_delete/7','short_description' => 'Respond to the deletion of taxonomy vocabularies.','description' => 'Respond to the deletion of taxonomy vocabularies. Modules implementing this hook can respond to the deletion of taxonomy
vocabularies from the database.','documentation' => '
 * Respond to the deletion of taxonomy vocabularies. Modules implementing this
 * hook can respond to the deletion of taxonomy vocabularies from the database.','params_docs' => '
 *
 * @param $vocabulary
 *   A taxonomy vocabulary object.','signature' => 'hook_taxonomy_vocabulary_delete($vocabulary)','sample_code' => '  if (variable_get(\'taxonomy_\' . $vocabulary->vid . \'_synonyms\', FALSE)) {
    variable_del(\'taxonomy_\' . $vocabulary->vid . \'_synonyms\');
  }'),
  array('id' => '374','drupal_version' => '7','name' => 'hook_taxonomy_vocabulary_insert','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_vocabulary_insert/7','short_description' => 'Act on taxonomy vocabularies when inserted.','description' => 'Act on taxonomy vocabularies when inserted. Modules implementing this hook can act on the vocabulary object when saved
to the database.','documentation' => '
 * Act on taxonomy vocabularies when inserted. Modules implementing this hook can
 * act on the vocabulary object when saved to the database.','params_docs' => '
 *
 * @param $vocabulary
 *   A taxonomy vocabulary object.','signature' => 'hook_taxonomy_vocabulary_insert($vocabulary)','sample_code' => '  if ($vocabulary->synonyms) {
    variable_set(\'taxonomy_\' . $vocabulary->vid . \'_synonyms\', TRUE);
  }'),
  array('id' => '375','drupal_version' => '7','name' => 'hook_taxonomy_vocabulary_load','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_vocabulary_load/7','short_description' => 'Act on taxonomy vocabularies when loaded.','description' => 'Act on taxonomy vocabularies when loaded. Modules implementing this hook can act on the vocabulary objects before they
are returned by taxonomy_vocabulary_load_multiple().','documentation' => '
 * Act on taxonomy vocabularies when loaded. Modules implementing this hook can
 * act on the vocabulary objects before they are returned by
 * taxonomy_vocabulary_load_multiple().','params_docs' => '
 *
 * @param $vocabulary
 *   An array of taxonomy vocabulary objects.','signature' => 'hook_taxonomy_vocabulary_load($vocabularies)','sample_code' => '  foreach ($vocabularies as $vocabulary) {
    $vocabulary->synonyms = variable_get(\'taxonomy_\' . $vocabulary->vid . \'_synonyms\', FALSE);
  }'),
  array('id' => '376','drupal_version' => '7','name' => 'hook_taxonomy_vocabulary_presave','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_vocabulary_presave/7','short_description' => 'Act on taxonomy vocabularies before they are saved.','description' => 'Act on taxonomy vocabularies before they are saved. Modules implementing this hook can act on the vocabulary object before it is
inserted or updated.','documentation' => '
 * Act on taxonomy vocabularies before they are saved. Modules implementing this
 * hook can act on the vocabulary object before it is inserted or updated.','params_docs' => '
 *
 * @param $vocabulary
 *   A taxonomy vocabulary object.','signature' => 'hook_taxonomy_vocabulary_presave($vocabulary)','sample_code' => '  $vocabulary->foo = \'bar\';'),
  array('id' => '377','drupal_version' => '7','name' => 'hook_taxonomy_vocabulary_update','link' => 'http://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.api.php/function/hook_taxonomy_vocabulary_update/7','short_description' => 'Act on taxonomy vocabularies when updated.','description' => 'Act on taxonomy vocabularies when updated. Modules implementing this hook can act on the vocabulary object when updated.','documentation' => '
 * Act on taxonomy vocabularies when updated. Modules implementing this hook can
 * act on the vocabulary object when updated.','params_docs' => '
 *
 * @param $vocabulary
 *   A taxonomy vocabulary object.','signature' => 'hook_taxonomy_vocabulary_update($vocabulary)','sample_code' => '  $status = $vocabulary->synonyms ? TRUE : FALSE;
  if ($vocabulary->synonyms) {
    variable_set(\'taxonomy_\' . $vocabulary->vid . \'_synonyms\', $status);
  }'),
  array('id' => '378','drupal_version' => '7','name' => 'hook_test_finished','link' => 'http://api.drupal.org/api/drupal/modules!simpletest!simpletest.api.php/function/hook_test_finished/7','short_description' => 'An individual test has finished.','description' => 'An individual test has finished. This hook is called when an individual test has finished.','documentation' => '
 * An individual test has finished. This hook is called when an individual test
 * has finished.','params_docs' => '
 *
 * @param $results The results of the test as gathered by DrupalWebTestCase.
 *   :.','signature' => 'hook_test_finished($results)','sample_code' => ''),
  array('id' => '379','drupal_version' => '7','name' => 'hook_test_group_finished','link' => 'http://api.drupal.org/api/drupal/modules!simpletest!simpletest.api.php/function/hook_test_group_finished/7','short_description' => 'A test group has finished.','description' => 'A test group has finished. This hook is called just once at the end of a test group.','documentation' => '
 * A test group has finished. This hook is called just once at the end of a test
 * group.','params_docs' => '','signature' => 'hook_test_group_finished()','sample_code' => ''),
  array('id' => '380','drupal_version' => '7','name' => 'hook_test_group_started','link' => 'http://api.drupal.org/api/drupal/modules!simpletest!simpletest.api.php/function/hook_test_group_started/7','short_description' => 'A test group has started.','description' => 'A test group has started. This hook is called just once at the beginning of a test group.','documentation' => '
 * A test group has started. This hook is called just once at the beginning of a
 * test group.','params_docs' => '','signature' => 'hook_test_group_started()','sample_code' => ''),
  array('id' => '381','drupal_version' => '7','name' => 'hook_theme','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_theme/7','short_description' => 'Register a module (or theme\'s) theme implementations.','description' => 'Register a module (or theme\'s) theme implementations. The implementations declared by this hook have two purposes: either they
specify how a particular render array is to be rendered as HTML (this is
usually the case if the theme function is assigned to the render array\'s
#theme property), or they return the HTML that should be returned by an
invocation of theme(). The following parameters are all optional.','documentation' => '
 * Register a module (or theme\'s) theme implementations. The implementations
 * declared by this hook have two purposes: either they specify how a particular
 * render array is to be rendered as HTML (this is usually the case if the theme
 * function is assigned to the render array\'s #theme property), or they return
 * the HTML that should be returned by an invocation of theme(). The following
 * parameters are all optional.','params_docs' => '
 *
 * @param array $existing
 *   An array of existing implementations that may be used for override purposes.
 *   This is primarily useful for themes that may wish to examine existing
 *   implementations to extract data (such as arguments) so that it may properly
 *   register its own, higher priority implementations.
 * @param $type
 *   Whether a theme, module, etc. is being processed. This is primarily useful
 *   so that themes tell if they are the actual theme being called or a parent
 *   theme. May be one of: \'module\': A module is being checked for theme
 *   implementations. \'base_theme_engine\': A theme engine is being checked for a
 *   theme that is a parent of the actual theme being used. \'theme_engine\': A
 *   theme engine is being checked for the actual theme being used. \'base_theme\':
 *   A base theme is being checked for theme implementations. \'theme\': The actual
 *   theme in use is being checked.
 * @param $theme
 *   The actual name of theme, module, etc. that is being being processed.
 * @param $path
 *   The directory path of the theme or module, so that it doesn\'t need to be
 *   looked up.
 *
 * @return
 *   array An associative array of theme hook information. The keys on the outer
 *   array are the internal names of the hooks, and the values are arrays
 *   containing information about the hook. Each information array must contain
 *   either a \'variables\' element or a \'render element\' element, but not both.
 *   Use \'render element\' if you are theming a single element or element tree
 *   composed of elements, such as a form array, a page array, or a single
 *   checkbox element. Use \'variables\' if your theme implementation is intended
 *   to be called directly through theme() and has.','signature' => 'hook_theme($existing, $type, $theme, $path)','sample_code' => '  return array(
    \'forum_display\' => array(
      \'variables\' => array(\'forums\' => NULL, \'topics\' => NULL, \'parents\' => NULL, \'tid\' => NULL, \'sortby\' => NULL, \'forum_per_page\' => NULL),
    ),
    \'forum_list\' => array(
      \'variables\' => array(\'forums\' => NULL, \'parents\' => NULL, \'tid\' => NULL),
    ),
    \'forum_topic_list\' => array(
      \'variables\' => array(\'tid\' => NULL, \'topics\' => NULL, \'sortby\' => NULL, \'forum_per_page\' => NULL),
    ),
    \'forum_icon\' => array(
      \'variables\' => array(\'new_posts\' => NULL, \'num_posts\' => 0, \'comment_mode\' => 0, \'sticky\' => 0),
    ),
    \'status_report\' => array(
      \'render element\' => \'requirements\',
      \'file\' => \'system.admin.inc\',
    ),
    \'system_date_time_settings\' => array(
      \'render element\' => \'form\',
      \'file\' => \'system.admin.inc\',
    ),
  );'),
  array('id' => '382','drupal_version' => '7','name' => 'hook_theme_registry_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_theme_registry_alter/7','short_description' => 'Alter the theme registry information returned from hook_theme().','description' => 'Alter the theme registry information returned from hook_theme(). The theme registry stores information about all available theme hooks,
including which callback functions those hooks will call when triggered,
what template files are exposed by these hooks, and so on. Note that this hook is only executed as the theme cache is re-built.
Changes here will not be visible until the next cache clear. The $theme_registry array is keyed by theme hook name, and contains the
information returned from hook_theme(), as well as additional properties
added by _theme_process_registry(). For example: $theme_registry[\'user_profile\'] = array(
  \'variables\' => array(
    \'account\' => NULL,
  ),
  \'template\' => \'modules/user/user-profile\',
  \'file\' => \'modules/user/user.pages.inc\',
  \'type\' => \'module\',
  \'theme path\' => \'modules/user\',
  \'preprocess functions\' => array(
    0 => \'template_preprocess\',
    1 => \'template_preprocess_user_profile\',
  ),
);','documentation' => '
 * Alter the theme registry information returned from hook_theme(). The theme
 * registry stores information about all available theme hooks, including which
 * callback functions those hooks will call when triggered, what template files
 * are exposed by these hooks, and so on. Note that this hook is only executed as
 * the theme cache is re-built. Changes here will not be visible until the next
 * cache clear. The $theme_registry array is keyed by theme hook name, and
 * contains the information returned from hook_theme(), as well as additional
 * properties added by.','params_docs' => '
 *
 * @param $theme_registry
 *   The entire cache of theme registry information, post-processing.','signature' => 'hook_theme_registry_alter(&$theme_registry)','sample_code' => '  // Kill the next/previous forum topic navigation links.
  foreach ($theme_registry[\'forum_topic_navigation\'][\'preprocess functions\'] as $key => $value) {
    if ($value == \'template_preprocess_forum_topic_navigation\') {
      unset($theme_registry[\'forum_topic_navigation\'][\'preprocess functions\'][$key]);
    }
  }'),
  array('id' => '383','drupal_version' => '7','name' => 'hook_tokens','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_tokens/7','short_description' => 'Provide replacement values for placeholder tokens.','description' => 'Provide replacement values for placeholder tokens. This hook is invoked when someone calls token_replace(). That function first
scans the text for [type:token] patterns, and splits the needed tokens into
groups by type. Then hook_tokens() is invoked on each token-type group,
allowing your module to respond by providing replacement text for any of
the tokens in the group that your module knows how to process. A module implementing this hook should also implement hook_token_info() in
order to list its available tokens on editing screens.','documentation' => '
 * Provide replacement values for placeholder tokens. This hook is invoked when
 * someone calls token_replace(). That function first scans the text for
 * [type:token] patterns, and splits the needed tokens into groups by type. Then
 * hook_tokens() is invoked on each token-type group, allowing your module to
 * respond by providing replacement text for any of the tokens in the group that
 * your module knows how to process. A module implementing this hook should also
 * implement hook_token_info() in order to list its available tokens on editing
 * screens.','params_docs' => '
 *
 * @param $type
 *   The machine-readable name of the type (group) of token being replaced, such
 *   as \'node\', \'user\', or another type defined by a.
 * @param $tokens
 *   An array of tokens to be replaced. The keys are the machine-readable token
 *   names, and the values are the raw [type:token] strings that appeared in the
 *   original text.
 * @param $data
 *   (optional) An associative array of data objects to be used when generating
 *   replacement values, as supplied in the $data parameter to.
 * @param $options
 *   (optional) An associative array of options for token replacement; see.
 *
 * @return
 *   An associative array of replacement values, keyed by the raw [type:token]
 *   strings from the original text.','signature' => 'hook_tokens($type, $tokens, array $data = array(), array $options = array())','sample_code' => '  $url_options = array(\'absolute\' => TRUE);
  if (isset($options[\'language\'])) {
    $url_options[\'language\'] = $options[\'language\'];
    $language_code = $options[\'language\']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options[\'sanitize\']);

  $replacements = array();

  if ($type == \'node\' && !empty($data[\'node\'])) {
    $node = $data[\'node\'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Simple key values on the node.
        case \'nid\':
          $replacements[$original] = $node->nid;
          break;

        case \'title\':
          $replacements[$original] = $sanitize ? check_plain($node->title) : $node->title;
          break;

        case \'edit-url\':
          $replacements[$original] = url(\'node/\' . $node->nid . \'/edit\', $url_options);
          break;

          // Default values for the chained tokens handled below.
        case \'author\':
          $name = ($node->uid == 0) ? variable_get(\'anonymous\', t(\'Anonymous\')) : $node->name;
          $replacements[$original] = $sanitize ? filter_xss($name) : $name;
          break;

        case \'created\':
          $replacements[$original] = format_date($node->created, \'medium\', \'\', NULL, $language_code);
          break;
      }
    }

    if ($author_tokens = token_find_with_prefix($tokens, \'author\')) {
      $author = user_load($node->uid);
      $replacements += token_generate(\'user\', $author_tokens, array(\'user\' => $author), $options);
    }

    if ($created_tokens = token_find_with_prefix($tokens, \'created\')) {
      $replacements += token_generate(\'date\', $created_tokens, array(\'date\' => $node->created), $options);
    }
  }

  return $replacements;'),
  array('id' => '384','drupal_version' => '7','name' => 'hook_tokens_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_tokens_alter/7','short_description' => 'Alter replacement values for placeholder tokens.','description' => 'Alter replacement values for placeholder tokens.','documentation' => '
 * Alter replacement values for placeholder tokens.','params_docs' => '
 *
 * @param $replacements
 *   An associative array of replacements returned by.
 * @param $context
 *   The context in which \'type\' \'tokens\' \'data\' \'options\'.','signature' => 'hook_tokens_alter(array &$replacements, array $context)','sample_code' => '  $options = $context[\'options\'];

  if (isset($options[\'language\'])) {
    $url_options[\'language\'] = $options[\'language\'];
    $language_code = $options[\'language\']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options[\'sanitize\']);

  if ($context[\'type\'] == \'node\' && !empty($context[\'data\'][\'node\'])) {
    $node = $context[\'data\'][\'node\'];

    // Alter the [node:title] token, and replace it with the rendered content
    // of a field (field_title).
    if (isset($context[\'tokens\'][\'title\'])) {
      $title = field_view_field(\'node\', $node, \'field_title\', \'default\', $language_code);
      $replacements[$context[\'tokens\'][\'title\']] = drupal_render($title);
    }
  }'),
  array('id' => '385','drupal_version' => '7','name' => 'hook_token_info','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_token_info/7','short_description' => 'Provide information about available placeholder tokens and token types.','description' => 'Provide information about available placeholder tokens and token types. Tokens are placeholders that can be put into text by using the syntax
[type:token], where type is the machine-readable name of a token type, and
token is the machine-readable name of a token within this group. This hook
provides a list of types and tokens to be displayed on text editing screens,
so that people editing text can see what their token options are. The actual token replacement is done by token_replace(), which invokes
hook_tokens(). Your module will need to implement that hook in order to
generate token replacements from the tokens defined here.','documentation' => '
 * Provide information about available placeholder tokens and token types. Tokens
 * are placeholders that can be put into text by using the syntax [type:token],
 * where type is the machine-readable name of a token type, and token is the
 * machine-readable name of a token within this group. This hook provides a list
 * of types and tokens to be displayed on text editing screens, so that people
 * editing text can see what their token options are. The actual token
 * replacement is done by token_replace(), which invokes hook_tokens().','params_docs' => '
 *
 * @return
 *   An associative array of available tokens and token types. The outer array
 *   has two components: types: An associative array of token types (groups).
 *   Each token type is an associative array with the following components: name:
 *   The translated human-readable short name of the token type. description: A
 *   translated longer description of the token type. needs-data: The type of
 *   data that must be provided to token_replace() in the $data argument (i.e.,
 *   the key name in $data) in order for tokens of this type to be used in the
 *   $text being processed.','signature' => 'hook_token_info()','sample_code' => '  $type = array(
    \'name\' => t(\'Nodes\'),
    \'description\' => t(\'Tokens related to individual nodes.\'),
    \'needs-data\' => \'node\',
  );

  // Core tokens for nodes.
  $node[\'nid\'] = array(
    \'name\' => t("Node ID"),
    \'description\' => t("The unique ID of the node."),
  );
  $node[\'title\'] = array(
    \'name\' => t("Title"),
    \'description\' => t("The title of the node."),
  );
  $node[\'edit-url\'] = array(
    \'name\' => t("Edit URL"),
    \'description\' => t("The URL of the node\'s edit page."),
  );

  // Chained tokens for nodes.
  $node[\'created\'] = array(
    \'name\' => t("Date created"),
    \'description\' => t("The date the node was posted."),
    \'type\' => \'date\',
  );
  $node[\'author\'] = array(
    \'name\' => t("Author"),
    \'description\' => t("The author of the node."),
    \'type\' => \'user\',
  );

  return array(
    \'types\' => array(\'node\' => $type),
    \'tokens\' => array(\'node\' => $node),
  );'),
  array('id' => '386','drupal_version' => '7','name' => 'hook_token_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_token_info_alter/7','short_description' => 'Alter the metadata about available placeholder tokens and token types.','description' => 'Alter the metadata about available placeholder tokens and token types.','documentation' => '
 * Alter the metadata about available placeholder tokens and token types.','params_docs' => '
 *
 * @param $data
 *   The associative array of token definitions from.','signature' => 'hook_token_info_alter(&$data)','sample_code' => '  // Modify description of node tokens for our site.
  $data[\'tokens\'][\'node\'][\'nid\'] = array(
    \'name\' => t("Node ID"),
    \'description\' => t("The unique ID of the article."),
  );
  $data[\'tokens\'][\'node\'][\'title\'] = array(
    \'name\' => t("Title"),
    \'description\' => t("The title of the article."),
  );

  // Chained tokens for nodes.
  $data[\'tokens\'][\'node\'][\'created\'] = array(
    \'name\' => t("Date created"),
    \'description\' => t("The date the article was posted."),
    \'type\' => \'date\',
  );'),
  array('id' => '387','drupal_version' => '7','name' => 'hook_translated_menu_link_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_translated_menu_link_alter/7','short_description' => 'Alter a menu link after it has been translated and before it is rendered.','description' => 'Alter a menu link after it has been translated and before it is rendered. This hook is invoked from _menu_link_translate() after a menu link has been
translated; i.e., after dynamic path argument placeholders (%) have been
replaced with actual values, the user access to the link\'s target page has
been checked, and the link has been localized. It is only invoked if
$item[\'options\'][\'alter\'] has been set to a non-empty value (e.g., TRUE).
This flag should be set using hook_menu_link_alter(). Implementations of this hook are able to alter any property of the menu link.
For example, this hook may be used to add a page-specific query string to all
menu links, or hide a certain link by setting: \'hidden\' => 1,','documentation' => '
 * Alter a menu link after it has been translated and before it is rendered. This
 * hook is invoked from _menu_link_translate() after a menu link has been
 * translated; i.e., after dynamic path argument placeholders (%) have been
 * replaced with actual values, the user access to the link\'s target page has
 * been checked, and the link has been localized. It is only invoked if
 * $item[\'options\'][\'alter\'] has been set to a non-empty value (e.g., TRUE). This
 * flag should be set using hook_menu_link_alter().','params_docs' => '
 *
 * @param $item
 *   Associative array defining a menu link after.
 * @param $map
 *   Associative array containing the menu $map (path parts and/or objects).','signature' => 'hook_translated_menu_link_alter(&$item, $map)','sample_code' => '  if ($item[\'href\'] == \'devel/cache/clear\') {
    $item[\'localized_options\'][\'query\'] = drupal_get_destination();
  }'),
  array('id' => '388','drupal_version' => '7','name' => 'hook_trigger_info','link' => 'http://api.drupal.org/api/drupal/modules!trigger!trigger.api.php/function/hook_trigger_info/7','short_description' => 'Declare triggers (events) for users to assign actions to.','description' => 'Declare triggers (events) for users to assign actions to. This hook is used by the trigger module to create a list of triggers (events)
that users can assign actions to. Your module is responsible for detecting
that the events have occurred, calling trigger_get_assigned_actions() to find
out which actions the user has associated with your trigger, and then calling
actions_do() to fire off the actions.','documentation' => '
 * Declare triggers (events) for users to assign actions to. This hook is used by
 * the trigger module to create a list of triggers (events) that users can assign
 * actions to. Your module is responsible for detecting that the events have
 * occurred, calling trigger_get_assigned_actions() to find out which actions the
 * user has associated with your trigger, and then calling actions_do() to fire
 * off the actions.','params_docs' => '
 *
 * @return
 *   A nested associative array. The outermost key is the name of the module that
 *   is defining the triggers. This will be used to create a local task (tab) in
 *   the trigger module\'s user interface. A contrib module may supply a trigger
 *   for a core module by giving the core module\'s name as the key. For example,
 *   you could use the \'node\' key to add a node-related trigger. Within each
 *   module, each individual trigger is keyed by a hook name describing the
 *   particular trigger (this is not visible to the user, but can be used by your
 *   module for identification).','signature' => 'hook_trigger_info()','sample_code' => '  return array(
    \'node\' => array(
      \'node_presave\' => array(
        \'label\' => t(\'When either saving new content or updating existing content\'),
      ),
      \'node_insert\' => array(
        \'label\' => t(\'After saving new content\'),
      ),
      \'node_update\' => array(
        \'label\' => t(\'After saving updated content\'),
      ),
      \'node_delete\' => array(
        \'label\' => t(\'After deleting content\'),
      ),
      \'node_view\' => array(
        \'label\' => t(\'When content is viewed by an authenticated user\'),
      ),
    ),
  );'),
  array('id' => '389','drupal_version' => '7','name' => 'hook_trigger_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!trigger!trigger.api.php/function/hook_trigger_info_alter/7','short_description' => 'Alter triggers declared by hook_trigger_info().','description' => 'Alter triggers declared by hook_trigger_info().','documentation' => '
 * Alter triggers declared by hook_trigger_info().','params_docs' => '
 *
 * @param $triggers
 *   Array of trigger information returned by.','signature' => 'hook_trigger_info_alter(&$triggers)','sample_code' => '  $triggers[\'node\'][\'node_insert\'][\'label\'] = t(\'When content is saved\');'),
  array('id' => '390','drupal_version' => '7','name' => 'hook_uninstall','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_uninstall/7','short_description' => 'Remove any information that the module sets.','description' => 'Remove any information that the module sets. The information that the module should remove includes: variables that the module has set using variable_set() or system_settings_form()
modifications to existing tables The module should not remove its entry from the {system} table. Database
tables defined by hook_schema() will be removed automatically. The uninstall hook must be implemented in the module\'s .install file. It
will fire when the module gets uninstalled but before the module\'s database
tables are removed, allowing your module to query its own tables during
this routine. When hook_uninstall() is called, your module will already be disabled, so
its .module file will not be automatically included. If you need to call API
functions from your .module file in this hook, use drupal_load() to make
them available. (Keep this usage to a minimum, though, especially when
calling API functions that invoke hooks, or API functions from modules
listed as dependencies, since these may not be available or work as expected
when the module is disabled.)','documentation' => '
 * Remove any information that the module sets. The information that the module
 * should remove includes: variables that the module has set using variable_set()
 * or system_settings_form() modifications to existing tables The module should
 * not remove its entry from the {system} table. Database tables defined by
 * hook_schema() will be removed automatically. The uninstall hook must be
 * implemented in the module\'s .install file. It will fire when the module gets
 * uninstalled but before the module\'s database tables are removed, allowing your
 * module to query its own.','params_docs' => '','signature' => 'hook_uninstall()','sample_code' => '  variable_del(\'upload_file_types\');'),
  array('id' => '391','drupal_version' => '7','name' => 'hook_update','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_update/7','short_description' => 'Respond to updates to a node.','description' => 'Respond to updates to a node. This hook is invoked only on the module that defines the node\'s content type
(use hook_node_update() to act on all node updates). This hook is invoked from node_save() after the node is updated in the
node table in the database, before field_attach_update() is called, and
before hook_node_update() is invoked.','documentation' => '
 * Respond to updates to a node. This hook is invoked only on the module that
 * defines the node\'s content type (use hook_node_update() to act on all node
 * updates). This hook is invoked from node_save() after the node is updated in
 * the node table in the database, before field_attach_update() is called, and
 * before hook_node_update() is invoked.','params_docs' => '
 *
 * @param $node
 *   The node that is being updated.','signature' => 'hook_update($node)','sample_code' => '  db_update(\'mytable\')
    ->fields(array(\'extra\' => $node->extra))
    ->condition(\'nid\', $node->nid)
    ->execute();'),
  array('id' => '392','drupal_version' => '7','name' => 'hook_updater_info','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_updater_info/7','short_description' => 'Provide information on Updaters (classes that can update Drupal).','description' => 'Provide information on Updaters (classes that can update Drupal). An Updater is a class that knows how to update various parts of the Drupal
file system, for example to update modules that have newer releases, or to
install a new theme.','documentation' => '
 * Provide information on Updaters (classes that can update Drupal). An Updater
 * is a class that knows how to update various parts of the Drupal file system,
 * for example to update modules that have newer releases, or to install a new
 * theme.','params_docs' => '
 *
 * @return
 *   An associative array of information about the updater(s) being provided.
 *   This array is keyed by a unique identifier for each updater, and the values
 *   are subarrays that can contain the following keys: class: The name of the
 *   PHP class which implements this updater. name: Human-readable name of this
 *   updater. weight: Controls what order the Updater classes are consulted to
 *   decide which one should handle a given task. When an update task is being
 *   run, the system will loop through all the Updater classes defined in this
 *   registry in weight order and let each.','signature' => 'hook_updater_info()','sample_code' => '  return array(
    \'module\' => array(
      \'class\' => \'ModuleUpdater\',
      \'name\' => t(\'Update modules\'),
      \'weight\' => 0,
    ),
    \'theme\' => array(
      \'class\' => \'ThemeUpdater\',
      \'name\' => t(\'Update themes\'),
      \'weight\' => 0,
    ),
  );'),
  array('id' => '393','drupal_version' => '7','name' => 'hook_updater_info_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_updater_info_alter/7','short_description' => 'Alter the Updater information array.','description' => 'Alter the Updater information array. An Updater is a class that knows how to update various parts of the Drupal
file system, for example to update modules that have newer releases, or to
install a new theme.','documentation' => '
 * Alter the Updater information array. An Updater is a class that knows how to
 * update various parts of the Drupal file system, for example to update modules
 * that have newer releases, or to install a new theme.','params_docs' => '
 *
 * @param array $updaters
 *   Associative array of updaters as defined through.','signature' => 'hook_updater_info_alter(&$updaters)','sample_code' => '  // Adjust weight so that the theme Updater gets a chance to handle a given
  // update task before module updaters.
  $updaters[\'theme\'][\'weight\'] = -1;'),
  array('id' => '394','drupal_version' => '7','name' => 'hook_update_dependencies','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_update_dependencies/7','short_description' => 'Return an array of information about module update dependencies.','description' => 'Return an array of information about module update dependencies. This can be used to indicate update functions from other modules that your
module\'s update functions depend on, or vice versa. It is used by the update
system to determine the appropriate order in which updates should be run, as
well as to search for missing dependencies. Implementations of this hook should be placed in a mymodule.install file in
the same directory as mymodule.module.','documentation' => '
 * Return an array of information about module update dependencies. This can be
 * used to indicate update functions from other modules that your module\'s update
 * functions depend on, or vice versa. It is used by the update system to
 * determine the appropriate order in which updates should be run, as well as to
 * search for missing dependencies. Implementations of this hook should be placed
 * in a mymodule.install file in the same directory as mymodule.module.','params_docs' => '
 *
 * @return
 *   A multidimensional array containing information about the module update
 *   dependencies. The first two levels of keys represent the module and update
 *   number (respectively) for which information is being returned, and the value
 *   is an array of information about that update\'s dependencies. Within this
 *   array, each key represents a module, and each value represents the number of
 *   an update function within that module. In the event that your update
 *   function depends on more than one update from a particular module, you
 *   should always list the highest numbered one.','signature' => 'hook_update_dependencies()','sample_code' => '  // Indicate that the mymodule_update_7000() function provided by this module
  // must run after the another_module_update_7002() function provided by the
  // \'another_module\' module.
  $dependencies[\'mymodule\'][7000] = array(
    \'another_module\' => 7002,
  );
  // Indicate that the mymodule_update_7001() function provided by this module
  // must run before the yet_another_module_update_7004() function provided by
  // the \'yet_another_module\' module. (Note that declaring dependencies in this
  // direction should be done only in rare situations, since it can lead to the
  // following problem: If a site has already run the yet_another_module
  // module\'s database updates before it updates its codebase to pick up the
  // newest mymodule code, then the dependency declared here will be ignored.)
  $dependencies[\'yet_another_module\'][7004] = array(
    \'mymodule\' => 7001,
  );
  return $dependencies;'),
  array('id' => '395','drupal_version' => '7','name' => 'hook_update_index','link' => 'http://api.drupal.org/api/drupal/modules!search!search.api.php/function/hook_update_index/7','short_description' => 'Update the search index for this module.','description' => 'Update the search index for this module. This hook is called every cron run if search.module is enabled, your
module has implemented hook_search_info(), and your module has been set as
an active search module on the Search settings page
(admin/config/search/settings). It allows your module to add items to the
built-in search index using search_index(), or to add them to your module\'s
own indexing mechanism. When implementing this hook, your module should index content items that
were modified or added since the last run. PHP has a time limit
for cron, though, so it is advisable to limit how many items you index
per run using variable_get(\'search_cron_limit\') (see example below). Also,
since the cron run could time out and abort in the middle of your run, you
should update your module\'s internal bookkeeping on when items have last
been indexed as you go rather than waiting to the end of indexing.','documentation' => '
 * Update the search index for this module. This hook is called every cron run if
 * search.module is enabled, your module has implemented hook_search_info(), and
 * your module has been set as an active search module on the Search settings
 * page (admin/config/search/settings). It allows your module to add items to the
 * built-in search index using search_index(), or to add them to your module\'s
 * own indexing mechanism. When implementing this hook, your module should index
 * content items that were modified or added since the last run.','params_docs' => '','signature' => 'hook_update_index()','sample_code' => '  $limit = (int) variable_get(\'search_cron_limit\', 100);

  $result = db_query_range("SELECT n.nid FROM {node} n LEFT JOIN {search_dataset} d ON d.type = \'node\' AND d.sid = n.nid WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, n.nid ASC", 0, $limit);

  foreach ($result as $node) {
    $node = node_load($node->nid);

    // Save the changed time of the most recent indexed node, for the search
    // results half-life calculation.
    variable_set(\'node_cron_last\', $node->changed);

    // Render the node.
    node_build_content($node, \'search_index\');
    $node->rendered = drupal_render($node->content);

    $text = \'<h1>\' . check_plain($node->title) . \'</h1>\' . $node->rendered;

    // Fetch extra data normally not visible
    $extra = module_invoke_all(\'node_update_index\', $node);
    foreach ($extra as $t) {
      $text .= $t;
    }

    // Update index
    search_index($node->nid, \'node\', $text);
  }'),
  array('id' => '396','drupal_version' => '7','name' => 'hook_update_last_removed','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_update_last_removed/7','short_description' => 'Return a number which is no longer available as hook_update_N().','description' => 'Return a number which is no longer available as hook_update_N(). If you remove some update functions from your mymodule.install file, you
should notify Drupal of those missing functions. This way, Drupal can
ensure that no update is accidentally skipped. Implementations of this hook should be placed in a mymodule.install file in
the same directory as mymodule.module.','documentation' => '
 * Return a number which is no longer available as hook_update_N(). If you remove
 * some update functions from your mymodule.install file, you should notify
 * Drupal of those missing functions. This way, Drupal can ensure that no update
 * is accidentally skipped. Implementations of this hook should be placed in a
 * mymodule.install file in the same directory as mymodule.module.','params_docs' => '
 *
 * @return
 *   An integer, corresponding to hook_update_N() which has been removed from
 *   mymodule.install.','signature' => 'hook_update_last_removed()','sample_code' => '  // We\'ve removed the 5.x-1.x version of mymodule, including database updates.
  // The next update function is mymodule_update_5200().
  return 5103;'),
  array('id' => '397','drupal_version' => '7','name' => 'hook_update_N','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_update_N/7','short_description' => 'Perform a single update.','description' => 'Perform a single update. For each patch which requires a database change add a new hook_update_N()
which will be called by update.php. The database updates are numbered
sequentially according to the version of Drupal you are compatible with. Schema updates should adhere to the Schema API:
http://drupal.org/node/150215 Database updates consist of 3 parts: 1 digit for Drupal core compatibility
1 digit for your module\'s major release version (e.g. is this the 5.x-1.* (1) or 5.x-2.* (2) series of your module?)
2 digits for sequential counting starting with 00 The 2nd digit should be 0 for initial porting of your module to a new Drupal
core API. Examples: mymodule_update_5200()
This is the first update to get the database ready to run mymodule 5.x-2.*.

mymodule_update_6000()
This is the required update for mymodule to run with Drupal core API 6.x.

mymodule_update_6100()
This is the first update to get the database ready to run mymodule 6.x-1.*.

mymodule_update_6200()
This is the first update to get the database ready to run mymodule 6.x-2.*.
Users can directly update from 5.x-2.* to 6.x-2.* and they get all 60XX
and 62XX updates, but not 61XX updates, because those reside in the
6.x-1.x branch only. A good rule of thumb is to remove updates older than two major releases of
Drupal. See hook_update_last_removed() to notify Drupal about the removals.
For further information about releases and release numbers see:
Maintaining a drupal.org project with Git Never renumber update functions. Implementations of this hook should be placed in a mymodule.install file in
the same directory as mymodule.module. Drupal core\'s updates are implemented
using the system module as a name and stored in database/updates.inc. If your update task is potentially time-consuming, you\'ll need to implement a
multipass update to avoid PHP timeouts. Multipass updates use the $sandbox
parameter provided by the batch API (normally, $context[\'sandbox\']) to store
information between successive calls, and the $sandbox[\'#finished\'] value
to provide feedback regarding completion level. See the batch operations page for more information on how to use the batch API:
http://drupal.org/node/180528','documentation' => '
 * Perform a single update. For each patch which requires a database change add a
 * new hook_update_N() which will be called by update.php. The database updates
 * are numbered sequentially according to the version of Drupal you are
 * compatible with. Schema updates should adhere to the Schema API:
 * http://drupal.org/node/150215 Database updates consist of 3 parts: 1 digit for
 * Drupal core compatibility 1 digit for your module\'s major release version
 * (e.g. is this the 5.x-1.* (1) or 5.x-2.','params_docs' => '
 *
 * @param $sandbox
 *   Stores information for multipass updates. See above for more information.
 *
 * @return
 *   Optionally update hooks may return a translated string that will be
 *   displayed to the user. If no message is returned, no message will be
 *   presented to the user.','signature' => 'hook_update_N(&$sandbox)','sample_code' => '  // For non-multipass updates, the signature can simply be;
  // function hook_update_N() {

  // For most updates, the following is sufficient.
  db_add_field(\'mytable1\', \'newcol\', array(\'type\' => \'int\', \'not null\' => TRUE, \'description\' => \'My new integer column.\'));

  // However, for more complex operations that may take a long time,
  // you may hook into Batch API as in the following example.

  // Update 3 users at a time to have an exclamation point after their names.
  // (They\'re really happy that we can do batch API in this hook!)
  if (!isset($sandbox[\'progress\'])) {
    $sandbox[\'progress\'] = 0;
    $sandbox[\'current_uid\'] = 0;
    // We\'ll -1 to disregard the uid 0...
    $sandbox[\'max\'] = db_query(\'SELECT COUNT(DISTINCT uid) FROM {users}\')->fetchField() - 1;
  }

  $users = db_select(\'users\', \'u\')
    ->fields(\'u\', array(\'uid\', \'name\'))
    ->condition(\'uid\', $sandbox[\'current_uid\'], \'>\')
    ->range(0, 3)
    ->orderBy(\'uid\', \'ASC\')
    ->execute();

  foreach ($users as $user) {
    $user->name .= \'!\';
    db_update(\'users\')
      ->fields(array(\'name\' => $user->name))
      ->condition(\'uid\', $user->uid)
      ->execute();

    $sandbox[\'progress\']++;
    $sandbox[\'current_uid\'] = $user->uid;
  }

  $sandbox[\'#finished\'] = empty($sandbox[\'max\']) ? 1 : ($sandbox[\'progress\'] / $sandbox[\'max\']);

  // To display a message to the user when the update is completed, return it.
  // If you do not want to display a completion message, simply return nothing.
  return t(\'The update did what it was supposed to do.\');

  // In case of an error, simply throw an exception with an error message.
  throw new DrupalUpdateException(\'Something went wrong; here is what you should do.\');'),
  array('id' => '398','drupal_version' => '7','name' => 'hook_update_projects_alter','link' => 'http://api.drupal.org/api/drupal/modules!update!update.api.php/function/hook_update_projects_alter/7','short_description' => 'Alter the list of projects before fetching data and comparing versions.','description' => 'Alter the list of projects before fetching data and comparing versions. Most modules will never need to implement this hook. It is for advanced
interaction with the update status module: mere mortals need not apply.
The primary use-case for this hook is to add projects to the list, for
example, to provide update status data on disabled modules and themes. A
contributed module might want to hide projects from the list, for example,
if there is a site-specific module that doesn\'t have any official releases,
that module could remove itself from this list to avoid "No available
releases found" warnings on the available updates report. In rare cases, a
module might want to alter the data associated with a project already in
the list.','documentation' => '
 * Alter the list of projects before fetching data and comparing versions. Most
 * modules will never need to implement this hook. It is for advanced interaction
 * with the update status module: mere mortals need not apply. The primary
 * use-case for this hook is to add projects to the list, for example, to provide
 * update status data on disabled modules and themes. A contributed module might
 * want to hide projects from the list, for example, if there is a site-specific
 * module that doesn\'t have any official releases, that module could remove
 * itself from this list.','params_docs' => '
 *
 * @param $projects
 *   Reference to an array of the projects installed on the system. This includes
 *   all the metadata documented in the comments below for each project (either
 *   module or theme) that is currently enabled. The array is initially populated
 *   inside.','signature' => 'hook_update_projects_alter(&$projects)','sample_code' => '  // Hide a site-specific module from the list.
  unset($projects[\'site_specific_module\']);

  // Add a disabled module to the list.
  // The key for the array should be the machine-readable project "short name".
  $projects[\'disabled_project_name\'] = array(
    // Machine-readable project short name (same as the array key above).
    \'name\' => \'disabled_project_name\',
    // Array of values from the main .info file for this project.
    \'info\' => array(
      \'name\' => \'Some disabled module\',
      \'description\' => \'A module not enabled on the site that you want to see in the available updates report.\',
      \'version\' => \'7.x-1.0\',
      \'core\' => \'7.x\',
      // The maximum file change time (the "ctime" returned by the filectime()
      // PHP method) for all of the .info files included in this project.
      \'_info_file_ctime\' => 1243888165,
    ),
    // The date stamp when the project was released, if known. If the disabled
    // project was an officially packaged release from drupal.org, this will
    // be included in the .info file as the \'datestamp\' field. This only
    // really matters for development snapshot releases that are regenerated,
    // so it can be left undefined or set to 0 in most cases.
    \'datestamp\' => 1243888185,
    // Any modules (or themes) included in this project. Keyed by machine-
    // readable "short name", value is the human-readable project name printed
    // in the UI.
    \'includes\' => array(
      \'disabled_project\' => \'Disabled module\',
      \'disabled_project_helper\' => \'Disabled module helper module\',
      \'disabled_project_foo\' => \'Disabled module foo add-on module\',
    ),
    // Does this project contain a \'module\', \'theme\', \'disabled-module\', or
    // \'disabled-theme\'?
    \'project_type\' => \'disabled-module\',
  );'),
  array('id' => '399','drupal_version' => '7','name' => 'hook_update_status_alter','link' => 'http://api.drupal.org/api/drupal/modules!update!update.api.php/function/hook_update_status_alter/7','short_description' => 'Alter the information about available updates for projects.','description' => 'Alter the information about available updates for projects.','documentation' => '
 * Alter the information about available updates for projects.','params_docs' => '
 *
 * @param $projects
 *   Reference to an array of information about available updates to each project
 *   installed on the system.','signature' => 'hook_update_status_alter(&$projects)','sample_code' => '  $settings = variable_get(\'update_advanced_project_settings\', array());
  foreach ($projects as $project => $project_info) {
    if (isset($settings[$project]) && isset($settings[$project][\'check\']) &&
        ($settings[$project][\'check\'] == \'never\' ||
          (isset($project_info[\'recommended\']) &&
            $settings[$project][\'check\'] === $project_info[\'recommended\']))) {
      $projects[$project][\'status\'] = UPDATE_NOT_CHECKED;
      $projects[$project][\'reason\'] = t(\'Ignored from settings\');
      if (!empty($settings[$project][\'notes\'])) {
        $projects[$project][\'extra\'][] = array(
          \'class\' => array(\'admin-note\'),
          \'label\' => t(\'Administrator note\'),
          \'data\' => $settings[$project][\'notes\'],
        );
      }
    }
  }'),
  array('id' => '400','drupal_version' => '7','name' => 'hook_url_inbound_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_url_inbound_alter/7','short_description' => 'Alters inbound URL requests.','description' => 'Alters inbound URL requests.','documentation' => '
 * Alters inbound URL requests.','params_docs' => '
 *
 * @param $path
 *   The path being constructed, which, if a path alias, has been resolved to a
 *   Drupal path by the database, and which also may have been altered by other
 *   modules before this one.
 * @param $original_path
 *   The original path, before being checked for path aliases or altered by any
 *   modules.
 * @param $path_language
 *   The language of the path.','signature' => 'hook_url_inbound_alter(&$path, $original_path, $path_language)','sample_code' => '  // Create the path user/me/edit, which allows a user to edit their account.
  if (preg_match(\'|^user/me/edit(/.*)?|\', $path, $matches)) {
    global $user;
    $path = \'user/\' . $user->uid . \'/edit\' . $matches[1];
  }'),
  array('id' => '401','drupal_version' => '7','name' => 'hook_url_outbound_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_url_outbound_alter/7','short_description' => 'Alters outbound URLs.','description' => 'Alters outbound URLs.','documentation' => '
 * Alters outbound URLs.','params_docs' => '
 *
 * @param $path
 *   The outbound path to alter, not adjusted for path aliases yet. It won\'t be
 *   adjusted for path aliases until all modules are finished altering it, thus
 *   being consistent with.
 * @param $options
 *   A set of URL options for the URL so elements such as a fragment or a query
 *   string can be added to the URL.
 * @param $original_path
 *   The original path, before being altered by any modules.','signature' => 'hook_url_outbound_alter(&$path, &$options, $original_path)','sample_code' => '  // Use an external RSS feed rather than the Drupal one.
  if ($path == \'rss.xml\') {
    $path = \'http://example.com/rss.xml\';
    $options[\'external\'] = TRUE;
  }

  // Instead of pointing to user/[uid]/edit, point to user/me/edit.
  if (preg_match(\'|^user/([0-9]*)/edit(/.*)?|\', $path, $matches)) {
    global $user;
    if ($user->uid == $matches[1]) {
      $path = \'user/me/edit\' . $matches[2];
    }
  }'),
  array('id' => '402','drupal_version' => '7','name' => 'hook_username_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_username_alter/7','short_description' => 'Alter the username that is displayed for a user.','description' => 'Alter the username that is displayed for a user. Called by format_username() to allow modules to alter the username that\'s
displayed. Can be used to ensure user privacy in situations where
$account->name is too revealing.','documentation' => '
 * Alter the username that is displayed for a user. Called by format_username()
 * to allow modules to alter the username that\'s displayed. Can be used to ensure
 * user privacy in situations where $account->name is too revealing.','params_docs' => '
 *
 * @param $name
 *   The string that.
 * @param $account
 *   The account object passed to.','signature' => 'hook_username_alter(&$name, $account)','sample_code' => '  // Display the user\'s uid instead of name.
  if (isset($account->uid)) {
    $name = t(\'User !uid\', array(\'!uid\' => $account->uid));
  }'),
  array('id' => '403','drupal_version' => '7','name' => 'hook_user_cancel','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_cancel/7','short_description' => 'Act on user account cancellations.','description' => 'Act on user account cancellations. This hook is invoked from user_cancel() before a user account is canceled.
Depending on the account cancellation method, the module should either do
nothing, unpublish content, or anonymize content. See user_cancel_methods()
for the list of default account cancellation methods provided by User module.
Modules may add further methods via hook_user_cancel_methods_alter(). This hook is NOT invoked for the \'user_cancel_delete\' account cancellation
method. To react on this method, implement hook_user_delete() instead. Expensive operations should be added to the global account cancellation batch
by using batch_set().','documentation' => '
 * Act on user account cancellations. This hook is invoked from user_cancel()
 * before a user account is canceled. Depending on the account cancellation
 * method, the module should either do nothing, unpublish content, or anonymize
 * content. See user_cancel_methods() for the list of default account
 * cancellation methods provided by User module. Modules may add further methods
 * via hook_user_cancel_methods_alter(). This hook is NOT invoked for the
 * \'user_cancel_delete\' account cancellation method. To react on this method,
 * implement hook_user_delete() instead.','params_docs' => '
 *
 * @param $edit
 *   The array of form values submitted by the user.
 * @param $account
 *   The user object on which the operation is being performed.
 * @param $method
 *   The account cancellation method.','signature' => 'hook_user_cancel($edit, $account, $method)','sample_code' => '  switch ($method) {
    case \'user_cancel_block_unpublish\':
      // Unpublish nodes (current revisions).
      module_load_include(\'inc\', \'node\', \'node.admin\');
      $nodes = db_select(\'node\', \'n\')
        ->fields(\'n\', array(\'nid\'))
        ->condition(\'uid\', $account->uid)
        ->execute()
        ->fetchCol();
      node_mass_update($nodes, array(\'status\' => 0));
      break;

    case \'user_cancel_reassign\':
      // Anonymize nodes (current revisions).
      module_load_include(\'inc\', \'node\', \'node.admin\');
      $nodes = db_select(\'node\', \'n\')
        ->fields(\'n\', array(\'nid\'))
        ->condition(\'uid\', $account->uid)
        ->execute()
        ->fetchCol();
      node_mass_update($nodes, array(\'uid\' => 0));
      // Anonymize old revisions.
      db_update(\'node_revision\')
        ->fields(array(\'uid\' => 0))
        ->condition(\'uid\', $account->uid)
        ->execute();
      // Clean history.
      db_delete(\'history\')
        ->condition(\'uid\', $account->uid)
        ->execute();
      break;
  }'),
  array('id' => '404','drupal_version' => '7','name' => 'hook_user_cancel_methods_alter','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_cancel_methods_alter/7','short_description' => 'Modify account cancellation methods.','description' => 'Modify account cancellation methods. By implementing this hook, modules are able to add, customize, or remove
account cancellation methods. All defined methods are turned into radio
button form elements by user_cancel_methods() after this hook is invoked.
The following properties can be defined for each method: title: The radio button\'s title.
description: (optional) A description to display on the confirmation form
if the user is not allowed to select the account cancellation method. The
description is NOT used for the radio button, but instead should provide
additional explanation to the user seeking to cancel their account.
access: (optional) A boolean value indicating whether the user can access
a method. If #access is defined, the method cannot be configured as default
method.','documentation' => '
 * Modify account cancellation methods. By implementing this hook, modules are
 * able to add, customize, or remove account cancellation methods. All defined
 * methods are turned into radio button form elements by user_cancel_methods()
 * after this hook is invoked. The following properties can be defined for each
 * method: title: The radio button\'s title. description: (optional) A description
 * to display on the confirmation form if the user is not allowed to select the
 * account cancellation method.','params_docs' => '
 *
 * @param $methods
 *   An array containing user account cancellation methods, keyed by method id.','signature' => 'hook_user_cancel_methods_alter(&$methods)','sample_code' => '  // Limit access to disable account and unpublish content method.
  $methods[\'user_cancel_block_unpublish\'][\'access\'] = user_access(\'administer site configuration\');

  // Remove the content re-assigning method.
  unset($methods[\'user_cancel_reassign\']);

  // Add a custom zero-out method.
  $methods[\'mymodule_zero_out\'] = array(
    \'title\' => t(\'Delete the account and remove all content.\'),
    \'description\' => t(\'All your content will be replaced by empty strings.\'),
    // access should be used for administrative methods only.
    \'access\' => user_access(\'access zero-out account cancellation method\'),
  );'),
  array('id' => '405','drupal_version' => '7','name' => 'hook_user_categories','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_categories/7','short_description' => 'Retrieve a list of user setting or profile information categories.','description' => 'Retrieve a list of user setting or profile information categories.','documentation' => '
 * Retrieve a list of user setting or profile information categories.','params_docs' => '
 *
 * @return
 *   An array of associative arrays. Each inner array has elements: "name": The
 *   internal name of the category. "title": The human-readable, localized name
 *   of the category. "weight": An integer specifying the category\'s sort
 *   ordering. "access callback": Name of the access callback function to use to
 *   determine whether the user can edit the category. Defaults to using
 *   user_edit_access(). See hook_menu() for more information on access
 *   callbacks. "access arguments": Arguments for the access callback function.
 *   Defaults to array(1).','signature' => 'hook_user_categories()','sample_code' => '  return array(array(
      \'name\' => \'account\',
      \'title\' => t(\'Account settings\'),
      \'weight\' => 1,
    ));'),
  array('id' => '406','drupal_version' => '7','name' => 'hook_user_delete','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_delete/7','short_description' => 'Respond to user deletion.','description' => 'Respond to user deletion. This hook is invoked from user_delete_multiple() before field_attach_delete()
is called and before users are actually removed from the database. Modules should additionally implement hook_user_cancel() to process stored
user data for other account cancellation methods.','documentation' => '
 * Respond to user deletion. This hook is invoked from user_delete_multiple()
 * before field_attach_delete() is called and before users are actually removed
 * from the database. Modules should additionally implement hook_user_cancel() to
 * process stored user data for other account cancellation methods.','params_docs' => '
 *
 * @param $account
 *   The account that is being deleted.','signature' => 'hook_user_delete($account)','sample_code' => '  db_delete(\'mytable\')
    ->condition(\'uid\', $account->uid)
    ->execute();'),
  array('id' => '407','drupal_version' => '7','name' => 'hook_user_insert','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_insert/7','short_description' => 'A user account was created.','description' => 'A user account was created. The module should save its custom additions to the user object into the
database.','documentation' => '
 * A user account was created. The module should save its custom additions to the
 * user object into the database.','params_docs' => '
 *
 * @param $edit
 *   The array of form values submitted by the user.
 * @param $account
 *   The user object on which the operation is being performed.
 * @param $category
 *   The active category of user information being edited.','signature' => 'hook_user_insert(&$edit, $account, $category)','sample_code' => '  db_insert(\'mytable\')
    ->fields(array(
    \'myfield\' => $edit[\'myfield\'],
    \'uid\' => $account->uid,
  ))
    ->execute();'),
  array('id' => '408','drupal_version' => '7','name' => 'hook_user_load','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_load/7','short_description' => 'Act on user objects when loaded from the database.','description' => 'Act on user objects when loaded from the database. Due to the static cache in user_load_multiple() you should not use this
hook to modify the user properties returned by the {users} table itself
since this may result in unreliable results when loading from cache.','documentation' => '
 * Act on user objects when loaded from the database. Due to the static cache in
 * user_load_multiple() you should not use this hook to modify the user
 * properties returned by the {users} table itself since this may result in
 * unreliable results when loading from cache.','params_docs' => '
 *
 * @param $users
 *   An array of user objects, indexed by uid.','signature' => 'hook_user_load($users)','sample_code' => '  $result = db_query(\'SELECT uid, foo FROM {my_table} WHERE uid IN (:uids)\', array(\':uids\' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->foo = $record->foo;
  }'),
  array('id' => '409','drupal_version' => '7','name' => 'hook_user_login','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_login/7','short_description' => 'The user just logged in.','description' => 'The user just logged in.','documentation' => '
 * The user just logged in.','params_docs' => '
 *
 * @param $edit
 *   The array of form values submitted by the user.
 * @param $account
 *   The user object on which the operation was just performed.','signature' => 'hook_user_login(&$edit, $account)','sample_code' => '  // If the user has a NULL time zone, notify them to set a time zone.
  if (!$account->timezone && variable_get(\'configurable_timezones\', 1) && variable_get(\'empty_timezone_message\', 0)) {
    drupal_set_message(t(\'Configure your <a href="@user-edit">account time zone setting</a>.\', array(\'@user-edit\' => url("user/$account->uid/edit", array(\'query\' => drupal_get_destination(), \'fragment\' => \'edit-timezone\')))));
  }'),
  array('id' => '410','drupal_version' => '7','name' => 'hook_user_logout','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_logout/7','short_description' => 'The user just logged out.','description' => 'The user just logged out.','documentation' => '
 * The user just logged out.','params_docs' => '
 *
 * @param $account
 *   The user object on which the operation was just performed.','signature' => 'hook_user_logout($account)','sample_code' => '  db_insert(\'logouts\')
    ->fields(array(
    \'uid\' => $account->uid,
    \'time\' => time(),
  ))
    ->execute();'),
  array('id' => '411','drupal_version' => '7','name' => 'hook_user_operations','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_operations/7','short_description' => 'Add mass user operations.','description' => 'Add mass user operations. This hook enables modules to inject custom operations into the mass operations
dropdown found at admin/people, by associating a callback function with
the operation, which is called when the form is submitted. The callback function
receives one initial argument, which is an array of the checked users.','documentation' => '
 * Add mass user operations. This hook enables modules to inject custom
 * operations into the mass operations dropdown found at admin/people, by
 * associating a callback function with the operation, which is called when the
 * form is submitted. The callback function receives one initial argument, which
 * is an array of the checked users.','params_docs' => '
 *
 * @return
 *   An array of operations. Each operation is an associative array that may
 *   contain the following key-value pairs: "label": Required. The label for the
 *   operation, displayed in the dropdown menu. "callback": Required. The
 *   function to call for the operation. "callback arguments": Optional. An array
 *   of additional arguments to pass to the callback function.','signature' => 'hook_user_operations()','sample_code' => '  $operations = array(
    \'unblock\' => array(
      \'label\' => t(\'Unblock the selected users\'),
      \'callback\' => \'user_user_operations_unblock\',
    ),
    \'block\' => array(
      \'label\' => t(\'Block the selected users\'),
      \'callback\' => \'user_user_operations_block\',
    ),
    \'cancel\' => array(
      \'label\' => t(\'Cancel the selected user accounts\'),
    ),
  );
  return $operations;'),
  array('id' => '412','drupal_version' => '7','name' => 'hook_user_presave','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_presave/7','short_description' => 'A user account is about to be created or updated.','description' => 'A user account is about to be created or updated. This hook is primarily intended for modules that want to store properties in
the serialized {users}.data column, which is automatically loaded whenever a
user account object is loaded, modules may add to $edit[\'data\'] in order
to have their data serialized on save.','documentation' => '
 * A user account is about to be created or updated. This hook is primarily
 * intended for modules that want to store properties in the serialized
 * {users}.data column, which is automatically loaded whenever a user account
 * object is loaded, modules may add to $edit[\'data\'] in order to have their data
 * serialized on save.','params_docs' => '
 *
 * @param $edit
 *   The array of form values submitted by the user.
 * @param $account
 *   The user object on which the operation is performed.
 * @param $category
 *   The active category of user information being edited.','signature' => 'hook_user_presave(&$edit, $account, $category)','sample_code' => '  // Make sure that our form value \'mymodule_foo\' is stored as
  // \'mymodule_bar\' in the \'data\' (serialized) column.
  if (isset($edit[\'mymodule_foo\'])) {
    $edit[\'data\'][\'mymodule_bar\'] = $edit[\'mymodule_foo\'];
  }'),
  array('id' => '413','drupal_version' => '7','name' => 'hook_user_role_delete','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_role_delete/7','short_description' => 'Inform other modules that a user role has been deleted.','description' => 'Inform other modules that a user role has been deleted. This hook allows you act when a user role has been deleted.
If your module stores references to roles, it\'s recommended that you
implement this hook and delete existing instances of the deleted role
in your module database tables.','documentation' => '
 * Inform other modules that a user role has been deleted. This hook allows you
 * act when a user role has been deleted. If your module stores references to
 * roles, it\'s recommended that you implement this hook and delete existing
 * instances of the deleted role in your module database tables.','params_docs' => '
 *
 * @param $role
 *   The $role object being deleted.','signature' => 'hook_user_role_delete($role)','sample_code' => '  // Delete existing instances of the deleted role.
  db_delete(\'my_module_table\')
    ->condition(\'rid\', $role->rid)
    ->execute();'),
  array('id' => '414','drupal_version' => '7','name' => 'hook_user_role_insert','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_role_insert/7','short_description' => 'Inform other modules that a user role has been added.','description' => 'Inform other modules that a user role has been added. Modules implementing this hook can act on the user role object when saved to
the database. It\'s recommended that you implement this hook if your module
adds additional data to user roles object. The module should save its custom
additions to the database.','documentation' => '
 * Inform other modules that a user role has been added. Modules implementing
 * this hook can act on the user role object when saved to the database. It\'s
 * recommended that you implement this hook if your module adds additional data
 * to user roles object. The module should save its custom additions to the
 * database.','params_docs' => '
 *
 * @param $role
 *   A user role object.','signature' => 'hook_user_role_insert($role)','sample_code' => '  // Save extra fields provided by the module to user roles.
  db_insert(\'my_module_table\')
    ->fields(array(
    \'rid\' => $role->rid,
    \'role_description\' => $role->description,
  ))
    ->execute();'),
  array('id' => '415','drupal_version' => '7','name' => 'hook_user_role_presave','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_role_presave/7','short_description' => 'Inform other modules that a user role is about to be saved.','description' => 'Inform other modules that a user role is about to be saved. Modules implementing this hook can act on the user role object before
it has been saved to the database.','documentation' => '
 * Inform other modules that a user role is about to be saved. Modules
 * implementing this hook can act on the user role object before it has been
 * saved to the database.','params_docs' => '
 *
 * @param $role
 *   A user role object.','signature' => 'hook_user_role_presave($role)','sample_code' => '  // Set a UUID for the user role if it doesn\'t already exist
  if (empty($role->uuid)) {
    $role->uuid = uuid_uuid();
  }'),
  array('id' => '416','drupal_version' => '7','name' => 'hook_user_role_update','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_role_update/7','short_description' => 'Inform other modules that a user role has been updated.','description' => 'Inform other modules that a user role has been updated. Modules implementing this hook can act on the user role object when updated.
It\'s recommended that you implement this hook if your module adds additional
data to user roles object. The module should save its custom additions to
the database.','documentation' => '
 * Inform other modules that a user role has been updated. Modules implementing
 * this hook can act on the user role object when updated. It\'s recommended that
 * you implement this hook if your module adds additional data to user roles
 * object. The module should save its custom additions to the database.','params_docs' => '
 *
 * @param $role
 *   A user role object.','signature' => 'hook_user_role_update($role)','sample_code' => '  // Save extra fields provided by the module to user roles.
  db_merge(\'my_module_table\')
    ->key(array(\'rid\' => $role->rid))
    ->fields(array(
    \'role_description\' => $role->description,
  ))
    ->execute();'),
  array('id' => '417','drupal_version' => '7','name' => 'hook_user_update','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_update/7','short_description' => 'A user account was updated.','description' => 'A user account was updated. Modules may use this hook to update their user data in a custom storage
after a user account has been updated.','documentation' => '
 * A user account was updated. Modules may use this hook to update their user
 * data in a custom storage after a user account has been updated.','params_docs' => '
 *
 * @param $edit
 *   The array of form values submitted by the user.
 * @param $account
 *   The user object on which the operation is performed.
 * @param $category
 *   The active category of user information being edited.','signature' => 'hook_user_update(&$edit, $account, $category)','sample_code' => '  db_insert(\'user_changes\')
    ->fields(array(
    \'uid\' => $account->uid,
    \'changed\' => time(),
  ))
    ->execute();'),
  array('id' => '418','drupal_version' => '7','name' => 'hook_user_view','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_view/7','short_description' => 'The user\'s account information is being displayed.','description' => 'The user\'s account information is being displayed. The module should format its custom additions for display and add them to the
$account->content array.','documentation' => '
 * The user\'s account information is being displayed. The module should format
 * its custom additions for display and add them to the $account->content array.','params_docs' => '
 *
 * @param $account
 *   The user object on which the operation is being performed.
 * @param $view_mode
 *   View mode, e.g. \'full\'.
 * @param $langcode
 *   The language code used for rendering.','signature' => 'hook_user_view($account, $view_mode, $langcode)','sample_code' => '  if (user_access(\'create blog content\', $account)) {
    $account->content[\'summary\'][\'blog\'] =  array(
      \'#type\' => \'user_profile_item\',
      \'#title\' => t(\'Blog\'),
      \'#markup\' => l(t(\'View recent blog entries\'), "blog/$account->uid", array(\'attributes\' => array(\'title\' => t("Read !username\'s latest blog entries.", array(\'!username\' => format_username($account)))))),
      \'#attributes\' => array(\'class\' => array(\'blog\')),
    );
  }'),
  array('id' => '419','drupal_version' => '7','name' => 'hook_user_view_alter','link' => 'http://api.drupal.org/api/drupal/modules!user!user.api.php/function/hook_user_view_alter/7','short_description' => 'The user was built; the module may modify the structured content.','description' => 'The user was built; the module may modify the structured content. This hook is called after the content has been assembled in a structured array
and may be used for doing processing which requires that the complete user
content structure has been built. If the module wishes to act on the rendered HTML of the user rather than the
structured content array, it may use this hook to add a #post_render callback.
Alternatively, it could also implement hook_preprocess_user_profile(). See
drupal_render() and theme() documentation respectively for details.','documentation' => '
 * The user was built; the module may modify the structured content. This hook is
 * called after the content has been assembled in a structured array and may be
 * used for doing processing which requires that the complete user content
 * structure has been built. If the module wishes to act on the rendered HTML of
 * the user rather than the structured content array, it may use this hook to add
 * a #post_render callback. Alternatively, it could also implement
 * hook_preprocess_user_profile(). See drupal_render() and theme() documentation
 * respectively for details.','params_docs' => '
 *
 * @param $build
 *   A renderable array representing the user.','signature' => 'hook_user_view_alter(&$build)','sample_code' => '  // Check for the existence of a field added by another module.
  if (isset($build[\'an_additional_field\'])) {
    // Change its weight.
    $build[\'an_additional_field\'][\'#weight\'] = -10;
  }

  // Add a #post_render callback to act on the rendered HTML of the user.
  $build[\'#post_render\'][] = \'my_module_user_post_render\';'),
  array('id' => '420','drupal_version' => '7','name' => 'hook_validate','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_validate/7','short_description' => 'Perform node validation before a node is created or updated.','description' => 'Perform node validation before a node is created or updated. This hook is invoked only on the module that defines the node\'s content type
(use hook_node_validate() to act on all node validations). This hook is invoked from node_validate(), after a user has finished
editing the node and is previewing or submitting it. It is invoked at the end
of all the standard validation steps, and before hook_node_validate() is
invoked. To indicate a validation error, use form_set_error(). Note: Changes made to the $node object within your hook implementation will
have no effect.  The preferred method to change a node\'s content is to use
hook_node_presave() instead.','documentation' => '
 * Perform node validation before a node is created or updated. This hook is
 * invoked only on the module that defines the node\'s content type (use
 * hook_node_validate() to act on all node validations). This hook is invoked
 * from node_validate(), after a user has finished editing the node and is
 * previewing or submitting it. It is invoked at the end of all the standard
 * validation steps, and before hook_node_validate() is invoked. To indicate a
 * validation error, use form_set_error().','params_docs' => '
 *
 * @param $node
 *   The node being validated.
 * @param $form
 *   The form being used to edit the node.
 * @param $form_state
 *   The form state array.','signature' => 'hook_validate($node, $form, &$form_state)','sample_code' => '  if (isset($node->end) && isset($node->start)) {
    if ($node->start > $node->end) {
      form_set_error(\'time\', t(\'An event may not end before it starts.\'));
    }
  }'),
  array('id' => '421','drupal_version' => '7','name' => 'hook_verify_update_archive','link' => 'http://api.drupal.org/api/drupal/modules!update!update.api.php/function/hook_verify_update_archive/7','short_description' => 'Verify an archive after it has been downloaded and extracted.','description' => 'Verify an archive after it has been downloaded and extracted.','documentation' => '
 * Verify an archive after it has been downloaded and extracted.','params_docs' => '
 *
 * @param string $project
 *   The short name of the project that has been downloaded.
 * @param string $archive_file
 *   The filename of the unextracted archive.
 * @param string $directory
 *   The directory that the archive was extracted into.
 *
 * @return
 *   If there are any problems, return an array of error messages. If there are
 *   no problems, return an empty array.','signature' => 'hook_verify_update_archive($project, $archive_file, $directory)','sample_code' => '  $errors = array();
  if (!file_exists($directory)) {
    $errors[] = t(\'The %directory does not exist.\', array(\'%directory\' => $directory));
  }
  // Add other checks on the archive integrity here.
  return $errors;'),
  array('id' => '422','drupal_version' => '7','name' => 'hook_view','link' => 'http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_view/7','short_description' => 'Display a node.','description' => 'Display a node. This hook is invoked only on the module that defines the node\'s content type
(use hook_node_view() to act on all node views). This hook is invoked during node viewing after the node is fully loaded,
so that the node type module can define a custom method for display, or
add to the default display.','documentation' => '
 * Display a node. This hook is invoked only on the module that defines the
 * node\'s content type (use hook_node_view() to act on all node views). This hook
 * is invoked during node viewing after the node is fully loaded, so that the
 * node type module can define a custom method for display, or add to the default
 * display.','params_docs' => '
 *
 * @param $node
 *   The node to be displayed, as returned by.
 * @param $view_mode
 *   View mode, e.g. \'full\', \'teaser\', ...
 *
 * @return
 *   $node. The passed $node parameter should be modified as necessary and
 *   returned so it can be properly presented. Nodes are prepared for display by
 *   assembling a structured array, formatted as in the Form API, in
 *   $node->content. As with Form API arrays, the #weight property can be used to
 *   control the relative positions of added elements. After this hook is
 *   invoked, node_view() calls field_attach_view() to add field views to
 *   $node->content, and then invokes hook_node_view() and
 *   hook_node_view_alter(), so if you want to affect the final view of the node,
 *   you ...','signature' => 'hook_view($node, $view_mode)','sample_code' => '  if ($view_mode == \'full\' && node_is_page($node)) {
    $breadcrumb = array();
    $breadcrumb[] = l(t(\'Home\'), NULL);
    $breadcrumb[] = l(t(\'Example\'), \'example\');
    $breadcrumb[] = l($node->field1, \'example/\' . $node->field1);
    drupal_set_breadcrumb($breadcrumb);
  }

  $node->content[\'myfield\'] = array(
    \'#markup\' => theme(\'mymodule_myfield\', $node->myfield),
    \'#weight\' => 1,
  );

  return $node;'),
  array('id' => '423','drupal_version' => '7','name' => 'hook_watchdog','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_watchdog/7','short_description' => 'Log an event message.','description' => 'Log an event message. This hook allows modules to route log events to custom destinations, such as
SMS, Email, pager, syslog, ...etc.','documentation' => '
 * Log an event message. This hook allows modules to route log events to custom
 * destinations, such as SMS, Email, pager, syslog, ...etc.','params_docs' => '
 *
 * @param $log_entry
 *   An associative array containing the following keys: type: The type of
 *   message for this entry. user: The user object for the user who was logged in
 *   when the event happened. uid: The user ID for the user who was logged in
 *   when the event happened. request_uri: The request URI for the page the event
 *   happened in. referer: The page that referred the user to the page where the
 *   event occurred. ip: The IP address where the request for the page came from.
 *   timestamp: The UNIX timestamp of the date/time the event occurred. severity:
 *   The severity of the message; one of the following values as defined in RFC
 *   3164: WATCHDOG_EMERGENCY: Emergency, system is unusable. WATCHDOG_ALERT:
 *   Alert, action must be taken immediately. WATCHDOG_CRITICAL: Critical
 *   conditions. WATCHDOG_ERROR: Error conditions.','signature' => 'hook_watchdog(array $log_entry)','sample_code' => '  global $base_url, $language;

  $severity_list = array(
    WATCHDOG_EMERGENCY => t(\'Emergency\'),
    WATCHDOG_ALERT => t(\'Alert\'),
    WATCHDOG_CRITICAL => t(\'Critical\'),
    WATCHDOG_ERROR => t(\'Error\'),
    WATCHDOG_WARNING => t(\'Warning\'),
    WATCHDOG_NOTICE => t(\'Notice\'),
    WATCHDOG_INFO => t(\'Info\'),
    WATCHDOG_DEBUG => t(\'Debug\'),
  );

  $to = \'someone@example.com\';
  $params = array();
  $params[\'subject\'] = t(\'[@site_name] @severity_desc: Alert from your web site\', array(
    \'@site_name\' => variable_get(\'site_name\', \'Drupal\'),
    \'@severity_desc\' => $severity_list[$log_entry[\'severity\']],
  ));

  $params[\'message\']  = "\\nSite:         @base_url";
  $params[\'message\'] .= "\\nSeverity:     (@severity) @severity_desc";
  $params[\'message\'] .= "\\nTimestamp:    @timestamp";
  $params[\'message\'] .= "\\nType:         @type";
  $params[\'message\'] .= "\\nIP Address:   @ip";
  $params[\'message\'] .= "\\nRequest URI:  @request_uri";
  $params[\'message\'] .= "\\nReferrer URI: @referer_uri";
  $params[\'message\'] .= "\\nUser:         (@uid) @name";
  $params[\'message\'] .= "\\nLink:         @link";
  $params[\'message\'] .= "\\nMessage:      \\n\\n@message";

  $params[\'message\'] = t($params[\'message\'], array(
    \'@base_url\' => $base_url,
    \'@severity\' => $log_entry[\'severity\'],
    \'@severity_desc\' => $severity_list[$log_entry[\'severity\']],
    \'@timestamp\' => format_date($log_entry[\'timestamp\']),
    \'@type\' => $log_entry[\'type\'],
    \'@ip\' => $log_entry[\'ip\'],
    \'@request_uri\' => $log_entry[\'request_uri\'],
    \'@referer_uri\' => $log_entry[\'referer\'],
    \'@uid\' => $log_entry[\'uid\'],
    \'@name\' => $log_entry[\'user\']->name,
    \'@link\' => strip_tags($log_entry[\'link\']),
    \'@message\' => strip_tags($log_entry[\'message\']),
  ));

  drupal_mail(\'emaillog\', \'entry\', $to, $language, $params);'),
  array('id' => '424','drupal_version' => '7','name' => 'hook_xmlrpc','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_xmlrpc/7','short_description' => 'Register XML-RPC callbacks.','description' => 'Register XML-RPC callbacks. This hook lets a module register callback functions to be called when
particular XML-RPC methods are invoked by a client.','documentation' => '
 * Register XML-RPC callbacks. This hook lets a module register callback
 * functions to be called when particular XML-RPC methods are invoked by a
 * client.','params_docs' => '
 *
 * @return
 *   An array which maps XML-RPC methods to Drupal functions. Each array element
 *   is either a pair of method => function or an array with four entries: The
 *   XML-RPC method name (for example, module.function). The Drupal callback
 *   function (for example, module_function). The method signature is an array of
 *   XML-RPC types. The first element of this array is the type of return value
 *   and then you should write a list of the types of the parameters. XML-RPC
 *   types are the following (See the types at http://www.xmlrpc.com/spec):
 *   "boolean": 0 (false) or 1 (true).','signature' => 'hook_xmlrpc()','sample_code' => '  return array(
    \'drupal.login\' => \'drupal_login\', array(
      \'drupal.site.ping\',
      \'drupal_directory_ping\',
      array(\'boolean\', \'string\', \'string\', \'string\', \'string\', \'string\'),
      t(\'Handling ping request\'),
    ),
  );'),
  array('id' => '425','drupal_version' => '7','name' => 'hook_xmlrpc_alter','link' => 'http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_xmlrpc_alter/7','short_description' => 'Alters the definition of XML-RPC methods before they are called.','description' => 'Alters the definition of XML-RPC methods before they are called. This hook allows modules to modify the callback definition of declared
XML-RPC methods, right before they are invoked by a client. Methods may be
added, or existing methods may be altered. Note that hook_xmlrpc() supports two distinct and incompatible formats to
define a callback, so care must be taken when altering other methods.','documentation' => '
 * Alters the definition of XML-RPC methods before they are called. This hook
 * allows modules to modify the callback definition of declared XML-RPC methods,
 * right before they are invoked by a client. Methods may be added, or existing
 * methods may be altered. Note that hook_xmlrpc() supports two distinct and
 * incompatible formats to define a callback, so care must be taken when altering
 * other methods.','params_docs' => '
 *
 * @param $methods
 *   An asssociative array of method callback definitions, as returned from.','signature' => 'hook_xmlrpc_alter(&$methods)','sample_code' => '  // Directly change a simple method.
  $methods[\'drupal.login\'] = \'mymodule_login\';

  // Alter complex definitions.
  foreach ($methods as $key => &$method) {
    // Skip simple method definitions.
    if (!is_int($key)) {
      continue;
    }
    // Perform the wanted manipulation.
    if ($method[0] == \'drupal.site.ping\') {
      $method[1] = \'mymodule_directory_ping\';
    }
  }'),
  array('id' => '426','drupal_version' => '7','name' => 'module_hook','link' => 'http://api.drupal.org/api/drupal/includes!module.inc/function/module_hook/7','short_description' => 'Determine whether a module implements a hook.','description' => 'Determine whether a module implements a hook.','documentation' => '
 * Determine whether a module implements a hook.','params_docs' => '
 *
 * @param $module
 *   The name of the module (without the .module extension).
 * @param $hook
 *   The name of the hook (e.g. "help" or "menu").
 *
 * @return
 *   TRUE if the module is both installed and enabled, and the hook is
 *   implemented in that module.','signature' => 'module_hook($module, $hook)','sample_code' => '  $function = $module . \'_\' . $hook;
  if (function_exists($function)) {
    return TRUE;
  }
  // If the hook implementation does not exist, check whether it may live in an
  // optional include file registered via hook_hook_info().
  $hook_info = module_hook_info();
  if (isset($hook_info[$hook][\'group\'])) {
    module_load_include(\'inc\', $module, $module . \'.\' . $hook_info[$hook][\'group\']);
    if (function_exists($function)) {
      return TRUE;
    }
  }
  return FALSE;'),
  array('id' => '427','drupal_version' => '7','name' => 'module_hook_info','link' => 'http://api.drupal.org/api/drupal/includes!module.inc/function/module_hook_info/7','short_description' => 'Retrieve a list of what hooks are explicitly declared.','description' => 'Retrieve a list of what hooks are explicitly declared.','documentation' => '
 * Retrieve a list of what hooks are explicitly declared.','params_docs' => '','signature' => 'module_hook_info()','sample_code' => '  // This function is indirectly invoked from bootstrap_invoke_all(), in which
  // case common.inc, subsystems, and modules are not loaded yet, so it does not
  // make sense to support hook groups resp. lazy-loaded include files prior to
  // full bootstrap.
  if (drupal_bootstrap(NULL, FALSE) != DRUPAL_BOOTSTRAP_FULL) {
    return array();
  }
  $hook_info = &drupal_static(__FUNCTION__);

  if (!isset($hook_info)) {
    $hook_info = array();
    $cache = cache_get(\'hook_info\', \'cache_bootstrap\');
    if ($cache === FALSE) {
      // Rebuild the cache and save it.
      // We can\'t use module_invoke_all() here or it would cause an infinite
      // loop.
      foreach (module_list() as $module) {
        $function = $module . \'_hook_info\';
        if (function_exists($function)) {
          $result = $function();
          if (isset($result) && is_array($result)) {
            $hook_info = array_merge_recursive($hook_info, $result);
          }
        }
      }
      // We can\'t use drupal_alter() for the same reason as above.
      foreach (module_list() as $module) {
        $function = $module . \'_hook_info_alter\';
        if (function_exists($function)) {
          $function($hook_info);
        }
      }
      cache_set(\'hook_info\', $hook_info, \'cache_bootstrap\');
    }
    else {
      $hook_info = $cache->data;
    }
  }

  return $hook_info;'),
  array('id' => '428','drupal_version' => '7','name' => 'module_implements','link' => 'http://api.drupal.org/api/drupal/includes!module.inc/function/module_implements/7','short_description' => 'Determine which modules are implementing a hook.','description' => 'Determine which modules are implementing a hook.','documentation' => '
 * Determine which modules are implementing a hook.','params_docs' => '
 *
 * @param $hook
 *   The name of the hook (e.g. "help" or "menu").
 * @param $sort
 *   By default, modules are ordered by weight and filename, settings this option
 *   to TRUE, module list will be ordered by module name.
 * @param $reset
 *   For internal use only: Whether to force the stored list of hook
 *   implementations to be regenerated (such as after enabling a new module,
 *   before processing hook_enable).
 *
 * @return
 *   An array with the names of the modules which are implementing this hook.','signature' => 'module_implements($hook, $sort = FALSE, $reset = FALSE)','sample_code' => '  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast[\'implementations\'] = &drupal_static(__FUNCTION__);
  }
  $implementations = &$drupal_static_fast[\'implementations\'];

  // We maintain a persistent cache of hook implementations in addition to the
  // static cache to avoid looping through every module and every hook on each
  // request. Benchmarks show that the benefit of this caching outweighs the
  // additional database hit even when using the default database caching
  // backend and only a small number of modules are enabled. The cost of the
  // cache_get() is more or less constant and reduced further when non-database
  // caching backends are used, so there will be more significant gains when a
  // large number of modules are installed or hooks invoked, since this can
  // quickly lead to module_hook() being called several thousand times
  // per request.
  if ($reset) {
    $implementations = array();
    cache_set(\'module_implements\', array(), \'cache_bootstrap\');
    drupal_static_reset(\'module_hook_info\');
    drupal_static_reset(\'drupal_alter\');
    cache_clear_all(\'hook_info\', \'cache_bootstrap\');
    return;
  }

  // Fetch implementations from cache.
  if (empty($implementations)) {
    $implementations = cache_get(\'module_implements\', \'cache_bootstrap\');
    if ($implementations === FALSE) {
      $implementations = array();
    }
    else {
      $implementations = $implementations->data;
    }
  }

  if (!isset($implementations[$hook])) {
    // The hook is not cached, so ensure that whether or not it has
    // implementations, that the cache is updated at the end of the request.
    $implementations[\'#write_cache\'] = TRUE;
    $hook_info = module_hook_info();
    $implementations[$hook] = array();
    $list = module_list(FALSE, FALSE, $sort);
    foreach ($list as $module) {
      $include_file = isset($hook_info[$hook][\'group\']) && module_load_include(\'inc\', $module, $module . \'.\' . $hook_info[$hook][\'group\']);
      // Since module_hook() may needlessly try to load the include file again,
      // function_exists() is used directly here.
      if (function_exists($module . \'_\' . $hook)) {
        $implementations[$hook][$module] = $include_file ? $hook_info[$hook][\'group\'] : FALSE;
      }
    }
    // Allow modules to change the weight of specific implementations but avoid
    // an infinite loop.
    if ($hook != \'module_implements_alter\') {
      drupal_alter(\'module_implements\', $implementations[$hook], $hook);
    }
  }
  else {
    foreach ($implementations[$hook] as $module => $group) {
      // If this hook implementation is stored in a lazy-loaded file, so include
      // that file first.
      if ($group) {
        module_load_include(\'inc\', $module, "$module.$group");
      }
      // It is possible that a module removed a hook implementation without the
      // implementations cache being rebuilt yet, so we check whether the
      // function exists on each request to avoid undefined function errors.
      // Since module_hook() may needlessly try to load the include file again,
      // function_exists() is used directly here.
      if (!function_exists($module . \'_\' . $hook)) {
        // Clear out the stale implementation from the cache and force a cache
        // refresh to forget about no longer existing hook implementations.
        unset($implementations[$hook][$module]);
        $implementations[\'#write_cache\'] = TRUE;
      }
    }
  }

  return array_keys($implementations[$hook]);'),
  array('id' => '429','drupal_version' => '7','name' => 'module_implements_write_cache','link' => 'http://api.drupal.org/api/drupal/includes!module.inc/function/module_implements_write_cache/7','short_description' => 'Writes the hook implementation cache.','description' => 'Writes the hook implementation cache.','documentation' => '
 * Writes the hook implementation cache.','params_docs' => '','signature' => 'module_implements_write_cache()','sample_code' => '  $implementations = &drupal_static(\'module_implements\');
  // Check whether we need to write the cache. We do not want to cache hooks
  // which are only invoked on HTTP POST requests since these do not need to be
  // optimized as tightly, and not doing so keeps the cache entry smaller.
  if (isset($implementations[\'#write_cache\']) && ($_SERVER[\'REQUEST_METHOD\'] == \'GET\' || $_SERVER[\'REQUEST_METHOD\'] == \'HEAD\')) {
    unset($implementations[\'#write_cache\']);
    cache_set(\'module_implements\', $implementations, \'cache_bootstrap\');
  }'),
  array('id' => '430','drupal_version' => '7','name' => 'module_invoke','link' => 'http://api.drupal.org/api/drupal/includes!module.inc/function/module_invoke/7','short_description' => 'Invoke a hook in a particular module.','description' => 'Invoke a hook in a particular module.','documentation' => '
 * Invoke a hook in a particular module.','params_docs' => '
 *
 * @param $module
 *   The name of the module (without the .module extension).
 * @param $hook
 *   The name of the hook to invoke.
 * @param ...
 *   Arguments to pass to the hook implementation.
 *
 * @return
 *   The return value of the hook implementation.','signature' => 'module_invoke($module, $hook)','sample_code' => '  $args = func_get_args();
  // Remove $module and $hook from the arguments.
  unset($args[0], $args[1]);
  if (module_hook($module, $hook)) {
    return call_user_func_array($module . \'_\' . $hook, $args);
  }'),
  array('id' => '431','drupal_version' => '7','name' => 'module_invoke_all','link' => 'http://api.drupal.org/api/drupal/includes!module.inc/function/module_invoke_all/7','short_description' => 'Invoke a hook in all enabled modules that implement it.','description' => 'Invoke a hook in all enabled modules that implement it.','documentation' => '
 * Invoke a hook in all enabled modules that implement it.','params_docs' => '
 *
 * @param $hook
 *   The name of the hook to invoke.
 * @param ...
 *   Arguments to pass to the hook.
 *
 * @return
 *   An array of return values of the hook implementations. If modules return
 *   arrays from their implementations, those are merged into one array.','signature' => 'module_invoke_all($hook)','sample_code' => '  $args = func_get_args();
  // Remove $hook from the arguments.
  unset($args[0]);
  $return = array();
  foreach (module_implements($hook) as $module) {
    $function = $module . \'_\' . $hook;
    if (function_exists($function)) {
      $result = call_user_func_array($function, $args);
      if (isset($result) && is_array($result)) {
        $return = array_merge_recursive($return, $result);
      }
      elseif (isset($result)) {
        $return[] = $result;
      }
    }
  }

  return $return;'),
  array('id' => '432','drupal_version' => '7','name' => 'sample_search_conditions_callback','link' => 'http://api.drupal.org/api/drupal/modules!search!search.api.php/function/sample_search_conditions_callback/7','short_description' => 'An example conditions callback function for search.','description' => 'An example conditions callback function for search. This example pulls additional search keywords out of the $_REQUEST variable,
(i.e. from the query string of the request). The conditions may also be
generated internally - for example based on a module\'s settings.','documentation' => '
 * An example conditions callback function for search. This example pulls
 * additional search keywords out of the $_REQUEST variable, (i.e. from the query
 * string of the request). The conditions may also be generated internally - for
 * example based on a module\'s settings.','params_docs' => '','signature' => 'sample_search_conditions_callback($keys)','sample_code' => '  $conditions = array();

  if (!empty($_REQUEST[\'keys\'])) {
    $conditions[\'keys\'] = $_REQUEST[\'keys\'];
  }
  if (!empty($_REQUEST[\'sample_search_keys\'])) {
    $conditions[\'sample_search_keys\'] = $_REQUEST[\'sample_search_keys\'];
  }
  if ($force_keys = variable_get(\'sample_search_force_keywords\', \'\')) {
    $conditions[\'sample_search_force_keywords\'] = $force_keys;
  }
  return $conditions;')
);
